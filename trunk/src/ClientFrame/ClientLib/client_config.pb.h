// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_config.proto

#ifndef PROTOBUF_client_5fconfig_2eproto__INCLUDED
#define PROTOBUF_client_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace client_config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_client_5fconfig_2eproto();
void protobuf_AssignDesc_client_5fconfig_2eproto();
void protobuf_ShutdownFile_client_5fconfig_2eproto();

class Path;
class Report;
class SocketIO;
class GameProto;
class client;

// ===================================================================

class Path : public ::google::protobuf::Message {
 public:
  Path();
  virtual ~Path();
  
  Path(const Path& from);
  
  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Path& default_instance();
  
  void Swap(Path* other);
  
  // implements Message ----------------------------------------------
  
  Path* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string log_file = 1;
  inline bool has_log_file() const;
  inline void clear_log_file();
  static const int kLogFileFieldNumber = 1;
  inline const ::std::string& log_file() const;
  inline void set_log_file(const ::std::string& value);
  inline void set_log_file(const char* value);
  inline void set_log_file(const char* value, size_t size);
  inline ::std::string* mutable_log_file();
  inline ::std::string* release_log_file();
  
  // required string data_path = 2;
  inline bool has_data_path() const;
  inline void clear_data_path();
  static const int kDataPathFieldNumber = 2;
  inline const ::std::string& data_path() const;
  inline void set_data_path(const ::std::string& value);
  inline void set_data_path(const char* value);
  inline void set_data_path(const char* value, size_t size);
  inline ::std::string* mutable_data_path();
  inline ::std::string* release_data_path();
  
  // required string update_pak = 3;
  inline bool has_update_pak() const;
  inline void clear_update_pak();
  static const int kUpdatePakFieldNumber = 3;
  inline const ::std::string& update_pak() const;
  inline void set_update_pak(const ::std::string& value);
  inline void set_update_pak(const char* value);
  inline void set_update_pak(const char* value, size_t size);
  inline ::std::string* mutable_update_pak();
  inline ::std::string* release_update_pak();
  
  // required string efficiency_file = 4;
  inline bool has_efficiency_file() const;
  inline void clear_efficiency_file();
  static const int kEfficiencyFileFieldNumber = 4;
  inline const ::std::string& efficiency_file() const;
  inline void set_efficiency_file(const ::std::string& value);
  inline void set_efficiency_file(const char* value);
  inline void set_efficiency_file(const char* value, size_t size);
  inline ::std::string* mutable_efficiency_file();
  inline ::std::string* release_efficiency_file();
  
  // @@protoc_insertion_point(class_scope:client_config.Path)
 private:
  inline void set_has_log_file();
  inline void clear_has_log_file();
  inline void set_has_data_path();
  inline void clear_has_data_path();
  inline void set_has_update_pak();
  inline void clear_has_update_pak();
  inline void set_has_efficiency_file();
  inline void clear_has_efficiency_file();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* log_file_;
  ::std::string* data_path_;
  ::std::string* update_pak_;
  ::std::string* efficiency_file_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_client_5fconfig_2eproto();
  friend void protobuf_AssignDesc_client_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_client_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static Path* default_instance_;
};
// -------------------------------------------------------------------

class Report : public ::google::protobuf::Message {
 public:
  Report();
  virtual ~Report();
  
  Report(const Report& from);
  
  inline Report& operator=(const Report& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Report& default_instance();
  
  void Swap(Report* other);
  
  // implements Message ----------------------------------------------
  
  Report* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Report& from);
  void MergeFrom(const Report& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string UseName = 1;
  inline bool has_usename() const;
  inline void clear_usename();
  static const int kUseNameFieldNumber = 1;
  inline const ::std::string& usename() const;
  inline void set_usename(const ::std::string& value);
  inline void set_usename(const char* value);
  inline void set_usename(const char* value, size_t size);
  inline ::std::string* mutable_usename();
  inline ::std::string* release_usename();
  
  // required string PassWord = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPassWordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // required string EmailAddr = 3;
  inline bool has_emailaddr() const;
  inline void clear_emailaddr();
  static const int kEmailAddrFieldNumber = 3;
  inline const ::std::string& emailaddr() const;
  inline void set_emailaddr(const ::std::string& value);
  inline void set_emailaddr(const char* value);
  inline void set_emailaddr(const char* value, size_t size);
  inline ::std::string* mutable_emailaddr();
  inline ::std::string* release_emailaddr();
  
  // required string Reciver = 4;
  inline bool has_reciver() const;
  inline void clear_reciver();
  static const int kReciverFieldNumber = 4;
  inline const ::std::string& reciver() const;
  inline void set_reciver(const ::std::string& value);
  inline void set_reciver(const char* value);
  inline void set_reciver(const char* value, size_t size);
  inline ::std::string* mutable_reciver();
  inline ::std::string* release_reciver();
  
  // required string SMTP = 5;
  inline bool has_smtp() const;
  inline void clear_smtp();
  static const int kSMTPFieldNumber = 5;
  inline const ::std::string& smtp() const;
  inline void set_smtp(const ::std::string& value);
  inline void set_smtp(const char* value);
  inline void set_smtp(const char* value, size_t size);
  inline ::std::string* mutable_smtp();
  inline ::std::string* release_smtp();
  
  // @@protoc_insertion_point(class_scope:client_config.Report)
 private:
  inline void set_has_usename();
  inline void clear_has_usename();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_emailaddr();
  inline void clear_has_emailaddr();
  inline void set_has_reciver();
  inline void clear_has_reciver();
  inline void set_has_smtp();
  inline void clear_has_smtp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* usename_;
  ::std::string* password_;
  ::std::string* emailaddr_;
  ::std::string* reciver_;
  ::std::string* smtp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_client_5fconfig_2eproto();
  friend void protobuf_AssignDesc_client_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_client_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static Report* default_instance_;
};
// -------------------------------------------------------------------

class SocketIO : public ::google::protobuf::Message {
 public:
  SocketIO();
  virtual ~SocketIO();
  
  SocketIO(const SocketIO& from);
  
  inline SocketIO& operator=(const SocketIO& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SocketIO& default_instance();
  
  void Swap(SocketIO* other);
  
  // implements Message ----------------------------------------------
  
  SocketIO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SocketIO& from);
  void MergeFrom(const SocketIO& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 recv_buf_len = 1;
  inline bool has_recv_buf_len() const;
  inline void clear_recv_buf_len();
  static const int kRecvBufLenFieldNumber = 1;
  inline ::google::protobuf::uint32 recv_buf_len() const;
  inline void set_recv_buf_len(::google::protobuf::uint32 value);
  
  // required uint32 send_pool = 2;
  inline bool has_send_pool() const;
  inline void clear_send_pool();
  static const int kSendPoolFieldNumber = 2;
  inline ::google::protobuf::uint32 send_pool() const;
  inline void set_send_pool(::google::protobuf::uint32 value);
  
  // required uint32 send_buf_len = 3;
  inline bool has_send_buf_len() const;
  inline void clear_send_buf_len();
  static const int kSendBufLenFieldNumber = 3;
  inline ::google::protobuf::uint32 send_buf_len() const;
  inline void set_send_buf_len(::google::protobuf::uint32 value);
  
  // required string packet_begin = 4;
  inline bool has_packet_begin() const;
  inline void clear_packet_begin();
  static const int kPacketBeginFieldNumber = 4;
  inline const ::std::string& packet_begin() const;
  inline void set_packet_begin(const ::std::string& value);
  inline void set_packet_begin(const char* value);
  inline void set_packet_begin(const char* value, size_t size);
  inline ::std::string* mutable_packet_begin();
  inline ::std::string* release_packet_begin();
  
  // required string packet_end = 5;
  inline bool has_packet_end() const;
  inline void clear_packet_end();
  static const int kPacketEndFieldNumber = 5;
  inline const ::std::string& packet_end() const;
  inline void set_packet_end(const ::std::string& value);
  inline void set_packet_end(const char* value);
  inline void set_packet_end(const char* value, size_t size);
  inline ::std::string* mutable_packet_end();
  inline ::std::string* release_packet_end();
  
  // required bool packet_flag = 6;
  inline bool has_packet_flag() const;
  inline void clear_packet_flag();
  static const int kPacketFlagFieldNumber = 6;
  inline bool packet_flag() const;
  inline void set_packet_flag(bool value);
  
  // required uint32 discard_threshold = 7;
  inline bool has_discard_threshold() const;
  inline void clear_discard_threshold();
  static const int kDiscardThresholdFieldNumber = 7;
  inline ::google::protobuf::uint32 discard_threshold() const;
  inline void set_discard_threshold(::google::protobuf::uint32 value);
  
  // required uint32 pend_limit = 8;
  inline bool has_pend_limit() const;
  inline void clear_pend_limit();
  static const int kPendLimitFieldNumber = 8;
  inline ::google::protobuf::uint32 pend_limit() const;
  inline void set_pend_limit(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:client_config.SocketIO)
 private:
  inline void set_has_recv_buf_len();
  inline void clear_has_recv_buf_len();
  inline void set_has_send_pool();
  inline void clear_has_send_pool();
  inline void set_has_send_buf_len();
  inline void clear_has_send_buf_len();
  inline void set_has_packet_begin();
  inline void clear_has_packet_begin();
  inline void set_has_packet_end();
  inline void clear_has_packet_end();
  inline void set_has_packet_flag();
  inline void clear_has_packet_flag();
  inline void set_has_discard_threshold();
  inline void clear_has_discard_threshold();
  inline void set_has_pend_limit();
  inline void clear_has_pend_limit();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 recv_buf_len_;
  ::google::protobuf::uint32 send_pool_;
  ::std::string* packet_begin_;
  ::google::protobuf::uint32 send_buf_len_;
  bool packet_flag_;
  ::std::string* packet_end_;
  ::google::protobuf::uint32 discard_threshold_;
  ::google::protobuf::uint32 pend_limit_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_client_5fconfig_2eproto();
  friend void protobuf_AssignDesc_client_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_client_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static SocketIO* default_instance_;
};
// -------------------------------------------------------------------

class GameProto : public ::google::protobuf::Message {
 public:
  GameProto();
  virtual ~GameProto();
  
  GameProto(const GameProto& from);
  
  inline GameProto& operator=(const GameProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameProto& default_instance();
  
  void Swap(GameProto* other);
  
  // implements Message ----------------------------------------------
  
  GameProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameProto& from);
  void MergeFrom(const GameProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string desc_file = 1;
  inline bool has_desc_file() const;
  inline void clear_desc_file();
  static const int kDescFileFieldNumber = 1;
  inline const ::std::string& desc_file() const;
  inline void set_desc_file(const ::std::string& value);
  inline void set_desc_file(const char* value);
  inline void set_desc_file(const char* value, size_t size);
  inline ::std::string* mutable_desc_file();
  inline ::std::string* release_desc_file();
  
  // required string data_file = 2;
  inline bool has_data_file() const;
  inline void clear_data_file();
  static const int kDataFileFieldNumber = 2;
  inline const ::std::string& data_file() const;
  inline void set_data_file(const ::std::string& value);
  inline void set_data_file(const char* value);
  inline void set_data_file(const char* value, size_t size);
  inline ::std::string* mutable_data_file();
  inline ::std::string* release_data_file();
  
  // @@protoc_insertion_point(class_scope:client_config.GameProto)
 private:
  inline void set_has_desc_file();
  inline void clear_has_desc_file();
  inline void set_has_data_file();
  inline void clear_has_data_file();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* desc_file_;
  ::std::string* data_file_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_client_5fconfig_2eproto();
  friend void protobuf_AssignDesc_client_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_client_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static GameProto* default_instance_;
};
// -------------------------------------------------------------------

class client : public ::google::protobuf::Message {
 public:
  client();
  virtual ~client();
  
  client(const client& from);
  
  inline client& operator=(const client& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const client& default_instance();
  
  void Swap(client* other);
  
  // implements Message ----------------------------------------------
  
  client* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const client& from);
  void MergeFrom(const client& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 clients = 1;
  inline bool has_clients() const;
  inline void clear_clients();
  static const int kClientsFieldNumber = 1;
  inline ::google::protobuf::uint32 clients() const;
  inline void set_clients(::google::protobuf::uint32 value);
  
  // required string bind_dll = 2;
  inline bool has_bind_dll() const;
  inline void clear_bind_dll();
  static const int kBindDllFieldNumber = 2;
  inline const ::std::string& bind_dll() const;
  inline void set_bind_dll(const ::std::string& value);
  inline void set_bind_dll(const char* value);
  inline void set_bind_dll(const char* value, size_t size);
  inline ::std::string* mutable_bind_dll();
  inline ::std::string* release_bind_dll();
  
  // required uint32 beats = 3;
  inline bool has_beats() const;
  inline void clear_beats();
  static const int kBeatsFieldNumber = 3;
  inline ::google::protobuf::uint32 beats() const;
  inline void set_beats(::google::protobuf::uint32 value);
  
  // required .client_config.Path path = 4;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 4;
  inline const ::client_config::Path& path() const;
  inline ::client_config::Path* mutable_path();
  inline ::client_config::Path* release_path();
  
  // required .client_config.Report report = 5;
  inline bool has_report() const;
  inline void clear_report();
  static const int kReportFieldNumber = 5;
  inline const ::client_config::Report& report() const;
  inline ::client_config::Report* mutable_report();
  inline ::client_config::Report* release_report();
  
  // required .client_config.SocketIO socket_io = 6;
  inline bool has_socket_io() const;
  inline void clear_socket_io();
  static const int kSocketIoFieldNumber = 6;
  inline const ::client_config::SocketIO& socket_io() const;
  inline ::client_config::SocketIO* mutable_socket_io();
  inline ::client_config::SocketIO* release_socket_io();
  
  // required .client_config.GameProto proto = 7;
  inline bool has_proto() const;
  inline void clear_proto();
  static const int kProtoFieldNumber = 7;
  inline const ::client_config::GameProto& proto() const;
  inline ::client_config::GameProto* mutable_proto();
  inline ::client_config::GameProto* release_proto();
  
  // @@protoc_insertion_point(class_scope:client_config.client)
 private:
  inline void set_has_clients();
  inline void clear_has_clients();
  inline void set_has_bind_dll();
  inline void clear_has_bind_dll();
  inline void set_has_beats();
  inline void clear_has_beats();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_report();
  inline void clear_has_report();
  inline void set_has_socket_io();
  inline void clear_has_socket_io();
  inline void set_has_proto();
  inline void clear_has_proto();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* bind_dll_;
  ::google::protobuf::uint32 clients_;
  ::google::protobuf::uint32 beats_;
  ::client_config::Path* path_;
  ::client_config::Report* report_;
  ::client_config::SocketIO* socket_io_;
  ::client_config::GameProto* proto_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_client_5fconfig_2eproto();
  friend void protobuf_AssignDesc_client_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_client_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static client* default_instance_;
};
// ===================================================================


// ===================================================================

// Path

// required string log_file = 1;
inline bool Path::has_log_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Path::set_has_log_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Path::clear_has_log_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Path::clear_log_file() {
  if (log_file_ != &::google::protobuf::internal::kEmptyString) {
    log_file_->clear();
  }
  clear_has_log_file();
}
inline const ::std::string& Path::log_file() const {
  return *log_file_;
}
inline void Path::set_log_file(const ::std::string& value) {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::kEmptyString) {
    log_file_ = new ::std::string;
  }
  log_file_->assign(value);
}
inline void Path::set_log_file(const char* value) {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::kEmptyString) {
    log_file_ = new ::std::string;
  }
  log_file_->assign(value);
}
inline void Path::set_log_file(const char* value, size_t size) {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::kEmptyString) {
    log_file_ = new ::std::string;
  }
  log_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Path::mutable_log_file() {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::kEmptyString) {
    log_file_ = new ::std::string;
  }
  return log_file_;
}
inline ::std::string* Path::release_log_file() {
  clear_has_log_file();
  if (log_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_file_;
    log_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string data_path = 2;
inline bool Path::has_data_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Path::set_has_data_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Path::clear_has_data_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Path::clear_data_path() {
  if (data_path_ != &::google::protobuf::internal::kEmptyString) {
    data_path_->clear();
  }
  clear_has_data_path();
}
inline const ::std::string& Path::data_path() const {
  return *data_path_;
}
inline void Path::set_data_path(const ::std::string& value) {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::kEmptyString) {
    data_path_ = new ::std::string;
  }
  data_path_->assign(value);
}
inline void Path::set_data_path(const char* value) {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::kEmptyString) {
    data_path_ = new ::std::string;
  }
  data_path_->assign(value);
}
inline void Path::set_data_path(const char* value, size_t size) {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::kEmptyString) {
    data_path_ = new ::std::string;
  }
  data_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Path::mutable_data_path() {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::kEmptyString) {
    data_path_ = new ::std::string;
  }
  return data_path_;
}
inline ::std::string* Path::release_data_path() {
  clear_has_data_path();
  if (data_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_path_;
    data_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string update_pak = 3;
inline bool Path::has_update_pak() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Path::set_has_update_pak() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Path::clear_has_update_pak() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Path::clear_update_pak() {
  if (update_pak_ != &::google::protobuf::internal::kEmptyString) {
    update_pak_->clear();
  }
  clear_has_update_pak();
}
inline const ::std::string& Path::update_pak() const {
  return *update_pak_;
}
inline void Path::set_update_pak(const ::std::string& value) {
  set_has_update_pak();
  if (update_pak_ == &::google::protobuf::internal::kEmptyString) {
    update_pak_ = new ::std::string;
  }
  update_pak_->assign(value);
}
inline void Path::set_update_pak(const char* value) {
  set_has_update_pak();
  if (update_pak_ == &::google::protobuf::internal::kEmptyString) {
    update_pak_ = new ::std::string;
  }
  update_pak_->assign(value);
}
inline void Path::set_update_pak(const char* value, size_t size) {
  set_has_update_pak();
  if (update_pak_ == &::google::protobuf::internal::kEmptyString) {
    update_pak_ = new ::std::string;
  }
  update_pak_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Path::mutable_update_pak() {
  set_has_update_pak();
  if (update_pak_ == &::google::protobuf::internal::kEmptyString) {
    update_pak_ = new ::std::string;
  }
  return update_pak_;
}
inline ::std::string* Path::release_update_pak() {
  clear_has_update_pak();
  if (update_pak_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = update_pak_;
    update_pak_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string efficiency_file = 4;
inline bool Path::has_efficiency_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Path::set_has_efficiency_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Path::clear_has_efficiency_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Path::clear_efficiency_file() {
  if (efficiency_file_ != &::google::protobuf::internal::kEmptyString) {
    efficiency_file_->clear();
  }
  clear_has_efficiency_file();
}
inline const ::std::string& Path::efficiency_file() const {
  return *efficiency_file_;
}
inline void Path::set_efficiency_file(const ::std::string& value) {
  set_has_efficiency_file();
  if (efficiency_file_ == &::google::protobuf::internal::kEmptyString) {
    efficiency_file_ = new ::std::string;
  }
  efficiency_file_->assign(value);
}
inline void Path::set_efficiency_file(const char* value) {
  set_has_efficiency_file();
  if (efficiency_file_ == &::google::protobuf::internal::kEmptyString) {
    efficiency_file_ = new ::std::string;
  }
  efficiency_file_->assign(value);
}
inline void Path::set_efficiency_file(const char* value, size_t size) {
  set_has_efficiency_file();
  if (efficiency_file_ == &::google::protobuf::internal::kEmptyString) {
    efficiency_file_ = new ::std::string;
  }
  efficiency_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Path::mutable_efficiency_file() {
  set_has_efficiency_file();
  if (efficiency_file_ == &::google::protobuf::internal::kEmptyString) {
    efficiency_file_ = new ::std::string;
  }
  return efficiency_file_;
}
inline ::std::string* Path::release_efficiency_file() {
  clear_has_efficiency_file();
  if (efficiency_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = efficiency_file_;
    efficiency_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Report

// required string UseName = 1;
inline bool Report::has_usename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Report::set_has_usename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Report::clear_has_usename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Report::clear_usename() {
  if (usename_ != &::google::protobuf::internal::kEmptyString) {
    usename_->clear();
  }
  clear_has_usename();
}
inline const ::std::string& Report::usename() const {
  return *usename_;
}
inline void Report::set_usename(const ::std::string& value) {
  set_has_usename();
  if (usename_ == &::google::protobuf::internal::kEmptyString) {
    usename_ = new ::std::string;
  }
  usename_->assign(value);
}
inline void Report::set_usename(const char* value) {
  set_has_usename();
  if (usename_ == &::google::protobuf::internal::kEmptyString) {
    usename_ = new ::std::string;
  }
  usename_->assign(value);
}
inline void Report::set_usename(const char* value, size_t size) {
  set_has_usename();
  if (usename_ == &::google::protobuf::internal::kEmptyString) {
    usename_ = new ::std::string;
  }
  usename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Report::mutable_usename() {
  set_has_usename();
  if (usename_ == &::google::protobuf::internal::kEmptyString) {
    usename_ = new ::std::string;
  }
  return usename_;
}
inline ::std::string* Report::release_usename() {
  clear_has_usename();
  if (usename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = usename_;
    usename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string PassWord = 2;
inline bool Report::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Report::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Report::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Report::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Report::password() const {
  return *password_;
}
inline void Report::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Report::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Report::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Report::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Report::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string EmailAddr = 3;
inline bool Report::has_emailaddr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Report::set_has_emailaddr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Report::clear_has_emailaddr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Report::clear_emailaddr() {
  if (emailaddr_ != &::google::protobuf::internal::kEmptyString) {
    emailaddr_->clear();
  }
  clear_has_emailaddr();
}
inline const ::std::string& Report::emailaddr() const {
  return *emailaddr_;
}
inline void Report::set_emailaddr(const ::std::string& value) {
  set_has_emailaddr();
  if (emailaddr_ == &::google::protobuf::internal::kEmptyString) {
    emailaddr_ = new ::std::string;
  }
  emailaddr_->assign(value);
}
inline void Report::set_emailaddr(const char* value) {
  set_has_emailaddr();
  if (emailaddr_ == &::google::protobuf::internal::kEmptyString) {
    emailaddr_ = new ::std::string;
  }
  emailaddr_->assign(value);
}
inline void Report::set_emailaddr(const char* value, size_t size) {
  set_has_emailaddr();
  if (emailaddr_ == &::google::protobuf::internal::kEmptyString) {
    emailaddr_ = new ::std::string;
  }
  emailaddr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Report::mutable_emailaddr() {
  set_has_emailaddr();
  if (emailaddr_ == &::google::protobuf::internal::kEmptyString) {
    emailaddr_ = new ::std::string;
  }
  return emailaddr_;
}
inline ::std::string* Report::release_emailaddr() {
  clear_has_emailaddr();
  if (emailaddr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = emailaddr_;
    emailaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string Reciver = 4;
inline bool Report::has_reciver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Report::set_has_reciver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Report::clear_has_reciver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Report::clear_reciver() {
  if (reciver_ != &::google::protobuf::internal::kEmptyString) {
    reciver_->clear();
  }
  clear_has_reciver();
}
inline const ::std::string& Report::reciver() const {
  return *reciver_;
}
inline void Report::set_reciver(const ::std::string& value) {
  set_has_reciver();
  if (reciver_ == &::google::protobuf::internal::kEmptyString) {
    reciver_ = new ::std::string;
  }
  reciver_->assign(value);
}
inline void Report::set_reciver(const char* value) {
  set_has_reciver();
  if (reciver_ == &::google::protobuf::internal::kEmptyString) {
    reciver_ = new ::std::string;
  }
  reciver_->assign(value);
}
inline void Report::set_reciver(const char* value, size_t size) {
  set_has_reciver();
  if (reciver_ == &::google::protobuf::internal::kEmptyString) {
    reciver_ = new ::std::string;
  }
  reciver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Report::mutable_reciver() {
  set_has_reciver();
  if (reciver_ == &::google::protobuf::internal::kEmptyString) {
    reciver_ = new ::std::string;
  }
  return reciver_;
}
inline ::std::string* Report::release_reciver() {
  clear_has_reciver();
  if (reciver_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reciver_;
    reciver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string SMTP = 5;
inline bool Report::has_smtp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Report::set_has_smtp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Report::clear_has_smtp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Report::clear_smtp() {
  if (smtp_ != &::google::protobuf::internal::kEmptyString) {
    smtp_->clear();
  }
  clear_has_smtp();
}
inline const ::std::string& Report::smtp() const {
  return *smtp_;
}
inline void Report::set_smtp(const ::std::string& value) {
  set_has_smtp();
  if (smtp_ == &::google::protobuf::internal::kEmptyString) {
    smtp_ = new ::std::string;
  }
  smtp_->assign(value);
}
inline void Report::set_smtp(const char* value) {
  set_has_smtp();
  if (smtp_ == &::google::protobuf::internal::kEmptyString) {
    smtp_ = new ::std::string;
  }
  smtp_->assign(value);
}
inline void Report::set_smtp(const char* value, size_t size) {
  set_has_smtp();
  if (smtp_ == &::google::protobuf::internal::kEmptyString) {
    smtp_ = new ::std::string;
  }
  smtp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Report::mutable_smtp() {
  set_has_smtp();
  if (smtp_ == &::google::protobuf::internal::kEmptyString) {
    smtp_ = new ::std::string;
  }
  return smtp_;
}
inline ::std::string* Report::release_smtp() {
  clear_has_smtp();
  if (smtp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = smtp_;
    smtp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SocketIO

// required uint32 recv_buf_len = 1;
inline bool SocketIO::has_recv_buf_len() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SocketIO::set_has_recv_buf_len() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SocketIO::clear_has_recv_buf_len() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SocketIO::clear_recv_buf_len() {
  recv_buf_len_ = 0u;
  clear_has_recv_buf_len();
}
inline ::google::protobuf::uint32 SocketIO::recv_buf_len() const {
  return recv_buf_len_;
}
inline void SocketIO::set_recv_buf_len(::google::protobuf::uint32 value) {
  set_has_recv_buf_len();
  recv_buf_len_ = value;
}

// required uint32 send_pool = 2;
inline bool SocketIO::has_send_pool() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SocketIO::set_has_send_pool() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SocketIO::clear_has_send_pool() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SocketIO::clear_send_pool() {
  send_pool_ = 0u;
  clear_has_send_pool();
}
inline ::google::protobuf::uint32 SocketIO::send_pool() const {
  return send_pool_;
}
inline void SocketIO::set_send_pool(::google::protobuf::uint32 value) {
  set_has_send_pool();
  send_pool_ = value;
}

// required uint32 send_buf_len = 3;
inline bool SocketIO::has_send_buf_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SocketIO::set_has_send_buf_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SocketIO::clear_has_send_buf_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SocketIO::clear_send_buf_len() {
  send_buf_len_ = 0u;
  clear_has_send_buf_len();
}
inline ::google::protobuf::uint32 SocketIO::send_buf_len() const {
  return send_buf_len_;
}
inline void SocketIO::set_send_buf_len(::google::protobuf::uint32 value) {
  set_has_send_buf_len();
  send_buf_len_ = value;
}

// required string packet_begin = 4;
inline bool SocketIO::has_packet_begin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SocketIO::set_has_packet_begin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SocketIO::clear_has_packet_begin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SocketIO::clear_packet_begin() {
  if (packet_begin_ != &::google::protobuf::internal::kEmptyString) {
    packet_begin_->clear();
  }
  clear_has_packet_begin();
}
inline const ::std::string& SocketIO::packet_begin() const {
  return *packet_begin_;
}
inline void SocketIO::set_packet_begin(const ::std::string& value) {
  set_has_packet_begin();
  if (packet_begin_ == &::google::protobuf::internal::kEmptyString) {
    packet_begin_ = new ::std::string;
  }
  packet_begin_->assign(value);
}
inline void SocketIO::set_packet_begin(const char* value) {
  set_has_packet_begin();
  if (packet_begin_ == &::google::protobuf::internal::kEmptyString) {
    packet_begin_ = new ::std::string;
  }
  packet_begin_->assign(value);
}
inline void SocketIO::set_packet_begin(const char* value, size_t size) {
  set_has_packet_begin();
  if (packet_begin_ == &::google::protobuf::internal::kEmptyString) {
    packet_begin_ = new ::std::string;
  }
  packet_begin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SocketIO::mutable_packet_begin() {
  set_has_packet_begin();
  if (packet_begin_ == &::google::protobuf::internal::kEmptyString) {
    packet_begin_ = new ::std::string;
  }
  return packet_begin_;
}
inline ::std::string* SocketIO::release_packet_begin() {
  clear_has_packet_begin();
  if (packet_begin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packet_begin_;
    packet_begin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string packet_end = 5;
inline bool SocketIO::has_packet_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SocketIO::set_has_packet_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SocketIO::clear_has_packet_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SocketIO::clear_packet_end() {
  if (packet_end_ != &::google::protobuf::internal::kEmptyString) {
    packet_end_->clear();
  }
  clear_has_packet_end();
}
inline const ::std::string& SocketIO::packet_end() const {
  return *packet_end_;
}
inline void SocketIO::set_packet_end(const ::std::string& value) {
  set_has_packet_end();
  if (packet_end_ == &::google::protobuf::internal::kEmptyString) {
    packet_end_ = new ::std::string;
  }
  packet_end_->assign(value);
}
inline void SocketIO::set_packet_end(const char* value) {
  set_has_packet_end();
  if (packet_end_ == &::google::protobuf::internal::kEmptyString) {
    packet_end_ = new ::std::string;
  }
  packet_end_->assign(value);
}
inline void SocketIO::set_packet_end(const char* value, size_t size) {
  set_has_packet_end();
  if (packet_end_ == &::google::protobuf::internal::kEmptyString) {
    packet_end_ = new ::std::string;
  }
  packet_end_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SocketIO::mutable_packet_end() {
  set_has_packet_end();
  if (packet_end_ == &::google::protobuf::internal::kEmptyString) {
    packet_end_ = new ::std::string;
  }
  return packet_end_;
}
inline ::std::string* SocketIO::release_packet_end() {
  clear_has_packet_end();
  if (packet_end_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packet_end_;
    packet_end_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool packet_flag = 6;
inline bool SocketIO::has_packet_flag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SocketIO::set_has_packet_flag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SocketIO::clear_has_packet_flag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SocketIO::clear_packet_flag() {
  packet_flag_ = false;
  clear_has_packet_flag();
}
inline bool SocketIO::packet_flag() const {
  return packet_flag_;
}
inline void SocketIO::set_packet_flag(bool value) {
  set_has_packet_flag();
  packet_flag_ = value;
}

// required uint32 discard_threshold = 7;
inline bool SocketIO::has_discard_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SocketIO::set_has_discard_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SocketIO::clear_has_discard_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SocketIO::clear_discard_threshold() {
  discard_threshold_ = 0u;
  clear_has_discard_threshold();
}
inline ::google::protobuf::uint32 SocketIO::discard_threshold() const {
  return discard_threshold_;
}
inline void SocketIO::set_discard_threshold(::google::protobuf::uint32 value) {
  set_has_discard_threshold();
  discard_threshold_ = value;
}

// required uint32 pend_limit = 8;
inline bool SocketIO::has_pend_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SocketIO::set_has_pend_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SocketIO::clear_has_pend_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SocketIO::clear_pend_limit() {
  pend_limit_ = 0u;
  clear_has_pend_limit();
}
inline ::google::protobuf::uint32 SocketIO::pend_limit() const {
  return pend_limit_;
}
inline void SocketIO::set_pend_limit(::google::protobuf::uint32 value) {
  set_has_pend_limit();
  pend_limit_ = value;
}

// -------------------------------------------------------------------

// GameProto

// required string desc_file = 1;
inline bool GameProto::has_desc_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameProto::set_has_desc_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameProto::clear_has_desc_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameProto::clear_desc_file() {
  if (desc_file_ != &::google::protobuf::internal::kEmptyString) {
    desc_file_->clear();
  }
  clear_has_desc_file();
}
inline const ::std::string& GameProto::desc_file() const {
  return *desc_file_;
}
inline void GameProto::set_desc_file(const ::std::string& value) {
  set_has_desc_file();
  if (desc_file_ == &::google::protobuf::internal::kEmptyString) {
    desc_file_ = new ::std::string;
  }
  desc_file_->assign(value);
}
inline void GameProto::set_desc_file(const char* value) {
  set_has_desc_file();
  if (desc_file_ == &::google::protobuf::internal::kEmptyString) {
    desc_file_ = new ::std::string;
  }
  desc_file_->assign(value);
}
inline void GameProto::set_desc_file(const char* value, size_t size) {
  set_has_desc_file();
  if (desc_file_ == &::google::protobuf::internal::kEmptyString) {
    desc_file_ = new ::std::string;
  }
  desc_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameProto::mutable_desc_file() {
  set_has_desc_file();
  if (desc_file_ == &::google::protobuf::internal::kEmptyString) {
    desc_file_ = new ::std::string;
  }
  return desc_file_;
}
inline ::std::string* GameProto::release_desc_file() {
  clear_has_desc_file();
  if (desc_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_file_;
    desc_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string data_file = 2;
inline bool GameProto::has_data_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameProto::set_has_data_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameProto::clear_has_data_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameProto::clear_data_file() {
  if (data_file_ != &::google::protobuf::internal::kEmptyString) {
    data_file_->clear();
  }
  clear_has_data_file();
}
inline const ::std::string& GameProto::data_file() const {
  return *data_file_;
}
inline void GameProto::set_data_file(const ::std::string& value) {
  set_has_data_file();
  if (data_file_ == &::google::protobuf::internal::kEmptyString) {
    data_file_ = new ::std::string;
  }
  data_file_->assign(value);
}
inline void GameProto::set_data_file(const char* value) {
  set_has_data_file();
  if (data_file_ == &::google::protobuf::internal::kEmptyString) {
    data_file_ = new ::std::string;
  }
  data_file_->assign(value);
}
inline void GameProto::set_data_file(const char* value, size_t size) {
  set_has_data_file();
  if (data_file_ == &::google::protobuf::internal::kEmptyString) {
    data_file_ = new ::std::string;
  }
  data_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameProto::mutable_data_file() {
  set_has_data_file();
  if (data_file_ == &::google::protobuf::internal::kEmptyString) {
    data_file_ = new ::std::string;
  }
  return data_file_;
}
inline ::std::string* GameProto::release_data_file() {
  clear_has_data_file();
  if (data_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_file_;
    data_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// client

// optional uint32 clients = 1;
inline bool client::has_clients() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void client::set_has_clients() {
  _has_bits_[0] |= 0x00000001u;
}
inline void client::clear_has_clients() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void client::clear_clients() {
  clients_ = 0u;
  clear_has_clients();
}
inline ::google::protobuf::uint32 client::clients() const {
  return clients_;
}
inline void client::set_clients(::google::protobuf::uint32 value) {
  set_has_clients();
  clients_ = value;
}

// required string bind_dll = 2;
inline bool client::has_bind_dll() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void client::set_has_bind_dll() {
  _has_bits_[0] |= 0x00000002u;
}
inline void client::clear_has_bind_dll() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void client::clear_bind_dll() {
  if (bind_dll_ != &::google::protobuf::internal::kEmptyString) {
    bind_dll_->clear();
  }
  clear_has_bind_dll();
}
inline const ::std::string& client::bind_dll() const {
  return *bind_dll_;
}
inline void client::set_bind_dll(const ::std::string& value) {
  set_has_bind_dll();
  if (bind_dll_ == &::google::protobuf::internal::kEmptyString) {
    bind_dll_ = new ::std::string;
  }
  bind_dll_->assign(value);
}
inline void client::set_bind_dll(const char* value) {
  set_has_bind_dll();
  if (bind_dll_ == &::google::protobuf::internal::kEmptyString) {
    bind_dll_ = new ::std::string;
  }
  bind_dll_->assign(value);
}
inline void client::set_bind_dll(const char* value, size_t size) {
  set_has_bind_dll();
  if (bind_dll_ == &::google::protobuf::internal::kEmptyString) {
    bind_dll_ = new ::std::string;
  }
  bind_dll_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* client::mutable_bind_dll() {
  set_has_bind_dll();
  if (bind_dll_ == &::google::protobuf::internal::kEmptyString) {
    bind_dll_ = new ::std::string;
  }
  return bind_dll_;
}
inline ::std::string* client::release_bind_dll() {
  clear_has_bind_dll();
  if (bind_dll_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bind_dll_;
    bind_dll_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 beats = 3;
inline bool client::has_beats() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void client::set_has_beats() {
  _has_bits_[0] |= 0x00000004u;
}
inline void client::clear_has_beats() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void client::clear_beats() {
  beats_ = 0u;
  clear_has_beats();
}
inline ::google::protobuf::uint32 client::beats() const {
  return beats_;
}
inline void client::set_beats(::google::protobuf::uint32 value) {
  set_has_beats();
  beats_ = value;
}

// required .client_config.Path path = 4;
inline bool client::has_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void client::set_has_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void client::clear_has_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void client::clear_path() {
  if (path_ != NULL) path_->::client_config::Path::Clear();
  clear_has_path();
}
inline const ::client_config::Path& client::path() const {
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
inline ::client_config::Path* client::mutable_path() {
  set_has_path();
  if (path_ == NULL) path_ = new ::client_config::Path;
  return path_;
}
inline ::client_config::Path* client::release_path() {
  clear_has_path();
  ::client_config::Path* temp = path_;
  path_ = NULL;
  return temp;
}

// required .client_config.Report report = 5;
inline bool client::has_report() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void client::set_has_report() {
  _has_bits_[0] |= 0x00000010u;
}
inline void client::clear_has_report() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void client::clear_report() {
  if (report_ != NULL) report_->::client_config::Report::Clear();
  clear_has_report();
}
inline const ::client_config::Report& client::report() const {
  return report_ != NULL ? *report_ : *default_instance_->report_;
}
inline ::client_config::Report* client::mutable_report() {
  set_has_report();
  if (report_ == NULL) report_ = new ::client_config::Report;
  return report_;
}
inline ::client_config::Report* client::release_report() {
  clear_has_report();
  ::client_config::Report* temp = report_;
  report_ = NULL;
  return temp;
}

// required .client_config.SocketIO socket_io = 6;
inline bool client::has_socket_io() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void client::set_has_socket_io() {
  _has_bits_[0] |= 0x00000020u;
}
inline void client::clear_has_socket_io() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void client::clear_socket_io() {
  if (socket_io_ != NULL) socket_io_->::client_config::SocketIO::Clear();
  clear_has_socket_io();
}
inline const ::client_config::SocketIO& client::socket_io() const {
  return socket_io_ != NULL ? *socket_io_ : *default_instance_->socket_io_;
}
inline ::client_config::SocketIO* client::mutable_socket_io() {
  set_has_socket_io();
  if (socket_io_ == NULL) socket_io_ = new ::client_config::SocketIO;
  return socket_io_;
}
inline ::client_config::SocketIO* client::release_socket_io() {
  clear_has_socket_io();
  ::client_config::SocketIO* temp = socket_io_;
  socket_io_ = NULL;
  return temp;
}

// required .client_config.GameProto proto = 7;
inline bool client::has_proto() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void client::set_has_proto() {
  _has_bits_[0] |= 0x00000040u;
}
inline void client::clear_has_proto() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void client::clear_proto() {
  if (proto_ != NULL) proto_->::client_config::GameProto::Clear();
  clear_has_proto();
}
inline const ::client_config::GameProto& client::proto() const {
  return proto_ != NULL ? *proto_ : *default_instance_->proto_;
}
inline ::client_config::GameProto* client::mutable_proto() {
  set_has_proto();
  if (proto_ == NULL) proto_ = new ::client_config::GameProto;
  return proto_;
}
inline ::client_config::GameProto* client::release_proto() {
  clear_has_proto();
  ::client_config::GameProto* temp = proto_;
  proto_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client_config

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_client_5fconfig_2eproto__INCLUDED
