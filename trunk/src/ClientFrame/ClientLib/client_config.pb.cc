// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace client_config {

namespace {

const ::google::protobuf::Descriptor* Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* Report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Report_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocketIO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocketIO_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_5fconfig_2eproto() {
  protobuf_AddDesc_client_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client_config.proto");
  GOOGLE_CHECK(file != NULL);
  Path_descriptor_ = file->message_type(0);
  static const int Path_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, log_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, data_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, update_pak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, efficiency_file_),
  };
  Path_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Path_descriptor_,
      Path::default_instance_,
      Path_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Path));
  Report_descriptor_ = file->message_type(1);
  static const int Report_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, usename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, emailaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, reciver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, smtp_),
  };
  Report_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Report_descriptor_,
      Report::default_instance_,
      Report_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Report));
  SocketIO_descriptor_ = file->message_type(2);
  static const int SocketIO_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, recv_buf_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, send_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, send_buf_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, packet_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, packet_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, packet_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, discard_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, pend_limit_),
  };
  SocketIO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocketIO_descriptor_,
      SocketIO::default_instance_,
      SocketIO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocketIO));
  GameProto_descriptor_ = file->message_type(3);
  static const int GameProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProto, desc_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProto, data_file_),
  };
  GameProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameProto_descriptor_,
      GameProto::default_instance_,
      GameProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameProto));
  client_descriptor_ = file->message_type(4);
  static const int client_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client, clients_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client, bind_dll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client, beats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client, report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client, socket_io_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client, proto_),
  };
  client_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_descriptor_,
      client::default_instance_,
      client_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Path_descriptor_, &Path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Report_descriptor_, &Report::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocketIO_descriptor_, &SocketIO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameProto_descriptor_, &GameProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_descriptor_, &client::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_5fconfig_2eproto() {
  delete Path::default_instance_;
  delete Path_reflection_;
  delete Report::default_instance_;
  delete Report_reflection_;
  delete SocketIO::default_instance_;
  delete SocketIO_reflection_;
  delete GameProto::default_instance_;
  delete GameProto_reflection_;
  delete client::default_instance_;
  delete client_reflection_;
}

void protobuf_AddDesc_client_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023client_config.proto\022\rclient_config\"X\n\004"
    "Path\022\020\n\010log_file\030\001 \002(\t\022\021\n\tdata_path\030\002 \002("
    "\t\022\022\n\nupdate_pak\030\003 \002(\t\022\027\n\017efficiency_file"
    "\030\004 \002(\t\"]\n\006Report\022\017\n\007UseName\030\001 \002(\t\022\020\n\010Pas"
    "sWord\030\002 \002(\t\022\021\n\tEmailAddr\030\003 \002(\t\022\017\n\007Recive"
    "r\030\004 \002(\t\022\014\n\004SMTP\030\005 \002(\t\"\267\001\n\010SocketIO\022\024\n\014re"
    "cv_buf_len\030\001 \002(\r\022\021\n\tsend_pool\030\002 \002(\r\022\024\n\014s"
    "end_buf_len\030\003 \002(\r\022\024\n\014packet_begin\030\004 \002(\t\022"
    "\022\n\npacket_end\030\005 \002(\t\022\023\n\013packet_flag\030\006 \002(\010"
    "\022\031\n\021discard_threshold\030\007 \002(\r\022\022\n\npend_limi"
    "t\030\010 \002(\r\"1\n\tGameProto\022\021\n\tdesc_file\030\001 \002(\t\022"
    "\021\n\tdata_file\030\002 \002(\t\"\331\001\n\006client\022\017\n\007clients"
    "\030\001 \001(\r\022\020\n\010bind_dll\030\002 \002(\t\022\r\n\005beats\030\003 \002(\r\022"
    "!\n\004path\030\004 \002(\0132\023.client_config.Path\022%\n\006re"
    "port\030\005 \002(\0132\025.client_config.Report\022*\n\tsoc"
    "ket_io\030\006 \002(\0132\027.client_config.SocketIO\022\'\n"
    "\005proto\030\007 \002(\0132\030.client_config.GameProto", 678);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client_config.proto", &protobuf_RegisterTypes);
  Path::default_instance_ = new Path();
  Report::default_instance_ = new Report();
  SocketIO::default_instance_ = new SocketIO();
  GameProto::default_instance_ = new GameProto();
  client::default_instance_ = new client();
  Path::default_instance_->InitAsDefaultInstance();
  Report::default_instance_->InitAsDefaultInstance();
  SocketIO::default_instance_->InitAsDefaultInstance();
  GameProto::default_instance_->InitAsDefaultInstance();
  client::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_5fconfig_2eproto {
  StaticDescriptorInitializer_client_5fconfig_2eproto() {
    protobuf_AddDesc_client_5fconfig_2eproto();
  }
} static_descriptor_initializer_client_5fconfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Path::kLogFileFieldNumber;
const int Path::kDataPathFieldNumber;
const int Path::kUpdatePakFieldNumber;
const int Path::kEfficiencyFileFieldNumber;
#endif  // !_MSC_VER

Path::Path()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Path::InitAsDefaultInstance() {
}

Path::Path(const Path& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Path::SharedCtor() {
  _cached_size_ = 0;
  log_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_pak_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  efficiency_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Path::~Path() {
  SharedDtor();
}

void Path::SharedDtor() {
  if (log_file_ != &::google::protobuf::internal::kEmptyString) {
    delete log_file_;
  }
  if (data_path_ != &::google::protobuf::internal::kEmptyString) {
    delete data_path_;
  }
  if (update_pak_ != &::google::protobuf::internal::kEmptyString) {
    delete update_pak_;
  }
  if (efficiency_file_ != &::google::protobuf::internal::kEmptyString) {
    delete efficiency_file_;
  }
  if (this != default_instance_) {
  }
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_descriptor_;
}

const Path& Path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fconfig_2eproto();  return *default_instance_;
}

Path* Path::default_instance_ = NULL;

Path* Path::New() const {
  return new Path;
}

void Path::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_log_file()) {
      if (log_file_ != &::google::protobuf::internal::kEmptyString) {
        log_file_->clear();
      }
    }
    if (has_data_path()) {
      if (data_path_ != &::google::protobuf::internal::kEmptyString) {
        data_path_->clear();
      }
    }
    if (has_update_pak()) {
      if (update_pak_ != &::google::protobuf::internal::kEmptyString) {
        update_pak_->clear();
      }
    }
    if (has_efficiency_file()) {
      if (efficiency_file_ != &::google::protobuf::internal::kEmptyString) {
        efficiency_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string log_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_file().data(), this->log_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_path;
        break;
      }
      
      // required string data_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_path().data(), this->data_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_update_pak;
        break;
      }
      
      // required string update_pak = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_pak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_pak()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update_pak().data(), this->update_pak().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_efficiency_file;
        break;
      }
      
      // required string efficiency_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_efficiency_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_efficiency_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->efficiency_file().data(), this->efficiency_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string log_file = 1;
  if (has_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_file().data(), this->log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->log_file(), output);
  }
  
  // required string data_path = 2;
  if (has_data_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_path().data(), this->data_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data_path(), output);
  }
  
  // required string update_pak = 3;
  if (has_update_pak()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_pak().data(), this->update_pak().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->update_pak(), output);
  }
  
  // required string efficiency_file = 4;
  if (has_efficiency_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->efficiency_file().data(), this->efficiency_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->efficiency_file(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Path::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string log_file = 1;
  if (has_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_file().data(), this->log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->log_file(), target);
  }
  
  // required string data_path = 2;
  if (has_data_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_path().data(), this->data_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_path(), target);
  }
  
  // required string update_pak = 3;
  if (has_update_pak()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_pak().data(), this->update_pak().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->update_pak(), target);
  }
  
  // required string efficiency_file = 4;
  if (has_efficiency_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->efficiency_file().data(), this->efficiency_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->efficiency_file(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Path::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string log_file = 1;
    if (has_log_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_file());
    }
    
    // required string data_path = 2;
    if (has_data_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_path());
    }
    
    // required string update_pak = 3;
    if (has_update_pak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_pak());
    }
    
    // required string efficiency_file = 4;
    if (has_efficiency_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->efficiency_file());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Path* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Path*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_file()) {
      set_log_file(from.log_file());
    }
    if (from.has_data_path()) {
      set_data_path(from.data_path());
    }
    if (from.has_update_pak()) {
      set_update_pak(from.update_pak());
    }
    if (from.has_efficiency_file()) {
      set_efficiency_file(from.efficiency_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Path::Swap(Path* other) {
  if (other != this) {
    std::swap(log_file_, other->log_file_);
    std::swap(data_path_, other->data_path_);
    std::swap(update_pak_, other->update_pak_);
    std::swap(efficiency_file_, other->efficiency_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Path_descriptor_;
  metadata.reflection = Path_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Report::kUseNameFieldNumber;
const int Report::kPassWordFieldNumber;
const int Report::kEmailAddrFieldNumber;
const int Report::kReciverFieldNumber;
const int Report::kSMTPFieldNumber;
#endif  // !_MSC_VER

Report::Report()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Report::InitAsDefaultInstance() {
}

Report::Report(const Report& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Report::SharedCtor() {
  _cached_size_ = 0;
  usename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  emailaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reciver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  smtp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Report::~Report() {
  SharedDtor();
}

void Report::SharedDtor() {
  if (usename_ != &::google::protobuf::internal::kEmptyString) {
    delete usename_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (emailaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete emailaddr_;
  }
  if (reciver_ != &::google::protobuf::internal::kEmptyString) {
    delete reciver_;
  }
  if (smtp_ != &::google::protobuf::internal::kEmptyString) {
    delete smtp_;
  }
  if (this != default_instance_) {
  }
}

void Report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_descriptor_;
}

const Report& Report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fconfig_2eproto();  return *default_instance_;
}

Report* Report::default_instance_ = NULL;

Report* Report::New() const {
  return new Report;
}

void Report::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_usename()) {
      if (usename_ != &::google::protobuf::internal::kEmptyString) {
        usename_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_emailaddr()) {
      if (emailaddr_ != &::google::protobuf::internal::kEmptyString) {
        emailaddr_->clear();
      }
    }
    if (has_reciver()) {
      if (reciver_ != &::google::protobuf::internal::kEmptyString) {
        reciver_->clear();
      }
    }
    if (has_smtp()) {
      if (smtp_ != &::google::protobuf::internal::kEmptyString) {
        smtp_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string UseName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usename().data(), this->usename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PassWord;
        break;
      }
      
      // required string PassWord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PassWord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_EmailAddr;
        break;
      }
      
      // required string EmailAddr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EmailAddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emailaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->emailaddr().data(), this->emailaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Reciver;
        break;
      }
      
      // required string Reciver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Reciver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reciver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reciver().data(), this->reciver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SMTP;
        break;
      }
      
      // required string SMTP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SMTP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_smtp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->smtp().data(), this->smtp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string UseName = 1;
  if (has_usename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usename().data(), this->usename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->usename(), output);
  }
  
  // required string PassWord = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // required string EmailAddr = 3;
  if (has_emailaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emailaddr().data(), this->emailaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->emailaddr(), output);
  }
  
  // required string Reciver = 4;
  if (has_reciver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reciver().data(), this->reciver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reciver(), output);
  }
  
  // required string SMTP = 5;
  if (has_smtp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->smtp().data(), this->smtp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->smtp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Report::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string UseName = 1;
  if (has_usename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usename().data(), this->usename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->usename(), target);
  }
  
  // required string PassWord = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // required string EmailAddr = 3;
  if (has_emailaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emailaddr().data(), this->emailaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->emailaddr(), target);
  }
  
  // required string Reciver = 4;
  if (has_reciver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reciver().data(), this->reciver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reciver(), target);
  }
  
  // required string SMTP = 5;
  if (has_smtp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->smtp().data(), this->smtp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->smtp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Report::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string UseName = 1;
    if (has_usename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usename());
    }
    
    // required string PassWord = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // required string EmailAddr = 3;
    if (has_emailaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emailaddr());
    }
    
    // required string Reciver = 4;
    if (has_reciver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reciver());
    }
    
    // required string SMTP = 5;
    if (has_smtp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->smtp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Report* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Report*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Report::MergeFrom(const Report& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usename()) {
      set_usename(from.usename());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_emailaddr()) {
      set_emailaddr(from.emailaddr());
    }
    if (from.has_reciver()) {
      set_reciver(from.reciver());
    }
    if (from.has_smtp()) {
      set_smtp(from.smtp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Report::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report::CopyFrom(const Report& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void Report::Swap(Report* other) {
  if (other != this) {
    std::swap(usename_, other->usename_);
    std::swap(password_, other->password_);
    std::swap(emailaddr_, other->emailaddr_);
    std::swap(reciver_, other->reciver_);
    std::swap(smtp_, other->smtp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Report_descriptor_;
  metadata.reflection = Report_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocketIO::kRecvBufLenFieldNumber;
const int SocketIO::kSendPoolFieldNumber;
const int SocketIO::kSendBufLenFieldNumber;
const int SocketIO::kPacketBeginFieldNumber;
const int SocketIO::kPacketEndFieldNumber;
const int SocketIO::kPacketFlagFieldNumber;
const int SocketIO::kDiscardThresholdFieldNumber;
const int SocketIO::kPendLimitFieldNumber;
#endif  // !_MSC_VER

SocketIO::SocketIO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SocketIO::InitAsDefaultInstance() {
}

SocketIO::SocketIO(const SocketIO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SocketIO::SharedCtor() {
  _cached_size_ = 0;
  recv_buf_len_ = 0u;
  send_pool_ = 0u;
  send_buf_len_ = 0u;
  packet_begin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  packet_end_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  packet_flag_ = false;
  discard_threshold_ = 0u;
  pend_limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketIO::~SocketIO() {
  SharedDtor();
}

void SocketIO::SharedDtor() {
  if (packet_begin_ != &::google::protobuf::internal::kEmptyString) {
    delete packet_begin_;
  }
  if (packet_end_ != &::google::protobuf::internal::kEmptyString) {
    delete packet_end_;
  }
  if (this != default_instance_) {
  }
}

void SocketIO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocketIO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocketIO_descriptor_;
}

const SocketIO& SocketIO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fconfig_2eproto();  return *default_instance_;
}

SocketIO* SocketIO::default_instance_ = NULL;

SocketIO* SocketIO::New() const {
  return new SocketIO;
}

void SocketIO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recv_buf_len_ = 0u;
    send_pool_ = 0u;
    send_buf_len_ = 0u;
    if (has_packet_begin()) {
      if (packet_begin_ != &::google::protobuf::internal::kEmptyString) {
        packet_begin_->clear();
      }
    }
    if (has_packet_end()) {
      if (packet_end_ != &::google::protobuf::internal::kEmptyString) {
        packet_end_->clear();
      }
    }
    packet_flag_ = false;
    discard_threshold_ = 0u;
    pend_limit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocketIO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 recv_buf_len = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_buf_len_)));
          set_has_recv_buf_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_send_pool;
        break;
      }
      
      // required uint32 send_pool = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_pool_)));
          set_has_send_pool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_send_buf_len;
        break;
      }
      
      // required uint32 send_buf_len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_buf_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_buf_len_)));
          set_has_send_buf_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_packet_begin;
        break;
      }
      
      // required string packet_begin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet_begin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packet_begin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->packet_begin().data(), this->packet_begin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_packet_end;
        break;
      }
      
      // required string packet_end = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packet_end()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->packet_end().data(), this->packet_end().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_packet_flag;
        break;
      }
      
      // required bool packet_flag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packet_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &packet_flag_)));
          set_has_packet_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_discard_threshold;
        break;
      }
      
      // required uint32 discard_threshold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discard_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discard_threshold_)));
          set_has_discard_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pend_limit;
        break;
      }
      
      // required uint32 pend_limit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pend_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pend_limit_)));
          set_has_pend_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SocketIO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 recv_buf_len = 1;
  if (has_recv_buf_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recv_buf_len(), output);
  }
  
  // required uint32 send_pool = 2;
  if (has_send_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->send_pool(), output);
  }
  
  // required uint32 send_buf_len = 3;
  if (has_send_buf_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->send_buf_len(), output);
  }
  
  // required string packet_begin = 4;
  if (has_packet_begin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packet_begin().data(), this->packet_begin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->packet_begin(), output);
  }
  
  // required string packet_end = 5;
  if (has_packet_end()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packet_end().data(), this->packet_end().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->packet_end(), output);
  }
  
  // required bool packet_flag = 6;
  if (has_packet_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->packet_flag(), output);
  }
  
  // required uint32 discard_threshold = 7;
  if (has_discard_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->discard_threshold(), output);
  }
  
  // required uint32 pend_limit = 8;
  if (has_pend_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pend_limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SocketIO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 recv_buf_len = 1;
  if (has_recv_buf_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recv_buf_len(), target);
  }
  
  // required uint32 send_pool = 2;
  if (has_send_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->send_pool(), target);
  }
  
  // required uint32 send_buf_len = 3;
  if (has_send_buf_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->send_buf_len(), target);
  }
  
  // required string packet_begin = 4;
  if (has_packet_begin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packet_begin().data(), this->packet_begin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->packet_begin(), target);
  }
  
  // required string packet_end = 5;
  if (has_packet_end()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packet_end().data(), this->packet_end().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->packet_end(), target);
  }
  
  // required bool packet_flag = 6;
  if (has_packet_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->packet_flag(), target);
  }
  
  // required uint32 discard_threshold = 7;
  if (has_discard_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->discard_threshold(), target);
  }
  
  // required uint32 pend_limit = 8;
  if (has_pend_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pend_limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SocketIO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 recv_buf_len = 1;
    if (has_recv_buf_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recv_buf_len());
    }
    
    // required uint32 send_pool = 2;
    if (has_send_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_pool());
    }
    
    // required uint32 send_buf_len = 3;
    if (has_send_buf_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_buf_len());
    }
    
    // required string packet_begin = 4;
    if (has_packet_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packet_begin());
    }
    
    // required string packet_end = 5;
    if (has_packet_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packet_end());
    }
    
    // required bool packet_flag = 6;
    if (has_packet_flag()) {
      total_size += 1 + 1;
    }
    
    // required uint32 discard_threshold = 7;
    if (has_discard_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discard_threshold());
    }
    
    // required uint32 pend_limit = 8;
    if (has_pend_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pend_limit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketIO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocketIO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocketIO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocketIO::MergeFrom(const SocketIO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recv_buf_len()) {
      set_recv_buf_len(from.recv_buf_len());
    }
    if (from.has_send_pool()) {
      set_send_pool(from.send_pool());
    }
    if (from.has_send_buf_len()) {
      set_send_buf_len(from.send_buf_len());
    }
    if (from.has_packet_begin()) {
      set_packet_begin(from.packet_begin());
    }
    if (from.has_packet_end()) {
      set_packet_end(from.packet_end());
    }
    if (from.has_packet_flag()) {
      set_packet_flag(from.packet_flag());
    }
    if (from.has_discard_threshold()) {
      set_discard_threshold(from.discard_threshold());
    }
    if (from.has_pend_limit()) {
      set_pend_limit(from.pend_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocketIO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketIO::CopyFrom(const SocketIO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketIO::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void SocketIO::Swap(SocketIO* other) {
  if (other != this) {
    std::swap(recv_buf_len_, other->recv_buf_len_);
    std::swap(send_pool_, other->send_pool_);
    std::swap(send_buf_len_, other->send_buf_len_);
    std::swap(packet_begin_, other->packet_begin_);
    std::swap(packet_end_, other->packet_end_);
    std::swap(packet_flag_, other->packet_flag_);
    std::swap(discard_threshold_, other->discard_threshold_);
    std::swap(pend_limit_, other->pend_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocketIO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocketIO_descriptor_;
  metadata.reflection = SocketIO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameProto::kDescFileFieldNumber;
const int GameProto::kDataFileFieldNumber;
#endif  // !_MSC_VER

GameProto::GameProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameProto::InitAsDefaultInstance() {
}

GameProto::GameProto(const GameProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameProto::SharedCtor() {
  _cached_size_ = 0;
  desc_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameProto::~GameProto() {
  SharedDtor();
}

void GameProto::SharedDtor() {
  if (desc_file_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_file_;
  }
  if (data_file_ != &::google::protobuf::internal::kEmptyString) {
    delete data_file_;
  }
  if (this != default_instance_) {
  }
}

void GameProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameProto_descriptor_;
}

const GameProto& GameProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fconfig_2eproto();  return *default_instance_;
}

GameProto* GameProto::default_instance_ = NULL;

GameProto* GameProto::New() const {
  return new GameProto;
}

void GameProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_desc_file()) {
      if (desc_file_ != &::google::protobuf::internal::kEmptyString) {
        desc_file_->clear();
      }
    }
    if (has_data_file()) {
      if (data_file_ != &::google::protobuf::internal::kEmptyString) {
        data_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string desc_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc_file().data(), this->desc_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_file;
        break;
      }
      
      // required string data_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_file().data(), this->data_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string desc_file = 1;
  if (has_desc_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_file().data(), this->desc_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->desc_file(), output);
  }
  
  // required string data_file = 2;
  if (has_data_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_file().data(), this->data_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data_file(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string desc_file = 1;
  if (has_desc_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_file().data(), this->desc_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->desc_file(), target);
  }
  
  // required string data_file = 2;
  if (has_data_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_file().data(), this->data_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_file(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string desc_file = 1;
    if (has_desc_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc_file());
    }
    
    // required string data_file = 2;
    if (has_data_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_file());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameProto::MergeFrom(const GameProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desc_file()) {
      set_desc_file(from.desc_file());
    }
    if (from.has_data_file()) {
      set_data_file(from.data_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameProto::CopyFrom(const GameProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameProto::Swap(GameProto* other) {
  if (other != this) {
    std::swap(desc_file_, other->desc_file_);
    std::swap(data_file_, other->data_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameProto_descriptor_;
  metadata.reflection = GameProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int client::kClientsFieldNumber;
const int client::kBindDllFieldNumber;
const int client::kBeatsFieldNumber;
const int client::kPathFieldNumber;
const int client::kReportFieldNumber;
const int client::kSocketIoFieldNumber;
const int client::kProtoFieldNumber;
#endif  // !_MSC_VER

client::client()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client::InitAsDefaultInstance() {
  path_ = const_cast< ::client_config::Path*>(&::client_config::Path::default_instance());
  report_ = const_cast< ::client_config::Report*>(&::client_config::Report::default_instance());
  socket_io_ = const_cast< ::client_config::SocketIO*>(&::client_config::SocketIO::default_instance());
  proto_ = const_cast< ::client_config::GameProto*>(&::client_config::GameProto::default_instance());
}

client::client(const client& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client::SharedCtor() {
  _cached_size_ = 0;
  clients_ = 0u;
  bind_dll_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beats_ = 0u;
  path_ = NULL;
  report_ = NULL;
  socket_io_ = NULL;
  proto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client::~client() {
  SharedDtor();
}

void client::SharedDtor() {
  if (bind_dll_ != &::google::protobuf::internal::kEmptyString) {
    delete bind_dll_;
  }
  if (this != default_instance_) {
    delete path_;
    delete report_;
    delete socket_io_;
    delete proto_;
  }
}

void client::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_descriptor_;
}

const client& client::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_5fconfig_2eproto();  return *default_instance_;
}

client* client::default_instance_ = NULL;

client* client::New() const {
  return new client;
}

void client::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clients_ = 0u;
    if (has_bind_dll()) {
      if (bind_dll_ != &::google::protobuf::internal::kEmptyString) {
        bind_dll_->clear();
      }
    }
    beats_ = 0u;
    if (has_path()) {
      if (path_ != NULL) path_->::client_config::Path::Clear();
    }
    if (has_report()) {
      if (report_ != NULL) report_->::client_config::Report::Clear();
    }
    if (has_socket_io()) {
      if (socket_io_ != NULL) socket_io_->::client_config::SocketIO::Clear();
    }
    if (has_proto()) {
      if (proto_ != NULL) proto_->::client_config::GameProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 clients = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clients_)));
          set_has_clients();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bind_dll;
        break;
      }
      
      // required string bind_dll = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bind_dll:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bind_dll()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bind_dll().data(), this->bind_dll().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beats;
        break;
      }
      
      // required uint32 beats = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beats_)));
          set_has_beats();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_path;
        break;
      }
      
      // required .client_config.Path path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_report;
        break;
      }
      
      // required .client_config.Report report = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_socket_io;
        break;
      }
      
      // required .client_config.SocketIO socket_io = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_socket_io:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_socket_io()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_proto;
        break;
      }
      
      // required .client_config.GameProto proto = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void client::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 clients = 1;
  if (has_clients()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clients(), output);
  }
  
  // required string bind_dll = 2;
  if (has_bind_dll()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bind_dll().data(), this->bind_dll().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bind_dll(), output);
  }
  
  // required uint32 beats = 3;
  if (has_beats()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->beats(), output);
  }
  
  // required .client_config.Path path = 4;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->path(), output);
  }
  
  // required .client_config.Report report = 5;
  if (has_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->report(), output);
  }
  
  // required .client_config.SocketIO socket_io = 6;
  if (has_socket_io()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->socket_io(), output);
  }
  
  // required .client_config.GameProto proto = 7;
  if (has_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->proto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 clients = 1;
  if (has_clients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clients(), target);
  }
  
  // required string bind_dll = 2;
  if (has_bind_dll()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bind_dll().data(), this->bind_dll().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bind_dll(), target);
  }
  
  // required uint32 beats = 3;
  if (has_beats()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->beats(), target);
  }
  
  // required .client_config.Path path = 4;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->path(), target);
  }
  
  // required .client_config.Report report = 5;
  if (has_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->report(), target);
  }
  
  // required .client_config.SocketIO socket_io = 6;
  if (has_socket_io()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->socket_io(), target);
  }
  
  // required .client_config.GameProto proto = 7;
  if (has_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->proto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 clients = 1;
    if (has_clients()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clients());
    }
    
    // required string bind_dll = 2;
    if (has_bind_dll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bind_dll());
    }
    
    // required uint32 beats = 3;
    if (has_beats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beats());
    }
    
    // required .client_config.Path path = 4;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path());
    }
    
    // required .client_config.Report report = 5;
    if (has_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->report());
    }
    
    // required .client_config.SocketIO socket_io = 6;
    if (has_socket_io()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->socket_io());
    }
    
    // required .client_config.GameProto proto = 7;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proto());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client::MergeFrom(const client& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clients()) {
      set_clients(from.clients());
    }
    if (from.has_bind_dll()) {
      set_bind_dll(from.bind_dll());
    }
    if (from.has_beats()) {
      set_beats(from.beats());
    }
    if (from.has_path()) {
      mutable_path()->::client_config::Path::MergeFrom(from.path());
    }
    if (from.has_report()) {
      mutable_report()->::client_config::Report::MergeFrom(from.report());
    }
    if (from.has_socket_io()) {
      mutable_socket_io()->::client_config::SocketIO::MergeFrom(from.socket_io());
    }
    if (from.has_proto()) {
      mutable_proto()->::client_config::GameProto::MergeFrom(from.proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client::CopyFrom(const client& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007e) != 0x0000007e) return false;
  
  if (has_path()) {
    if (!this->path().IsInitialized()) return false;
  }
  if (has_report()) {
    if (!this->report().IsInitialized()) return false;
  }
  if (has_socket_io()) {
    if (!this->socket_io().IsInitialized()) return false;
  }
  if (has_proto()) {
    if (!this->proto().IsInitialized()) return false;
  }
  return true;
}

void client::Swap(client* other) {
  if (other != this) {
    std::swap(clients_, other->clients_);
    std::swap(bind_dll_, other->bind_dll_);
    std::swap(beats_, other->beats_);
    std::swap(path_, other->path_);
    std::swap(report_, other->report_);
    std::swap(socket_io_, other->socket_io_);
    std::swap(proto_, other->proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_descriptor_;
  metadata.reflection = client_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace client_config

// @@protoc_insertion_point(global_scope)
