// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace world {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class WorldService {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_world_LoginRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.LoginRequest, global::world.LoginRequest.Builder> internal__static_world_LoginRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_RoleCreateRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.RoleCreateRequest, global::world.RoleCreateRequest.Builder> internal__static_world_RoleCreateRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_RoleSelectRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.RoleSelectRequest, global::world.RoleSelectRequest.Builder> internal__static_world_RoleSelectRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_MoveStylerRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.MoveStylerRequest, global::world.MoveStylerRequest.Builder> internal__static_world_MoveStylerRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_MoveDirectRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.MoveDirectRequest, global::world.MoveDirectRequest.Builder> internal__static_world_MoveDirectRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_SkillTargetRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.SkillTargetRequest, global::world.SkillTargetRequest.Builder> internal__static_world_SkillTargetRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_SkillPostionRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.SkillPostionRequest, global::world.SkillPostionRequest.Builder> internal__static_world_SkillPostionRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_MoveItemRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.MoveItemRequest, global::world.MoveItemRequest.Builder> internal__static_world_MoveItemRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_ItemRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.ItemRequest, global::world.ItemRequest.Builder> internal__static_world_ItemRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_PlayerAttribRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.PlayerAttribRequest, global::world.PlayerAttribRequest.Builder> internal__static_world_PlayerAttribRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_MakeItemRequest__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.MakeItemRequest, global::world.MakeItemRequest.Builder> internal__static_world_MakeItemRequest__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_OtherCharactor__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.OtherCharactor, global::world.OtherCharactor.Builder> internal__static_world_OtherCharactor__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_OtherPlayer__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.OtherPlayer, global::world.OtherPlayer.Builder> internal__static_world_OtherPlayer__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_OtherPlayer_Avatar__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.OtherPlayer.Types.Avatar, global::world.OtherPlayer.Types.Avatar.Builder> internal__static_world_OtherPlayer_Avatar__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_OtherPlayer_Equip__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.OtherPlayer.Types.Equip, global::world.OtherPlayer.Types.Equip.Builder> internal__static_world_OtherPlayer_Equip__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_NPC__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.NPC, global::world.NPC.Builder> internal__static_world_NPC__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_Callee__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.Callee, global::world.Callee.Builder> internal__static_world_Callee__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static WorldService() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChN3b3JsZF9zZXJ2aWNlLnByb3RvEgV3b3JsZBoMc3lzdGVtLnByb3RvIjEK" + 
          "DExvZ2luUmVxdWVzdBIPCgdhY2NvdW50GAEgAigJEhAKCHBhc3N3b3JkGAIg" + 
          "AigJIn0KEVJvbGVDcmVhdGVSZXF1ZXN0EgwKBG5hbWUYASACKAkSEgoKcHJv" + 
          "ZmVzc2lvbhgCIAIoBRILCgNzZXgYAyACKAUSEwoLZmFjaWFsX2Zvcm0YBCAC" + 
          "KAUSFgoOZmFjaWFsX3RleHR1cmUYBSACKAUSDAoEaGFpchgGIAIoBSIiChFS" + 
          "b2xlU2VsZWN0UmVxdWVzdBINCgVpbmRleBgBIAIoBSIjChFNb3ZlU3R5bGVy" + 
          "UmVxdWVzdBIOCgZzdHlsZXIYASACKAUiLQoRTW92ZURpcmVjdFJlcXVlc3QS" + 
          "CQoBZBgBIAIoAhINCgVmbGFncxgCIAIoBSI2ChJTa2lsbFRhcmdldFJlcXVl" + 
          "c3QSEAoIc2tpbGxfaWQYASACKAUSDgoGdGFyZ2V0GAIgAigFIkQKE1NraWxs" + 
          "UG9zdGlvblJlcXVlc3QSEAoIc2tpbGxfaWQYASACKAUSGwoFcG9pbnQYAiAC" + 
          "KAsyDC5jb3JlLlBvaW50RiIrCg9Nb3ZlSXRlbVJlcXVlc3QSCwoDc3JjGAEg" + 
          "AigFEgsKA2RzdBgCIAIoBSIaCgtJdGVtUmVxdWVzdBILCgNwb3MYASACKAUi" + 
          "SAoTUGxheWVyQXR0cmliUmVxdWVzdBIMCgRuYW1lGAEgAigJEhQKDGF0dHJp" + 
          "Yl9pbmRleBgCIAIoBRINCgV2YWx1ZRgDIAIoBSJsCg9NYWtlSXRlbVJlcXVl" + 
          "c3QSDAoEbmFtZRgBIAIoCRIMCgR1bml0GAIgAigFEhAKCHRlbXBsYXRlGAMg" + 
          "AigFEg0KBWxldmVsGAQgAigFEg0KBWNsYXNzGAUgAigFEg0KBWNvdW50GAYg" + 
          "AigFIo4CCg5PdGhlckNoYXJhY3RvchIKCgJpZBgBIAIoBRIMCgR0eXBlGAIg" + 
          "AigFEhkKA3BvcxgDIAIoCzIMLmNvcmUuUG9pbnRGEgkKAWQYBCACKAISDQoF" + 
          "c3RhdGUYBSACKAUSEgoKbW92ZV9zdGF0ZRgGIAIoBRIOCgZhY3Rpb24YByAC" + 
          "KAUSDQoFc3BlZWQYCCACKAISDQoFbGV2ZWwYCSACKAUSEQoJdGFyZ2V0X2lk" + 
          "GAogASgFEiAKCnRhcmdldF9wb3MYCyABKAsyDC5jb3JlLlBvaW50RhIOCgZt" + 
          "YXhfaHAYDCACKAUSDgoGbWF4X21wGA0gAigFEgoKAmhwGA4gAigFEgoKAm1w" + 
          "GA8gAigFItsDCgtPdGhlclBsYXllchIoCgljaGFyYWN0b3IYASACKAsyFS53" + 
          "b3JsZC5PdGhlckNoYXJhY3RvchIpCgZhdmF0YXIYAiACKAsyGS53b3JsZC5P" + 
          "dGhlclBsYXllci5BdmF0YXISKAoGZXF1aXBzGAMgAygLMhgud29ybGQuT3Ro" + 
          "ZXJQbGF5ZXIuRXF1aXASDwoHcGtfbW9kZRgEIAIoBRIQCghyZWRfbmFtZRgF" + 
          "IAIoCBIPCgd2aXNpYmxlGAYgAigFEg0KBXNoYXBlGAcgAigFEg0KBXRpdGxl" + 
          "GAggAigFEhEKCWNvbnNvcnRpYRgJIAIoCRINCgVtb2RlbBgKIAIoBRINCgVs" + 
          "ZXZlbBgLIAIoBRISCgpkcmVzc19tb2RlGAwgAigIGnIKBkF2YXRhchIMCgRu" + 
          "YW1lGAEgAigJEhIKCnByb2Zlc3Npb24YAiACKAUSCwoDc2V4GAMgAigFEhMK" + 
          "C2ZhY2lhbF9mb3JtGAQgAigFEhYKDmZhY2lhbF90ZXh0dXJlGAUgAigFEgwK" + 
          "BGhhaXIYBiACKAUaQgoFRXF1aXASDQoFbW9kZWwYASACKAUSDQoFbGV2ZWwY" + 
          "AiACKAUSDAoEZ2xvdxgDIAIoBRINCgVjb2xvchgEIAIoBSJvCgNOUEMSKAoJ" + 
          "Y2hhcmFjdG9yGAEgAigLMhUud29ybGQuT3RoZXJDaGFyYWN0b3ISDQoFY2xh" + 
          "c3MYAiACKAUSDQoFbW9kZWwYAyACKAUSDgoGc3R5bGVyGAQgAigFEhAKCHJv" + 
          "dGF0aW9uGAUgAigIInUKBkNhbGxlZRIVCg1jb250cm9sbGVyX2lkGAEgAigF" + 
          "EhcKD2NvbnRyb2xsZXJfbmFtZRgCIAIoCRIYChBjb250cm9sbGVyX2xldmVs" + 
          "GAMgAigJEg8KB3BrX21vZGUYBCACKAUSEAoIcmVkX25hbWUYBSACKAgyOgoM" + 
          "TG9naW5TZXJ2aWNlEioKBUxvZ2luEhMud29ybGQuTG9naW5SZXF1ZXN0Ggwu" + 
          "Y29yZS5SZXNwb24yzgEKC1JvbGVTZXJ2aWNlEiYKBExpc3QSEC5jb3JlLk51" + 
          "bGxSZXF1c3QaDC5jb3JlLlJlc3BvbhIwCgZDcmVhdGUSGC53b3JsZC5Sb2xl" + 
          "Q3JlYXRlUmVxdWVzdBoMLmNvcmUuUmVzcG9uEjAKBkRlbGV0ZRIYLndvcmxk" + 
          "LlJvbGVTZWxlY3RSZXF1ZXN0GgwuY29yZS5SZXNwb24SMwoJRW50ZXJHYW1l" + 
          "Ehgud29ybGQuUm9sZVNlbGVjdFJlcXVlc3QaDC5jb3JlLlJlc3BvbjL6AgoT" + 
          "UGxheWVyQWN0aW9uU2VydmljZRI0CgpNb3ZlU3R5bGVyEhgud29ybGQuTW92" + 
          "ZVN0eWxlclJlcXVlc3QaDC5jb3JlLlJlc3BvbhIkCgZNb3ZlVG8SDC5jb3Jl" + 
          "LlBvaW50RhoMLmNvcmUuUmVzcG9uEiIKBFN0b3ASDC5jb3JlLlBvaW50RhoM" + 
          "LmNvcmUuUmVzcG9uEjQKCk1vdmVEaXJlY3QSGC53b3JsZC5Nb3ZlRGlyZWN0" + 
          "UmVxdWVzdBoMLmNvcmUuUmVzcG9uEi4KBEp1bXASGC53b3JsZC5Nb3ZlRGly" + 
          "ZWN0UmVxdWVzdBoMLmNvcmUuUmVzcG9uEjwKEUNhc3RTa2lsbFRvVGFyZ2V0" + 
          "Ehkud29ybGQuU2tpbGxUYXJnZXRSZXF1ZXN0GgwuY29yZS5SZXNwb24SPwoT" + 
          "Q2FzdFNraWxsVG9Qb3NpdGlvbhIaLndvcmxkLlNraWxsUG9zdGlvblJlcXVl" + 
          "c3QaDC5jb3JlLlJlc3BvbjLTAQoLSXRlbVNlcnZpY2USMAoITW92ZUl0ZW0S" + 
          "Fi53b3JsZC5Nb3ZlSXRlbVJlcXVlc3QaDC5jb3JlLlJlc3BvbhIvCgtEZXN0" + 
          "cm95SXRlbRISLndvcmxkLkl0ZW1SZXF1ZXN0GgwuY29yZS5SZXNwb24SLQoJ" + 
          "VXNlQXNQcm9wEhIud29ybGQuSXRlbVJlcXVlc3QaDC5jb3JlLlJlc3BvbhIy" + 
          "CgpVc2VBc0VxdWlwEhYud29ybGQuTW92ZUl0ZW1SZXF1ZXN0GgwuY29yZS5S" + 
          "ZXNwb24yggEKEUdhbWVNYXN0ZXJTZXJ2aWNlEjsKD1NldFBsYXllckF0dHJp" + 
          "YhIaLndvcmxkLlBsYXllckF0dHJpYlJlcXVlc3QaDC5jb3JlLlJlc3BvbhIw" + 
          "CghNYWtlSXRlbRIWLndvcmxkLk1ha2VJdGVtUmVxdWVzdBoMLmNvcmUuUmVz" + 
          "cG9u");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_world_LoginRequest__Descriptor = Descriptor.MessageTypes[0];
        internal__static_world_LoginRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.LoginRequest, global::world.LoginRequest.Builder>(internal__static_world_LoginRequest__Descriptor,
                new string[] { "Account", "Password", });
        internal__static_world_RoleCreateRequest__Descriptor = Descriptor.MessageTypes[1];
        internal__static_world_RoleCreateRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.RoleCreateRequest, global::world.RoleCreateRequest.Builder>(internal__static_world_RoleCreateRequest__Descriptor,
                new string[] { "Name", "Profession", "Sex", "FacialForm", "FacialTexture", "Hair", });
        internal__static_world_RoleSelectRequest__Descriptor = Descriptor.MessageTypes[2];
        internal__static_world_RoleSelectRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.RoleSelectRequest, global::world.RoleSelectRequest.Builder>(internal__static_world_RoleSelectRequest__Descriptor,
                new string[] { "Index", });
        internal__static_world_MoveStylerRequest__Descriptor = Descriptor.MessageTypes[3];
        internal__static_world_MoveStylerRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.MoveStylerRequest, global::world.MoveStylerRequest.Builder>(internal__static_world_MoveStylerRequest__Descriptor,
                new string[] { "Styler", });
        internal__static_world_MoveDirectRequest__Descriptor = Descriptor.MessageTypes[4];
        internal__static_world_MoveDirectRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.MoveDirectRequest, global::world.MoveDirectRequest.Builder>(internal__static_world_MoveDirectRequest__Descriptor,
                new string[] { "D", "Flags", });
        internal__static_world_SkillTargetRequest__Descriptor = Descriptor.MessageTypes[5];
        internal__static_world_SkillTargetRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.SkillTargetRequest, global::world.SkillTargetRequest.Builder>(internal__static_world_SkillTargetRequest__Descriptor,
                new string[] { "SkillId", "Target", });
        internal__static_world_SkillPostionRequest__Descriptor = Descriptor.MessageTypes[6];
        internal__static_world_SkillPostionRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.SkillPostionRequest, global::world.SkillPostionRequest.Builder>(internal__static_world_SkillPostionRequest__Descriptor,
                new string[] { "SkillId", "Point", });
        internal__static_world_MoveItemRequest__Descriptor = Descriptor.MessageTypes[7];
        internal__static_world_MoveItemRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.MoveItemRequest, global::world.MoveItemRequest.Builder>(internal__static_world_MoveItemRequest__Descriptor,
                new string[] { "Src", "Dst", });
        internal__static_world_ItemRequest__Descriptor = Descriptor.MessageTypes[8];
        internal__static_world_ItemRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.ItemRequest, global::world.ItemRequest.Builder>(internal__static_world_ItemRequest__Descriptor,
                new string[] { "Pos", });
        internal__static_world_PlayerAttribRequest__Descriptor = Descriptor.MessageTypes[9];
        internal__static_world_PlayerAttribRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.PlayerAttribRequest, global::world.PlayerAttribRequest.Builder>(internal__static_world_PlayerAttribRequest__Descriptor,
                new string[] { "Name", "AttribIndex", "Value", });
        internal__static_world_MakeItemRequest__Descriptor = Descriptor.MessageTypes[10];
        internal__static_world_MakeItemRequest__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.MakeItemRequest, global::world.MakeItemRequest.Builder>(internal__static_world_MakeItemRequest__Descriptor,
                new string[] { "Name", "Unit", "Template", "Level", "Class", "Count", });
        internal__static_world_OtherCharactor__Descriptor = Descriptor.MessageTypes[11];
        internal__static_world_OtherCharactor__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.OtherCharactor, global::world.OtherCharactor.Builder>(internal__static_world_OtherCharactor__Descriptor,
                new string[] { "Id", "Type", "Pos", "D", "State", "MoveState", "Action", "Speed", "Level", "TargetId", "TargetPos", "MaxHp", "MaxMp", "Hp", "Mp", });
        internal__static_world_OtherPlayer__Descriptor = Descriptor.MessageTypes[12];
        internal__static_world_OtherPlayer__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.OtherPlayer, global::world.OtherPlayer.Builder>(internal__static_world_OtherPlayer__Descriptor,
                new string[] { "Charactor", "Avatar", "Equips", "PkMode", "RedName", "Visible", "Shape", "Title", "Consortia", "Model", "Level", "DressMode", });
        internal__static_world_OtherPlayer_Avatar__Descriptor = internal__static_world_OtherPlayer__Descriptor.NestedTypes[0];
        internal__static_world_OtherPlayer_Avatar__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.OtherPlayer.Types.Avatar, global::world.OtherPlayer.Types.Avatar.Builder>(internal__static_world_OtherPlayer_Avatar__Descriptor,
                new string[] { "Name", "Profession", "Sex", "FacialForm", "FacialTexture", "Hair", });
        internal__static_world_OtherPlayer_Equip__Descriptor = internal__static_world_OtherPlayer__Descriptor.NestedTypes[1];
        internal__static_world_OtherPlayer_Equip__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.OtherPlayer.Types.Equip, global::world.OtherPlayer.Types.Equip.Builder>(internal__static_world_OtherPlayer_Equip__Descriptor,
                new string[] { "Model", "Level", "Glow", "Color", });
        internal__static_world_NPC__Descriptor = Descriptor.MessageTypes[13];
        internal__static_world_NPC__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.NPC, global::world.NPC.Builder>(internal__static_world_NPC__Descriptor,
                new string[] { "Charactor", "Class", "Model", "Styler", "Rotation", });
        internal__static_world_Callee__Descriptor = Descriptor.MessageTypes[14];
        internal__static_world_Callee__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.Callee, global::world.Callee.Builder>(internal__static_world_Callee__Descriptor,
                new string[] { "ControllerId", "ControllerName", "ControllerLevel", "PkMode", "RedName", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::core.System.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class LoginRequest : pb::GeneratedMessage<LoginRequest, LoginRequest.Builder> {
    private LoginRequest() { }
    private static readonly LoginRequest defaultInstance = new LoginRequest().MakeReadOnly();
    private static readonly string[] _loginRequestFieldNames = new string[] { "account", "password" };
    private static readonly uint[] _loginRequestFieldTags = new uint[] { 10, 18 };
    public static LoginRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override LoginRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LoginRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_LoginRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<LoginRequest, LoginRequest.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_LoginRequest__FieldAccessorTable; }
    }
    
    public const int AccountFieldNumber = 1;
    private bool hasAccount;
    private string account_ = "";
    public bool HasAccount {
      get { return hasAccount; }
    }
    public string Account {
      get { return account_; }
    }
    
    public const int PasswordFieldNumber = 2;
    private bool hasPassword;
    private string password_ = "";
    public bool HasPassword {
      get { return hasPassword; }
    }
    public string Password {
      get { return password_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasAccount) return false;
        if (!hasPassword) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _loginRequestFieldNames;
      if (hasAccount) {
        output.WriteString(1, field_names[0], Account);
      }
      if (hasPassword) {
        output.WriteString(2, field_names[1], Password);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasAccount) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Account);
        }
        if (hasPassword) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Password);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static LoginRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static LoginRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static LoginRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static LoginRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static LoginRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static LoginRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static LoginRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LoginRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(LoginRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<LoginRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LoginRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LoginRequest result;
      
      private LoginRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          LoginRequest original = result;
          result = new LoginRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LoginRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.LoginRequest.Descriptor; }
      }
      
      public override LoginRequest DefaultInstanceForType {
        get { return global::world.LoginRequest.DefaultInstance; }
      }
      
      public override LoginRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is LoginRequest) {
          return MergeFrom((LoginRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LoginRequest other) {
        if (other == global::world.LoginRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasAccount) {
          Account = other.Account;
        }
        if (other.HasPassword) {
          Password = other.Password;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_loginRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _loginRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasAccount = input.ReadString(ref result.account_);
              break;
            }
            case 18: {
              result.hasPassword = input.ReadString(ref result.password_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasAccount {
        get { return result.hasAccount; }
      }
      public string Account {
        get { return result.Account; }
        set { SetAccount(value); }
      }
      public Builder SetAccount(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAccount = true;
        result.account_ = value;
        return this;
      }
      public Builder ClearAccount() {
        PrepareBuilder();
        result.hasAccount = false;
        result.account_ = "";
        return this;
      }
      
      public bool HasPassword {
        get { return result.hasPassword; }
      }
      public string Password {
        get { return result.Password; }
        set { SetPassword(value); }
      }
      public Builder SetPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPassword = true;
        result.password_ = value;
        return this;
      }
      public Builder ClearPassword() {
        PrepareBuilder();
        result.hasPassword = false;
        result.password_ = "";
        return this;
      }
    }
    static LoginRequest() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RoleCreateRequest : pb::GeneratedMessage<RoleCreateRequest, RoleCreateRequest.Builder> {
    private RoleCreateRequest() { }
    private static readonly RoleCreateRequest defaultInstance = new RoleCreateRequest().MakeReadOnly();
    private static readonly string[] _roleCreateRequestFieldNames = new string[] { "facial_form", "facial_texture", "hair", "name", "profession", "sex" };
    private static readonly uint[] _roleCreateRequestFieldTags = new uint[] { 32, 40, 48, 10, 16, 24 };
    public static RoleCreateRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RoleCreateRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RoleCreateRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_RoleCreateRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RoleCreateRequest, RoleCreateRequest.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_RoleCreateRequest__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int ProfessionFieldNumber = 2;
    private bool hasProfession;
    private int profession_;
    public bool HasProfession {
      get { return hasProfession; }
    }
    public int Profession {
      get { return profession_; }
    }
    
    public const int SexFieldNumber = 3;
    private bool hasSex;
    private int sex_;
    public bool HasSex {
      get { return hasSex; }
    }
    public int Sex {
      get { return sex_; }
    }
    
    public const int FacialFormFieldNumber = 4;
    private bool hasFacialForm;
    private int facialForm_;
    public bool HasFacialForm {
      get { return hasFacialForm; }
    }
    public int FacialForm {
      get { return facialForm_; }
    }
    
    public const int FacialTextureFieldNumber = 5;
    private bool hasFacialTexture;
    private int facialTexture_;
    public bool HasFacialTexture {
      get { return hasFacialTexture; }
    }
    public int FacialTexture {
      get { return facialTexture_; }
    }
    
    public const int HairFieldNumber = 6;
    private bool hasHair;
    private int hair_;
    public bool HasHair {
      get { return hasHair; }
    }
    public int Hair {
      get { return hair_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasProfession) return false;
        if (!hasSex) return false;
        if (!hasFacialForm) return false;
        if (!hasFacialTexture) return false;
        if (!hasHair) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _roleCreateRequestFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[3], Name);
      }
      if (hasProfession) {
        output.WriteInt32(2, field_names[4], Profession);
      }
      if (hasSex) {
        output.WriteInt32(3, field_names[5], Sex);
      }
      if (hasFacialForm) {
        output.WriteInt32(4, field_names[0], FacialForm);
      }
      if (hasFacialTexture) {
        output.WriteInt32(5, field_names[1], FacialTexture);
      }
      if (hasHair) {
        output.WriteInt32(6, field_names[2], Hair);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasProfession) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Profession);
        }
        if (hasSex) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Sex);
        }
        if (hasFacialForm) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, FacialForm);
        }
        if (hasFacialTexture) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, FacialTexture);
        }
        if (hasHair) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Hair);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RoleCreateRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoleCreateRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoleCreateRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoleCreateRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoleCreateRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoleCreateRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RoleCreateRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RoleCreateRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RoleCreateRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoleCreateRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RoleCreateRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RoleCreateRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RoleCreateRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RoleCreateRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RoleCreateRequest result;
      
      private RoleCreateRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RoleCreateRequest original = result;
          result = new RoleCreateRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RoleCreateRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.RoleCreateRequest.Descriptor; }
      }
      
      public override RoleCreateRequest DefaultInstanceForType {
        get { return global::world.RoleCreateRequest.DefaultInstance; }
      }
      
      public override RoleCreateRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RoleCreateRequest) {
          return MergeFrom((RoleCreateRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RoleCreateRequest other) {
        if (other == global::world.RoleCreateRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasProfession) {
          Profession = other.Profession;
        }
        if (other.HasSex) {
          Sex = other.Sex;
        }
        if (other.HasFacialForm) {
          FacialForm = other.FacialForm;
        }
        if (other.HasFacialTexture) {
          FacialTexture = other.FacialTexture;
        }
        if (other.HasHair) {
          Hair = other.Hair;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_roleCreateRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _roleCreateRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 16: {
              result.hasProfession = input.ReadInt32(ref result.profession_);
              break;
            }
            case 24: {
              result.hasSex = input.ReadInt32(ref result.sex_);
              break;
            }
            case 32: {
              result.hasFacialForm = input.ReadInt32(ref result.facialForm_);
              break;
            }
            case 40: {
              result.hasFacialTexture = input.ReadInt32(ref result.facialTexture_);
              break;
            }
            case 48: {
              result.hasHair = input.ReadInt32(ref result.hair_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasProfession {
        get { return result.hasProfession; }
      }
      public int Profession {
        get { return result.Profession; }
        set { SetProfession(value); }
      }
      public Builder SetProfession(int value) {
        PrepareBuilder();
        result.hasProfession = true;
        result.profession_ = value;
        return this;
      }
      public Builder ClearProfession() {
        PrepareBuilder();
        result.hasProfession = false;
        result.profession_ = 0;
        return this;
      }
      
      public bool HasSex {
        get { return result.hasSex; }
      }
      public int Sex {
        get { return result.Sex; }
        set { SetSex(value); }
      }
      public Builder SetSex(int value) {
        PrepareBuilder();
        result.hasSex = true;
        result.sex_ = value;
        return this;
      }
      public Builder ClearSex() {
        PrepareBuilder();
        result.hasSex = false;
        result.sex_ = 0;
        return this;
      }
      
      public bool HasFacialForm {
        get { return result.hasFacialForm; }
      }
      public int FacialForm {
        get { return result.FacialForm; }
        set { SetFacialForm(value); }
      }
      public Builder SetFacialForm(int value) {
        PrepareBuilder();
        result.hasFacialForm = true;
        result.facialForm_ = value;
        return this;
      }
      public Builder ClearFacialForm() {
        PrepareBuilder();
        result.hasFacialForm = false;
        result.facialForm_ = 0;
        return this;
      }
      
      public bool HasFacialTexture {
        get { return result.hasFacialTexture; }
      }
      public int FacialTexture {
        get { return result.FacialTexture; }
        set { SetFacialTexture(value); }
      }
      public Builder SetFacialTexture(int value) {
        PrepareBuilder();
        result.hasFacialTexture = true;
        result.facialTexture_ = value;
        return this;
      }
      public Builder ClearFacialTexture() {
        PrepareBuilder();
        result.hasFacialTexture = false;
        result.facialTexture_ = 0;
        return this;
      }
      
      public bool HasHair {
        get { return result.hasHair; }
      }
      public int Hair {
        get { return result.Hair; }
        set { SetHair(value); }
      }
      public Builder SetHair(int value) {
        PrepareBuilder();
        result.hasHair = true;
        result.hair_ = value;
        return this;
      }
      public Builder ClearHair() {
        PrepareBuilder();
        result.hasHair = false;
        result.hair_ = 0;
        return this;
      }
    }
    static RoleCreateRequest() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RoleSelectRequest : pb::GeneratedMessage<RoleSelectRequest, RoleSelectRequest.Builder> {
    private RoleSelectRequest() { }
    private static readonly RoleSelectRequest defaultInstance = new RoleSelectRequest().MakeReadOnly();
    private static readonly string[] _roleSelectRequestFieldNames = new string[] { "index" };
    private static readonly uint[] _roleSelectRequestFieldTags = new uint[] { 8 };
    public static RoleSelectRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RoleSelectRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RoleSelectRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_RoleSelectRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RoleSelectRequest, RoleSelectRequest.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_RoleSelectRequest__FieldAccessorTable; }
    }
    
    public const int IndexFieldNumber = 1;
    private bool hasIndex;
    private int index_;
    public bool HasIndex {
      get { return hasIndex; }
    }
    public int Index {
      get { return index_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasIndex) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _roleSelectRequestFieldNames;
      if (hasIndex) {
        output.WriteInt32(1, field_names[0], Index);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Index);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RoleSelectRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoleSelectRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoleSelectRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoleSelectRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoleSelectRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoleSelectRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RoleSelectRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RoleSelectRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RoleSelectRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoleSelectRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RoleSelectRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RoleSelectRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RoleSelectRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RoleSelectRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RoleSelectRequest result;
      
      private RoleSelectRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RoleSelectRequest original = result;
          result = new RoleSelectRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RoleSelectRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.RoleSelectRequest.Descriptor; }
      }
      
      public override RoleSelectRequest DefaultInstanceForType {
        get { return global::world.RoleSelectRequest.DefaultInstance; }
      }
      
      public override RoleSelectRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RoleSelectRequest) {
          return MergeFrom((RoleSelectRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RoleSelectRequest other) {
        if (other == global::world.RoleSelectRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIndex) {
          Index = other.Index;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_roleSelectRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _roleSelectRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIndex = input.ReadInt32(ref result.index_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasIndex {
        get { return result.hasIndex; }
      }
      public int Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      public Builder SetIndex(int value) {
        PrepareBuilder();
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        PrepareBuilder();
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
    }
    static RoleSelectRequest() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MoveStylerRequest : pb::GeneratedMessage<MoveStylerRequest, MoveStylerRequest.Builder> {
    private MoveStylerRequest() { }
    private static readonly MoveStylerRequest defaultInstance = new MoveStylerRequest().MakeReadOnly();
    private static readonly string[] _moveStylerRequestFieldNames = new string[] { "styler" };
    private static readonly uint[] _moveStylerRequestFieldTags = new uint[] { 8 };
    public static MoveStylerRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MoveStylerRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MoveStylerRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_MoveStylerRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MoveStylerRequest, MoveStylerRequest.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_MoveStylerRequest__FieldAccessorTable; }
    }
    
    public const int StylerFieldNumber = 1;
    private bool hasStyler;
    private int styler_;
    public bool HasStyler {
      get { return hasStyler; }
    }
    public int Styler {
      get { return styler_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStyler) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _moveStylerRequestFieldNames;
      if (hasStyler) {
        output.WriteInt32(1, field_names[0], Styler);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStyler) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Styler);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MoveStylerRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MoveStylerRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MoveStylerRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MoveStylerRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MoveStylerRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MoveStylerRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MoveStylerRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MoveStylerRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MoveStylerRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MoveStylerRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MoveStylerRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MoveStylerRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MoveStylerRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MoveStylerRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MoveStylerRequest result;
      
      private MoveStylerRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          MoveStylerRequest original = result;
          result = new MoveStylerRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MoveStylerRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.MoveStylerRequest.Descriptor; }
      }
      
      public override MoveStylerRequest DefaultInstanceForType {
        get { return global::world.MoveStylerRequest.DefaultInstance; }
      }
      
      public override MoveStylerRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MoveStylerRequest) {
          return MergeFrom((MoveStylerRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MoveStylerRequest other) {
        if (other == global::world.MoveStylerRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStyler) {
          Styler = other.Styler;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_moveStylerRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _moveStylerRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStyler = input.ReadInt32(ref result.styler_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStyler {
        get { return result.hasStyler; }
      }
      public int Styler {
        get { return result.Styler; }
        set { SetStyler(value); }
      }
      public Builder SetStyler(int value) {
        PrepareBuilder();
        result.hasStyler = true;
        result.styler_ = value;
        return this;
      }
      public Builder ClearStyler() {
        PrepareBuilder();
        result.hasStyler = false;
        result.styler_ = 0;
        return this;
      }
    }
    static MoveStylerRequest() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MoveDirectRequest : pb::GeneratedMessage<MoveDirectRequest, MoveDirectRequest.Builder> {
    private MoveDirectRequest() { }
    private static readonly MoveDirectRequest defaultInstance = new MoveDirectRequest().MakeReadOnly();
    private static readonly string[] _moveDirectRequestFieldNames = new string[] { "d", "flags" };
    private static readonly uint[] _moveDirectRequestFieldTags = new uint[] { 13, 16 };
    public static MoveDirectRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MoveDirectRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MoveDirectRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_MoveDirectRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MoveDirectRequest, MoveDirectRequest.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_MoveDirectRequest__FieldAccessorTable; }
    }
    
    public const int DFieldNumber = 1;
    private bool hasD;
    private float d_;
    public bool HasD {
      get { return hasD; }
    }
    public float D {
      get { return d_; }
    }
    
    public const int FlagsFieldNumber = 2;
    private bool hasFlags;
    private int flags_;
    public bool HasFlags {
      get { return hasFlags; }
    }
    public int Flags {
      get { return flags_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasD) return false;
        if (!hasFlags) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _moveDirectRequestFieldNames;
      if (hasD) {
        output.WriteFloat(1, field_names[0], D);
      }
      if (hasFlags) {
        output.WriteInt32(2, field_names[1], Flags);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasD) {
          size += pb::CodedOutputStream.ComputeFloatSize(1, D);
        }
        if (hasFlags) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Flags);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MoveDirectRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MoveDirectRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MoveDirectRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MoveDirectRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MoveDirectRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MoveDirectRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MoveDirectRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MoveDirectRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MoveDirectRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MoveDirectRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MoveDirectRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MoveDirectRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MoveDirectRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MoveDirectRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MoveDirectRequest result;
      
      private MoveDirectRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          MoveDirectRequest original = result;
          result = new MoveDirectRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MoveDirectRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.MoveDirectRequest.Descriptor; }
      }
      
      public override MoveDirectRequest DefaultInstanceForType {
        get { return global::world.MoveDirectRequest.DefaultInstance; }
      }
      
      public override MoveDirectRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MoveDirectRequest) {
          return MergeFrom((MoveDirectRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MoveDirectRequest other) {
        if (other == global::world.MoveDirectRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasD) {
          D = other.D;
        }
        if (other.HasFlags) {
          Flags = other.Flags;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_moveDirectRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _moveDirectRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 13: {
              result.hasD = input.ReadFloat(ref result.d_);
              break;
            }
            case 16: {
              result.hasFlags = input.ReadInt32(ref result.flags_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasD {
        get { return result.hasD; }
      }
      public float D {
        get { return result.D; }
        set { SetD(value); }
      }
      public Builder SetD(float value) {
        PrepareBuilder();
        result.hasD = true;
        result.d_ = value;
        return this;
      }
      public Builder ClearD() {
        PrepareBuilder();
        result.hasD = false;
        result.d_ = 0F;
        return this;
      }
      
      public bool HasFlags {
        get { return result.hasFlags; }
      }
      public int Flags {
        get { return result.Flags; }
        set { SetFlags(value); }
      }
      public Builder SetFlags(int value) {
        PrepareBuilder();
        result.hasFlags = true;
        result.flags_ = value;
        return this;
      }
      public Builder ClearFlags() {
        PrepareBuilder();
        result.hasFlags = false;
        result.flags_ = 0;
        return this;
      }
    }
    static MoveDirectRequest() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SkillTargetRequest : pb::GeneratedMessage<SkillTargetRequest, SkillTargetRequest.Builder> {
    private SkillTargetRequest() { }
    private static readonly SkillTargetRequest defaultInstance = new SkillTargetRequest().MakeReadOnly();
    private static readonly string[] _skillTargetRequestFieldNames = new string[] { "skill_id", "target" };
    private static readonly uint[] _skillTargetRequestFieldTags = new uint[] { 8, 16 };
    public static SkillTargetRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkillTargetRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SkillTargetRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_SkillTargetRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SkillTargetRequest, SkillTargetRequest.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_SkillTargetRequest__FieldAccessorTable; }
    }
    
    public const int SkillIdFieldNumber = 1;
    private bool hasSkillId;
    private int skillId_;
    public bool HasSkillId {
      get { return hasSkillId; }
    }
    public int SkillId {
      get { return skillId_; }
    }
    
    public const int TargetFieldNumber = 2;
    private bool hasTarget;
    private int target_;
    public bool HasTarget {
      get { return hasTarget; }
    }
    public int Target {
      get { return target_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSkillId) return false;
        if (!hasTarget) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _skillTargetRequestFieldNames;
      if (hasSkillId) {
        output.WriteInt32(1, field_names[0], SkillId);
      }
      if (hasTarget) {
        output.WriteInt32(2, field_names[1], Target);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSkillId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, SkillId);
        }
        if (hasTarget) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Target);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SkillTargetRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillTargetRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillTargetRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillTargetRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillTargetRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillTargetRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkillTargetRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkillTargetRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkillTargetRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillTargetRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SkillTargetRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkillTargetRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SkillTargetRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SkillTargetRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SkillTargetRequest result;
      
      private SkillTargetRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          SkillTargetRequest original = result;
          result = new SkillTargetRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SkillTargetRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.SkillTargetRequest.Descriptor; }
      }
      
      public override SkillTargetRequest DefaultInstanceForType {
        get { return global::world.SkillTargetRequest.DefaultInstance; }
      }
      
      public override SkillTargetRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SkillTargetRequest) {
          return MergeFrom((SkillTargetRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkillTargetRequest other) {
        if (other == global::world.SkillTargetRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSkillId) {
          SkillId = other.SkillId;
        }
        if (other.HasTarget) {
          Target = other.Target;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_skillTargetRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _skillTargetRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSkillId = input.ReadInt32(ref result.skillId_);
              break;
            }
            case 16: {
              result.hasTarget = input.ReadInt32(ref result.target_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSkillId {
        get { return result.hasSkillId; }
      }
      public int SkillId {
        get { return result.SkillId; }
        set { SetSkillId(value); }
      }
      public Builder SetSkillId(int value) {
        PrepareBuilder();
        result.hasSkillId = true;
        result.skillId_ = value;
        return this;
      }
      public Builder ClearSkillId() {
        PrepareBuilder();
        result.hasSkillId = false;
        result.skillId_ = 0;
        return this;
      }
      
      public bool HasTarget {
        get { return result.hasTarget; }
      }
      public int Target {
        get { return result.Target; }
        set { SetTarget(value); }
      }
      public Builder SetTarget(int value) {
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = value;
        return this;
      }
      public Builder ClearTarget() {
        PrepareBuilder();
        result.hasTarget = false;
        result.target_ = 0;
        return this;
      }
    }
    static SkillTargetRequest() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SkillPostionRequest : pb::GeneratedMessage<SkillPostionRequest, SkillPostionRequest.Builder> {
    private SkillPostionRequest() { }
    private static readonly SkillPostionRequest defaultInstance = new SkillPostionRequest().MakeReadOnly();
    private static readonly string[] _skillPostionRequestFieldNames = new string[] { "point", "skill_id" };
    private static readonly uint[] _skillPostionRequestFieldTags = new uint[] { 18, 8 };
    public static SkillPostionRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkillPostionRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SkillPostionRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_SkillPostionRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SkillPostionRequest, SkillPostionRequest.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_SkillPostionRequest__FieldAccessorTable; }
    }
    
    public const int SkillIdFieldNumber = 1;
    private bool hasSkillId;
    private int skillId_;
    public bool HasSkillId {
      get { return hasSkillId; }
    }
    public int SkillId {
      get { return skillId_; }
    }
    
    public const int PointFieldNumber = 2;
    private bool hasPoint;
    private global::core.PointF point_;
    public bool HasPoint {
      get { return hasPoint; }
    }
    public global::core.PointF Point {
      get { return point_ ?? global::core.PointF.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSkillId) return false;
        if (!hasPoint) return false;
        if (!Point.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _skillPostionRequestFieldNames;
      if (hasSkillId) {
        output.WriteInt32(1, field_names[1], SkillId);
      }
      if (hasPoint) {
        output.WriteMessage(2, field_names[0], Point);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSkillId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, SkillId);
        }
        if (hasPoint) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Point);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SkillPostionRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillPostionRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillPostionRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillPostionRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillPostionRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillPostionRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkillPostionRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkillPostionRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkillPostionRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillPostionRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SkillPostionRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkillPostionRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SkillPostionRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SkillPostionRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SkillPostionRequest result;
      
      private SkillPostionRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          SkillPostionRequest original = result;
          result = new SkillPostionRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SkillPostionRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.SkillPostionRequest.Descriptor; }
      }
      
      public override SkillPostionRequest DefaultInstanceForType {
        get { return global::world.SkillPostionRequest.DefaultInstance; }
      }
      
      public override SkillPostionRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SkillPostionRequest) {
          return MergeFrom((SkillPostionRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkillPostionRequest other) {
        if (other == global::world.SkillPostionRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSkillId) {
          SkillId = other.SkillId;
        }
        if (other.HasPoint) {
          MergePoint(other.Point);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_skillPostionRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _skillPostionRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSkillId = input.ReadInt32(ref result.skillId_);
              break;
            }
            case 18: {
              global::core.PointF.Builder subBuilder = global::core.PointF.CreateBuilder();
              if (result.hasPoint) {
                subBuilder.MergeFrom(Point);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Point = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSkillId {
        get { return result.hasSkillId; }
      }
      public int SkillId {
        get { return result.SkillId; }
        set { SetSkillId(value); }
      }
      public Builder SetSkillId(int value) {
        PrepareBuilder();
        result.hasSkillId = true;
        result.skillId_ = value;
        return this;
      }
      public Builder ClearSkillId() {
        PrepareBuilder();
        result.hasSkillId = false;
        result.skillId_ = 0;
        return this;
      }
      
      public bool HasPoint {
       get { return result.hasPoint; }
      }
      public global::core.PointF Point {
        get { return result.Point; }
        set { SetPoint(value); }
      }
      public Builder SetPoint(global::core.PointF value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPoint = true;
        result.point_ = value;
        return this;
      }
      public Builder SetPoint(global::core.PointF.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPoint = true;
        result.point_ = builderForValue.Build();
        return this;
      }
      public Builder MergePoint(global::core.PointF value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPoint &&
            result.point_ != global::core.PointF.DefaultInstance) {
            result.point_ = global::core.PointF.CreateBuilder(result.point_).MergeFrom(value).BuildPartial();
        } else {
          result.point_ = value;
        }
        result.hasPoint = true;
        return this;
      }
      public Builder ClearPoint() {
        PrepareBuilder();
        result.hasPoint = false;
        result.point_ = null;
        return this;
      }
    }
    static SkillPostionRequest() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MoveItemRequest : pb::GeneratedMessage<MoveItemRequest, MoveItemRequest.Builder> {
    private MoveItemRequest() { }
    private static readonly MoveItemRequest defaultInstance = new MoveItemRequest().MakeReadOnly();
    private static readonly string[] _moveItemRequestFieldNames = new string[] { "dst", "src" };
    private static readonly uint[] _moveItemRequestFieldTags = new uint[] { 16, 8 };
    public static MoveItemRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MoveItemRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MoveItemRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_MoveItemRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MoveItemRequest, MoveItemRequest.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_MoveItemRequest__FieldAccessorTable; }
    }
    
    public const int SrcFieldNumber = 1;
    private bool hasSrc;
    private int src_;
    public bool HasSrc {
      get { return hasSrc; }
    }
    public int Src {
      get { return src_; }
    }
    
    public const int DstFieldNumber = 2;
    private bool hasDst;
    private int dst_;
    public bool HasDst {
      get { return hasDst; }
    }
    public int Dst {
      get { return dst_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSrc) return false;
        if (!hasDst) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _moveItemRequestFieldNames;
      if (hasSrc) {
        output.WriteInt32(1, field_names[1], Src);
      }
      if (hasDst) {
        output.WriteInt32(2, field_names[0], Dst);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSrc) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Src);
        }
        if (hasDst) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Dst);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MoveItemRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MoveItemRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MoveItemRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MoveItemRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MoveItemRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MoveItemRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MoveItemRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MoveItemRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MoveItemRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MoveItemRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MoveItemRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MoveItemRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MoveItemRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MoveItemRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MoveItemRequest result;
      
      private MoveItemRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          MoveItemRequest original = result;
          result = new MoveItemRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MoveItemRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.MoveItemRequest.Descriptor; }
      }
      
      public override MoveItemRequest DefaultInstanceForType {
        get { return global::world.MoveItemRequest.DefaultInstance; }
      }
      
      public override MoveItemRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MoveItemRequest) {
          return MergeFrom((MoveItemRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MoveItemRequest other) {
        if (other == global::world.MoveItemRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSrc) {
          Src = other.Src;
        }
        if (other.HasDst) {
          Dst = other.Dst;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_moveItemRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _moveItemRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSrc = input.ReadInt32(ref result.src_);
              break;
            }
            case 16: {
              result.hasDst = input.ReadInt32(ref result.dst_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSrc {
        get { return result.hasSrc; }
      }
      public int Src {
        get { return result.Src; }
        set { SetSrc(value); }
      }
      public Builder SetSrc(int value) {
        PrepareBuilder();
        result.hasSrc = true;
        result.src_ = value;
        return this;
      }
      public Builder ClearSrc() {
        PrepareBuilder();
        result.hasSrc = false;
        result.src_ = 0;
        return this;
      }
      
      public bool HasDst {
        get { return result.hasDst; }
      }
      public int Dst {
        get { return result.Dst; }
        set { SetDst(value); }
      }
      public Builder SetDst(int value) {
        PrepareBuilder();
        result.hasDst = true;
        result.dst_ = value;
        return this;
      }
      public Builder ClearDst() {
        PrepareBuilder();
        result.hasDst = false;
        result.dst_ = 0;
        return this;
      }
    }
    static MoveItemRequest() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class ItemRequest : pb::GeneratedMessage<ItemRequest, ItemRequest.Builder> {
    private ItemRequest() { }
    private static readonly ItemRequest defaultInstance = new ItemRequest().MakeReadOnly();
    private static readonly string[] _itemRequestFieldNames = new string[] { "pos" };
    private static readonly uint[] _itemRequestFieldTags = new uint[] { 8 };
    public static ItemRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ItemRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ItemRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_ItemRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ItemRequest, ItemRequest.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_ItemRequest__FieldAccessorTable; }
    }
    
    public const int PosFieldNumber = 1;
    private bool hasPos;
    private int pos_;
    public bool HasPos {
      get { return hasPos; }
    }
    public int Pos {
      get { return pos_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPos) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _itemRequestFieldNames;
      if (hasPos) {
        output.WriteInt32(1, field_names[0], Pos);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPos) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Pos);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static ItemRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ItemRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ItemRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ItemRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ItemRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ItemRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ItemRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ItemRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ItemRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<ItemRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ItemRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ItemRequest result;
      
      private ItemRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ItemRequest original = result;
          result = new ItemRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ItemRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.ItemRequest.Descriptor; }
      }
      
      public override ItemRequest DefaultInstanceForType {
        get { return global::world.ItemRequest.DefaultInstance; }
      }
      
      public override ItemRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ItemRequest) {
          return MergeFrom((ItemRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ItemRequest other) {
        if (other == global::world.ItemRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPos) {
          Pos = other.Pos;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_itemRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _itemRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasPos = input.ReadInt32(ref result.pos_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPos {
        get { return result.hasPos; }
      }
      public int Pos {
        get { return result.Pos; }
        set { SetPos(value); }
      }
      public Builder SetPos(int value) {
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = value;
        return this;
      }
      public Builder ClearPos() {
        PrepareBuilder();
        result.hasPos = false;
        result.pos_ = 0;
        return this;
      }
    }
    static ItemRequest() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class PlayerAttribRequest : pb::GeneratedMessage<PlayerAttribRequest, PlayerAttribRequest.Builder> {
    private PlayerAttribRequest() { }
    private static readonly PlayerAttribRequest defaultInstance = new PlayerAttribRequest().MakeReadOnly();
    private static readonly string[] _playerAttribRequestFieldNames = new string[] { "attrib_index", "name", "value" };
    private static readonly uint[] _playerAttribRequestFieldTags = new uint[] { 16, 10, 24 };
    public static PlayerAttribRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override PlayerAttribRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlayerAttribRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_PlayerAttribRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<PlayerAttribRequest, PlayerAttribRequest.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_PlayerAttribRequest__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int AttribIndexFieldNumber = 2;
    private bool hasAttribIndex;
    private int attribIndex_;
    public bool HasAttribIndex {
      get { return hasAttribIndex; }
    }
    public int AttribIndex {
      get { return attribIndex_; }
    }
    
    public const int ValueFieldNumber = 3;
    private bool hasValue;
    private int value_;
    public bool HasValue {
      get { return hasValue; }
    }
    public int Value {
      get { return value_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasAttribIndex) return false;
        if (!hasValue) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerAttribRequestFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[1], Name);
      }
      if (hasAttribIndex) {
        output.WriteInt32(2, field_names[0], AttribIndex);
      }
      if (hasValue) {
        output.WriteInt32(3, field_names[2], Value);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasAttribIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, AttribIndex);
        }
        if (hasValue) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Value);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static PlayerAttribRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerAttribRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerAttribRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static PlayerAttribRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static PlayerAttribRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerAttribRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static PlayerAttribRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static PlayerAttribRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static PlayerAttribRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static PlayerAttribRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlayerAttribRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(PlayerAttribRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<PlayerAttribRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlayerAttribRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlayerAttribRequest result;
      
      private PlayerAttribRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PlayerAttribRequest original = result;
          result = new PlayerAttribRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlayerAttribRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.PlayerAttribRequest.Descriptor; }
      }
      
      public override PlayerAttribRequest DefaultInstanceForType {
        get { return global::world.PlayerAttribRequest.DefaultInstance; }
      }
      
      public override PlayerAttribRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is PlayerAttribRequest) {
          return MergeFrom((PlayerAttribRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlayerAttribRequest other) {
        if (other == global::world.PlayerAttribRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasAttribIndex) {
          AttribIndex = other.AttribIndex;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerAttribRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerAttribRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 16: {
              result.hasAttribIndex = input.ReadInt32(ref result.attribIndex_);
              break;
            }
            case 24: {
              result.hasValue = input.ReadInt32(ref result.value_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasAttribIndex {
        get { return result.hasAttribIndex; }
      }
      public int AttribIndex {
        get { return result.AttribIndex; }
        set { SetAttribIndex(value); }
      }
      public Builder SetAttribIndex(int value) {
        PrepareBuilder();
        result.hasAttribIndex = true;
        result.attribIndex_ = value;
        return this;
      }
      public Builder ClearAttribIndex() {
        PrepareBuilder();
        result.hasAttribIndex = false;
        result.attribIndex_ = 0;
        return this;
      }
      
      public bool HasValue {
        get { return result.hasValue; }
      }
      public int Value {
        get { return result.Value; }
        set { SetValue(value); }
      }
      public Builder SetValue(int value) {
        PrepareBuilder();
        result.hasValue = true;
        result.value_ = value;
        return this;
      }
      public Builder ClearValue() {
        PrepareBuilder();
        result.hasValue = false;
        result.value_ = 0;
        return this;
      }
    }
    static PlayerAttribRequest() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class MakeItemRequest : pb::GeneratedMessage<MakeItemRequest, MakeItemRequest.Builder> {
    private MakeItemRequest() { }
    private static readonly MakeItemRequest defaultInstance = new MakeItemRequest().MakeReadOnly();
    private static readonly string[] _makeItemRequestFieldNames = new string[] { "class", "count", "level", "name", "template", "unit" };
    private static readonly uint[] _makeItemRequestFieldTags = new uint[] { 40, 48, 32, 10, 24, 16 };
    public static MakeItemRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override MakeItemRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override MakeItemRequest ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_MakeItemRequest__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<MakeItemRequest, MakeItemRequest.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_MakeItemRequest__FieldAccessorTable; }
    }
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int UnitFieldNumber = 2;
    private bool hasUnit;
    private int unit_;
    public bool HasUnit {
      get { return hasUnit; }
    }
    public int Unit {
      get { return unit_; }
    }
    
    public const int TemplateFieldNumber = 3;
    private bool hasTemplate;
    private int template_;
    public bool HasTemplate {
      get { return hasTemplate; }
    }
    public int Template {
      get { return template_; }
    }
    
    public const int LevelFieldNumber = 4;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int ClassFieldNumber = 5;
    private bool hasClass;
    private int class_;
    public bool HasClass {
      get { return hasClass; }
    }
    public int Class {
      get { return class_; }
    }
    
    public const int CountFieldNumber = 6;
    private bool hasCount;
    private int count_;
    public bool HasCount {
      get { return hasCount; }
    }
    public int Count {
      get { return count_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasUnit) return false;
        if (!hasTemplate) return false;
        if (!hasLevel) return false;
        if (!hasClass) return false;
        if (!hasCount) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _makeItemRequestFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[3], Name);
      }
      if (hasUnit) {
        output.WriteInt32(2, field_names[5], Unit);
      }
      if (hasTemplate) {
        output.WriteInt32(3, field_names[4], Template);
      }
      if (hasLevel) {
        output.WriteInt32(4, field_names[2], Level);
      }
      if (hasClass) {
        output.WriteInt32(5, field_names[0], Class);
      }
      if (hasCount) {
        output.WriteInt32(6, field_names[1], Count);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasUnit) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Unit);
        }
        if (hasTemplate) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Template);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Level);
        }
        if (hasClass) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Class);
        }
        if (hasCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Count);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static MakeItemRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MakeItemRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MakeItemRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static MakeItemRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static MakeItemRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MakeItemRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static MakeItemRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static MakeItemRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static MakeItemRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static MakeItemRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private MakeItemRequest MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(MakeItemRequest prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<MakeItemRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(MakeItemRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private MakeItemRequest result;
      
      private MakeItemRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          MakeItemRequest original = result;
          result = new MakeItemRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override MakeItemRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.MakeItemRequest.Descriptor; }
      }
      
      public override MakeItemRequest DefaultInstanceForType {
        get { return global::world.MakeItemRequest.DefaultInstance; }
      }
      
      public override MakeItemRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is MakeItemRequest) {
          return MergeFrom((MakeItemRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(MakeItemRequest other) {
        if (other == global::world.MakeItemRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasUnit) {
          Unit = other.Unit;
        }
        if (other.HasTemplate) {
          Template = other.Template;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasClass) {
          Class = other.Class;
        }
        if (other.HasCount) {
          Count = other.Count;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_makeItemRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _makeItemRequestFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 16: {
              result.hasUnit = input.ReadInt32(ref result.unit_);
              break;
            }
            case 24: {
              result.hasTemplate = input.ReadInt32(ref result.template_);
              break;
            }
            case 32: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 40: {
              result.hasClass = input.ReadInt32(ref result.class_);
              break;
            }
            case 48: {
              result.hasCount = input.ReadInt32(ref result.count_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasUnit {
        get { return result.hasUnit; }
      }
      public int Unit {
        get { return result.Unit; }
        set { SetUnit(value); }
      }
      public Builder SetUnit(int value) {
        PrepareBuilder();
        result.hasUnit = true;
        result.unit_ = value;
        return this;
      }
      public Builder ClearUnit() {
        PrepareBuilder();
        result.hasUnit = false;
        result.unit_ = 0;
        return this;
      }
      
      public bool HasTemplate {
        get { return result.hasTemplate; }
      }
      public int Template {
        get { return result.Template; }
        set { SetTemplate(value); }
      }
      public Builder SetTemplate(int value) {
        PrepareBuilder();
        result.hasTemplate = true;
        result.template_ = value;
        return this;
      }
      public Builder ClearTemplate() {
        PrepareBuilder();
        result.hasTemplate = false;
        result.template_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasClass {
        get { return result.hasClass; }
      }
      public int Class {
        get { return result.Class; }
        set { SetClass(value); }
      }
      public Builder SetClass(int value) {
        PrepareBuilder();
        result.hasClass = true;
        result.class_ = value;
        return this;
      }
      public Builder ClearClass() {
        PrepareBuilder();
        result.hasClass = false;
        result.class_ = 0;
        return this;
      }
      
      public bool HasCount {
        get { return result.hasCount; }
      }
      public int Count {
        get { return result.Count; }
        set { SetCount(value); }
      }
      public Builder SetCount(int value) {
        PrepareBuilder();
        result.hasCount = true;
        result.count_ = value;
        return this;
      }
      public Builder ClearCount() {
        PrepareBuilder();
        result.hasCount = false;
        result.count_ = 0;
        return this;
      }
    }
    static MakeItemRequest() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class OtherCharactor : pb::GeneratedMessage<OtherCharactor, OtherCharactor.Builder> {
    private OtherCharactor() { }
    private static readonly OtherCharactor defaultInstance = new OtherCharactor().MakeReadOnly();
    private static readonly string[] _otherCharactorFieldNames = new string[] { "action", "d", "hp", "id", "level", "max_hp", "max_mp", "move_state", "mp", "pos", "speed", "state", "target_id", "target_pos", "type" };
    private static readonly uint[] _otherCharactorFieldTags = new uint[] { 56, 37, 112, 8, 72, 96, 104, 48, 120, 26, 69, 40, 80, 90, 16 };
    public static OtherCharactor DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OtherCharactor DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override OtherCharactor ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_OtherCharactor__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OtherCharactor, OtherCharactor.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_OtherCharactor__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private int type_;
    public bool HasType {
      get { return hasType; }
    }
    public int Type {
      get { return type_; }
    }
    
    public const int PosFieldNumber = 3;
    private bool hasPos;
    private global::core.PointF pos_;
    public bool HasPos {
      get { return hasPos; }
    }
    public global::core.PointF Pos {
      get { return pos_ ?? global::core.PointF.DefaultInstance; }
    }
    
    public const int DFieldNumber = 4;
    private bool hasD;
    private float d_;
    public bool HasD {
      get { return hasD; }
    }
    public float D {
      get { return d_; }
    }
    
    public const int StateFieldNumber = 5;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int MoveStateFieldNumber = 6;
    private bool hasMoveState;
    private int moveState_;
    public bool HasMoveState {
      get { return hasMoveState; }
    }
    public int MoveState {
      get { return moveState_; }
    }
    
    public const int ActionFieldNumber = 7;
    private bool hasAction;
    private int action_;
    public bool HasAction {
      get { return hasAction; }
    }
    public int Action {
      get { return action_; }
    }
    
    public const int SpeedFieldNumber = 8;
    private bool hasSpeed;
    private float speed_;
    public bool HasSpeed {
      get { return hasSpeed; }
    }
    public float Speed {
      get { return speed_; }
    }
    
    public const int LevelFieldNumber = 9;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int TargetIdFieldNumber = 10;
    private bool hasTargetId;
    private int targetId_;
    public bool HasTargetId {
      get { return hasTargetId; }
    }
    public int TargetId {
      get { return targetId_; }
    }
    
    public const int TargetPosFieldNumber = 11;
    private bool hasTargetPos;
    private global::core.PointF targetPos_;
    public bool HasTargetPos {
      get { return hasTargetPos; }
    }
    public global::core.PointF TargetPos {
      get { return targetPos_ ?? global::core.PointF.DefaultInstance; }
    }
    
    public const int MaxHpFieldNumber = 12;
    private bool hasMaxHp;
    private int maxHp_;
    public bool HasMaxHp {
      get { return hasMaxHp; }
    }
    public int MaxHp {
      get { return maxHp_; }
    }
    
    public const int MaxMpFieldNumber = 13;
    private bool hasMaxMp;
    private int maxMp_;
    public bool HasMaxMp {
      get { return hasMaxMp; }
    }
    public int MaxMp {
      get { return maxMp_; }
    }
    
    public const int HpFieldNumber = 14;
    private bool hasHp;
    private int hp_;
    public bool HasHp {
      get { return hasHp; }
    }
    public int Hp {
      get { return hp_; }
    }
    
    public const int MpFieldNumber = 15;
    private bool hasMp;
    private int mp_;
    public bool HasMp {
      get { return hasMp; }
    }
    public int Mp {
      get { return mp_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasType) return false;
        if (!hasPos) return false;
        if (!hasD) return false;
        if (!hasState) return false;
        if (!hasMoveState) return false;
        if (!hasAction) return false;
        if (!hasSpeed) return false;
        if (!hasLevel) return false;
        if (!hasMaxHp) return false;
        if (!hasMaxMp) return false;
        if (!hasHp) return false;
        if (!hasMp) return false;
        if (!Pos.IsInitialized) return false;
        if (HasTargetPos) {
          if (!TargetPos.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _otherCharactorFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[3], Id);
      }
      if (hasType) {
        output.WriteInt32(2, field_names[14], Type);
      }
      if (hasPos) {
        output.WriteMessage(3, field_names[9], Pos);
      }
      if (hasD) {
        output.WriteFloat(4, field_names[1], D);
      }
      if (hasState) {
        output.WriteInt32(5, field_names[11], State);
      }
      if (hasMoveState) {
        output.WriteInt32(6, field_names[7], MoveState);
      }
      if (hasAction) {
        output.WriteInt32(7, field_names[0], Action);
      }
      if (hasSpeed) {
        output.WriteFloat(8, field_names[10], Speed);
      }
      if (hasLevel) {
        output.WriteInt32(9, field_names[4], Level);
      }
      if (hasTargetId) {
        output.WriteInt32(10, field_names[12], TargetId);
      }
      if (hasTargetPos) {
        output.WriteMessage(11, field_names[13], TargetPos);
      }
      if (hasMaxHp) {
        output.WriteInt32(12, field_names[5], MaxHp);
      }
      if (hasMaxMp) {
        output.WriteInt32(13, field_names[6], MaxMp);
      }
      if (hasHp) {
        output.WriteInt32(14, field_names[2], Hp);
      }
      if (hasMp) {
        output.WriteInt32(15, field_names[8], Mp);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
        }
        if (hasPos) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Pos);
        }
        if (hasD) {
          size += pb::CodedOutputStream.ComputeFloatSize(4, D);
        }
        if (hasState) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, State);
        }
        if (hasMoveState) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, MoveState);
        }
        if (hasAction) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, Action);
        }
        if (hasSpeed) {
          size += pb::CodedOutputStream.ComputeFloatSize(8, Speed);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, Level);
        }
        if (hasTargetId) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, TargetId);
        }
        if (hasTargetPos) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, TargetPos);
        }
        if (hasMaxHp) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, MaxHp);
        }
        if (hasMaxMp) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, MaxMp);
        }
        if (hasHp) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, Hp);
        }
        if (hasMp) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, Mp);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OtherCharactor ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OtherCharactor ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OtherCharactor ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OtherCharactor ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OtherCharactor ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OtherCharactor ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OtherCharactor ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OtherCharactor ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OtherCharactor ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OtherCharactor ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private OtherCharactor MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OtherCharactor prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<OtherCharactor, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(OtherCharactor cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private OtherCharactor result;
      
      private OtherCharactor PrepareBuilder() {
        if (resultIsReadOnly) {
          OtherCharactor original = result;
          result = new OtherCharactor();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override OtherCharactor MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.OtherCharactor.Descriptor; }
      }
      
      public override OtherCharactor DefaultInstanceForType {
        get { return global::world.OtherCharactor.DefaultInstance; }
      }
      
      public override OtherCharactor BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OtherCharactor) {
          return MergeFrom((OtherCharactor) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OtherCharactor other) {
        if (other == global::world.OtherCharactor.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasPos) {
          MergePos(other.Pos);
        }
        if (other.HasD) {
          D = other.D;
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasMoveState) {
          MoveState = other.MoveState;
        }
        if (other.HasAction) {
          Action = other.Action;
        }
        if (other.HasSpeed) {
          Speed = other.Speed;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasTargetId) {
          TargetId = other.TargetId;
        }
        if (other.HasTargetPos) {
          MergeTargetPos(other.TargetPos);
        }
        if (other.HasMaxHp) {
          MaxHp = other.MaxHp;
        }
        if (other.HasMaxMp) {
          MaxMp = other.MaxMp;
        }
        if (other.HasHp) {
          Hp = other.Hp;
        }
        if (other.HasMp) {
          Mp = other.Mp;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_otherCharactorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _otherCharactorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasType = input.ReadInt32(ref result.type_);
              break;
            }
            case 26: {
              global::core.PointF.Builder subBuilder = global::core.PointF.CreateBuilder();
              if (result.hasPos) {
                subBuilder.MergeFrom(Pos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pos = subBuilder.BuildPartial();
              break;
            }
            case 37: {
              result.hasD = input.ReadFloat(ref result.d_);
              break;
            }
            case 40: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 48: {
              result.hasMoveState = input.ReadInt32(ref result.moveState_);
              break;
            }
            case 56: {
              result.hasAction = input.ReadInt32(ref result.action_);
              break;
            }
            case 69: {
              result.hasSpeed = input.ReadFloat(ref result.speed_);
              break;
            }
            case 72: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 80: {
              result.hasTargetId = input.ReadInt32(ref result.targetId_);
              break;
            }
            case 90: {
              global::core.PointF.Builder subBuilder = global::core.PointF.CreateBuilder();
              if (result.hasTargetPos) {
                subBuilder.MergeFrom(TargetPos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              TargetPos = subBuilder.BuildPartial();
              break;
            }
            case 96: {
              result.hasMaxHp = input.ReadInt32(ref result.maxHp_);
              break;
            }
            case 104: {
              result.hasMaxMp = input.ReadInt32(ref result.maxMp_);
              break;
            }
            case 112: {
              result.hasHp = input.ReadInt32(ref result.hp_);
              break;
            }
            case 120: {
              result.hasMp = input.ReadInt32(ref result.mp_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasType {
        get { return result.hasType; }
      }
      public int Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(int value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = 0;
        return this;
      }
      
      public bool HasPos {
       get { return result.hasPos; }
      }
      public global::core.PointF Pos {
        get { return result.Pos; }
        set { SetPos(value); }
      }
      public Builder SetPos(global::core.PointF value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = value;
        return this;
      }
      public Builder SetPos(global::core.PointF.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = builderForValue.Build();
        return this;
      }
      public Builder MergePos(global::core.PointF value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPos &&
            result.pos_ != global::core.PointF.DefaultInstance) {
            result.pos_ = global::core.PointF.CreateBuilder(result.pos_).MergeFrom(value).BuildPartial();
        } else {
          result.pos_ = value;
        }
        result.hasPos = true;
        return this;
      }
      public Builder ClearPos() {
        PrepareBuilder();
        result.hasPos = false;
        result.pos_ = null;
        return this;
      }
      
      public bool HasD {
        get { return result.hasD; }
      }
      public float D {
        get { return result.D; }
        set { SetD(value); }
      }
      public Builder SetD(float value) {
        PrepareBuilder();
        result.hasD = true;
        result.d_ = value;
        return this;
      }
      public Builder ClearD() {
        PrepareBuilder();
        result.hasD = false;
        result.d_ = 0F;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public bool HasMoveState {
        get { return result.hasMoveState; }
      }
      public int MoveState {
        get { return result.MoveState; }
        set { SetMoveState(value); }
      }
      public Builder SetMoveState(int value) {
        PrepareBuilder();
        result.hasMoveState = true;
        result.moveState_ = value;
        return this;
      }
      public Builder ClearMoveState() {
        PrepareBuilder();
        result.hasMoveState = false;
        result.moveState_ = 0;
        return this;
      }
      
      public bool HasAction {
        get { return result.hasAction; }
      }
      public int Action {
        get { return result.Action; }
        set { SetAction(value); }
      }
      public Builder SetAction(int value) {
        PrepareBuilder();
        result.hasAction = true;
        result.action_ = value;
        return this;
      }
      public Builder ClearAction() {
        PrepareBuilder();
        result.hasAction = false;
        result.action_ = 0;
        return this;
      }
      
      public bool HasSpeed {
        get { return result.hasSpeed; }
      }
      public float Speed {
        get { return result.Speed; }
        set { SetSpeed(value); }
      }
      public Builder SetSpeed(float value) {
        PrepareBuilder();
        result.hasSpeed = true;
        result.speed_ = value;
        return this;
      }
      public Builder ClearSpeed() {
        PrepareBuilder();
        result.hasSpeed = false;
        result.speed_ = 0F;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasTargetId {
        get { return result.hasTargetId; }
      }
      public int TargetId {
        get { return result.TargetId; }
        set { SetTargetId(value); }
      }
      public Builder SetTargetId(int value) {
        PrepareBuilder();
        result.hasTargetId = true;
        result.targetId_ = value;
        return this;
      }
      public Builder ClearTargetId() {
        PrepareBuilder();
        result.hasTargetId = false;
        result.targetId_ = 0;
        return this;
      }
      
      public bool HasTargetPos {
       get { return result.hasTargetPos; }
      }
      public global::core.PointF TargetPos {
        get { return result.TargetPos; }
        set { SetTargetPos(value); }
      }
      public Builder SetTargetPos(global::core.PointF value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTargetPos = true;
        result.targetPos_ = value;
        return this;
      }
      public Builder SetTargetPos(global::core.PointF.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTargetPos = true;
        result.targetPos_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTargetPos(global::core.PointF value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTargetPos &&
            result.targetPos_ != global::core.PointF.DefaultInstance) {
            result.targetPos_ = global::core.PointF.CreateBuilder(result.targetPos_).MergeFrom(value).BuildPartial();
        } else {
          result.targetPos_ = value;
        }
        result.hasTargetPos = true;
        return this;
      }
      public Builder ClearTargetPos() {
        PrepareBuilder();
        result.hasTargetPos = false;
        result.targetPos_ = null;
        return this;
      }
      
      public bool HasMaxHp {
        get { return result.hasMaxHp; }
      }
      public int MaxHp {
        get { return result.MaxHp; }
        set { SetMaxHp(value); }
      }
      public Builder SetMaxHp(int value) {
        PrepareBuilder();
        result.hasMaxHp = true;
        result.maxHp_ = value;
        return this;
      }
      public Builder ClearMaxHp() {
        PrepareBuilder();
        result.hasMaxHp = false;
        result.maxHp_ = 0;
        return this;
      }
      
      public bool HasMaxMp {
        get { return result.hasMaxMp; }
      }
      public int MaxMp {
        get { return result.MaxMp; }
        set { SetMaxMp(value); }
      }
      public Builder SetMaxMp(int value) {
        PrepareBuilder();
        result.hasMaxMp = true;
        result.maxMp_ = value;
        return this;
      }
      public Builder ClearMaxMp() {
        PrepareBuilder();
        result.hasMaxMp = false;
        result.maxMp_ = 0;
        return this;
      }
      
      public bool HasHp {
        get { return result.hasHp; }
      }
      public int Hp {
        get { return result.Hp; }
        set { SetHp(value); }
      }
      public Builder SetHp(int value) {
        PrepareBuilder();
        result.hasHp = true;
        result.hp_ = value;
        return this;
      }
      public Builder ClearHp() {
        PrepareBuilder();
        result.hasHp = false;
        result.hp_ = 0;
        return this;
      }
      
      public bool HasMp {
        get { return result.hasMp; }
      }
      public int Mp {
        get { return result.Mp; }
        set { SetMp(value); }
      }
      public Builder SetMp(int value) {
        PrepareBuilder();
        result.hasMp = true;
        result.mp_ = value;
        return this;
      }
      public Builder ClearMp() {
        PrepareBuilder();
        result.hasMp = false;
        result.mp_ = 0;
        return this;
      }
    }
    static OtherCharactor() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class OtherPlayer : pb::GeneratedMessage<OtherPlayer, OtherPlayer.Builder> {
    private OtherPlayer() { }
    private static readonly OtherPlayer defaultInstance = new OtherPlayer().MakeReadOnly();
    private static readonly string[] _otherPlayerFieldNames = new string[] { "avatar", "charactor", "consortia", "dress_mode", "equips", "level", "model", "pk_mode", "red_name", "shape", "title", "visible" };
    private static readonly uint[] _otherPlayerFieldTags = new uint[] { 18, 10, 74, 96, 26, 88, 80, 32, 40, 56, 64, 48 };
    public static OtherPlayer DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override OtherPlayer DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override OtherPlayer ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_OtherPlayer__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<OtherPlayer, OtherPlayer.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_OtherPlayer__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Avatar : pb::GeneratedMessage<Avatar, Avatar.Builder> {
        private Avatar() { }
        private static readonly Avatar defaultInstance = new Avatar().MakeReadOnly();
        private static readonly string[] _avatarFieldNames = new string[] { "facial_form", "facial_texture", "hair", "name", "profession", "sex" };
        private static readonly uint[] _avatarFieldTags = new uint[] { 32, 40, 48, 10, 16, 24 };
        public static Avatar DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Avatar DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Avatar ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::world.WorldService.internal__static_world_OtherPlayer_Avatar__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Avatar, Avatar.Builder> InternalFieldAccessors {
          get { return global::world.WorldService.internal__static_world_OtherPlayer_Avatar__FieldAccessorTable; }
        }
        
        public const int NameFieldNumber = 1;
        private bool hasName;
        private string name_ = "";
        public bool HasName {
          get { return hasName; }
        }
        public string Name {
          get { return name_; }
        }
        
        public const int ProfessionFieldNumber = 2;
        private bool hasProfession;
        private int profession_;
        public bool HasProfession {
          get { return hasProfession; }
        }
        public int Profession {
          get { return profession_; }
        }
        
        public const int SexFieldNumber = 3;
        private bool hasSex;
        private int sex_;
        public bool HasSex {
          get { return hasSex; }
        }
        public int Sex {
          get { return sex_; }
        }
        
        public const int FacialFormFieldNumber = 4;
        private bool hasFacialForm;
        private int facialForm_;
        public bool HasFacialForm {
          get { return hasFacialForm; }
        }
        public int FacialForm {
          get { return facialForm_; }
        }
        
        public const int FacialTextureFieldNumber = 5;
        private bool hasFacialTexture;
        private int facialTexture_;
        public bool HasFacialTexture {
          get { return hasFacialTexture; }
        }
        public int FacialTexture {
          get { return facialTexture_; }
        }
        
        public const int HairFieldNumber = 6;
        private bool hasHair;
        private int hair_;
        public bool HasHair {
          get { return hasHair; }
        }
        public int Hair {
          get { return hair_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasName) return false;
            if (!hasProfession) return false;
            if (!hasSex) return false;
            if (!hasFacialForm) return false;
            if (!hasFacialTexture) return false;
            if (!hasHair) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _avatarFieldNames;
          if (hasName) {
            output.WriteString(1, field_names[3], Name);
          }
          if (hasProfession) {
            output.WriteInt32(2, field_names[4], Profession);
          }
          if (hasSex) {
            output.WriteInt32(3, field_names[5], Sex);
          }
          if (hasFacialForm) {
            output.WriteInt32(4, field_names[0], FacialForm);
          }
          if (hasFacialTexture) {
            output.WriteInt32(5, field_names[1], FacialTexture);
          }
          if (hasHair) {
            output.WriteInt32(6, field_names[2], Hair);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasName) {
              size += pb::CodedOutputStream.ComputeStringSize(1, Name);
            }
            if (hasProfession) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Profession);
            }
            if (hasSex) {
              size += pb::CodedOutputStream.ComputeInt32Size(3, Sex);
            }
            if (hasFacialForm) {
              size += pb::CodedOutputStream.ComputeInt32Size(4, FacialForm);
            }
            if (hasFacialTexture) {
              size += pb::CodedOutputStream.ComputeInt32Size(5, FacialTexture);
            }
            if (hasHair) {
              size += pb::CodedOutputStream.ComputeInt32Size(6, Hair);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Avatar ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Avatar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Avatar ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Avatar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Avatar ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Avatar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Avatar ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Avatar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Avatar ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Avatar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Avatar MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Avatar prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Avatar, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Avatar cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Avatar result;
          
          private Avatar PrepareBuilder() {
            if (resultIsReadOnly) {
              Avatar original = result;
              result = new Avatar();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Avatar MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::world.OtherPlayer.Types.Avatar.Descriptor; }
          }
          
          public override Avatar DefaultInstanceForType {
            get { return global::world.OtherPlayer.Types.Avatar.DefaultInstance; }
          }
          
          public override Avatar BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Avatar) {
              return MergeFrom((Avatar) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Avatar other) {
            if (other == global::world.OtherPlayer.Types.Avatar.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasName) {
              Name = other.Name;
            }
            if (other.HasProfession) {
              Profession = other.Profession;
            }
            if (other.HasSex) {
              Sex = other.Sex;
            }
            if (other.HasFacialForm) {
              FacialForm = other.FacialForm;
            }
            if (other.HasFacialTexture) {
              FacialTexture = other.FacialTexture;
            }
            if (other.HasHair) {
              Hair = other.Hair;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_avatarFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _avatarFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  result.hasName = input.ReadString(ref result.name_);
                  break;
                }
                case 16: {
                  result.hasProfession = input.ReadInt32(ref result.profession_);
                  break;
                }
                case 24: {
                  result.hasSex = input.ReadInt32(ref result.sex_);
                  break;
                }
                case 32: {
                  result.hasFacialForm = input.ReadInt32(ref result.facialForm_);
                  break;
                }
                case 40: {
                  result.hasFacialTexture = input.ReadInt32(ref result.facialTexture_);
                  break;
                }
                case 48: {
                  result.hasHair = input.ReadInt32(ref result.hair_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasName {
            get { return result.hasName; }
          }
          public string Name {
            get { return result.Name; }
            set { SetName(value); }
          }
          public Builder SetName(string value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasName = true;
            result.name_ = value;
            return this;
          }
          public Builder ClearName() {
            PrepareBuilder();
            result.hasName = false;
            result.name_ = "";
            return this;
          }
          
          public bool HasProfession {
            get { return result.hasProfession; }
          }
          public int Profession {
            get { return result.Profession; }
            set { SetProfession(value); }
          }
          public Builder SetProfession(int value) {
            PrepareBuilder();
            result.hasProfession = true;
            result.profession_ = value;
            return this;
          }
          public Builder ClearProfession() {
            PrepareBuilder();
            result.hasProfession = false;
            result.profession_ = 0;
            return this;
          }
          
          public bool HasSex {
            get { return result.hasSex; }
          }
          public int Sex {
            get { return result.Sex; }
            set { SetSex(value); }
          }
          public Builder SetSex(int value) {
            PrepareBuilder();
            result.hasSex = true;
            result.sex_ = value;
            return this;
          }
          public Builder ClearSex() {
            PrepareBuilder();
            result.hasSex = false;
            result.sex_ = 0;
            return this;
          }
          
          public bool HasFacialForm {
            get { return result.hasFacialForm; }
          }
          public int FacialForm {
            get { return result.FacialForm; }
            set { SetFacialForm(value); }
          }
          public Builder SetFacialForm(int value) {
            PrepareBuilder();
            result.hasFacialForm = true;
            result.facialForm_ = value;
            return this;
          }
          public Builder ClearFacialForm() {
            PrepareBuilder();
            result.hasFacialForm = false;
            result.facialForm_ = 0;
            return this;
          }
          
          public bool HasFacialTexture {
            get { return result.hasFacialTexture; }
          }
          public int FacialTexture {
            get { return result.FacialTexture; }
            set { SetFacialTexture(value); }
          }
          public Builder SetFacialTexture(int value) {
            PrepareBuilder();
            result.hasFacialTexture = true;
            result.facialTexture_ = value;
            return this;
          }
          public Builder ClearFacialTexture() {
            PrepareBuilder();
            result.hasFacialTexture = false;
            result.facialTexture_ = 0;
            return this;
          }
          
          public bool HasHair {
            get { return result.hasHair; }
          }
          public int Hair {
            get { return result.Hair; }
            set { SetHair(value); }
          }
          public Builder SetHair(int value) {
            PrepareBuilder();
            result.hasHair = true;
            result.hair_ = value;
            return this;
          }
          public Builder ClearHair() {
            PrepareBuilder();
            result.hasHair = false;
            result.hair_ = 0;
            return this;
          }
        }
        static Avatar() {
          object.ReferenceEquals(global::world.WorldService.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Equip : pb::GeneratedMessage<Equip, Equip.Builder> {
        private Equip() { }
        private static readonly Equip defaultInstance = new Equip().MakeReadOnly();
        private static readonly string[] _equipFieldNames = new string[] { "color", "glow", "level", "model" };
        private static readonly uint[] _equipFieldTags = new uint[] { 32, 24, 16, 8 };
        public static Equip DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Equip DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Equip ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::world.WorldService.internal__static_world_OtherPlayer_Equip__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Equip, Equip.Builder> InternalFieldAccessors {
          get { return global::world.WorldService.internal__static_world_OtherPlayer_Equip__FieldAccessorTable; }
        }
        
        public const int ModelFieldNumber = 1;
        private bool hasModel;
        private int model_;
        public bool HasModel {
          get { return hasModel; }
        }
        public int Model {
          get { return model_; }
        }
        
        public const int LevelFieldNumber = 2;
        private bool hasLevel;
        private int level_;
        public bool HasLevel {
          get { return hasLevel; }
        }
        public int Level {
          get { return level_; }
        }
        
        public const int GlowFieldNumber = 3;
        private bool hasGlow;
        private int glow_;
        public bool HasGlow {
          get { return hasGlow; }
        }
        public int Glow {
          get { return glow_; }
        }
        
        public const int ColorFieldNumber = 4;
        private bool hasColor;
        private int color_;
        public bool HasColor {
          get { return hasColor; }
        }
        public int Color {
          get { return color_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasModel) return false;
            if (!hasLevel) return false;
            if (!hasGlow) return false;
            if (!hasColor) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _equipFieldNames;
          if (hasModel) {
            output.WriteInt32(1, field_names[3], Model);
          }
          if (hasLevel) {
            output.WriteInt32(2, field_names[2], Level);
          }
          if (hasGlow) {
            output.WriteInt32(3, field_names[1], Glow);
          }
          if (hasColor) {
            output.WriteInt32(4, field_names[0], Color);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasModel) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Model);
            }
            if (hasLevel) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Level);
            }
            if (hasGlow) {
              size += pb::CodedOutputStream.ComputeInt32Size(3, Glow);
            }
            if (hasColor) {
              size += pb::CodedOutputStream.ComputeInt32Size(4, Color);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Equip ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Equip ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Equip ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Equip ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Equip ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Equip ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Equip ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Equip ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Equip ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Equip ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Equip MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Equip prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Equip, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Equip cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Equip result;
          
          private Equip PrepareBuilder() {
            if (resultIsReadOnly) {
              Equip original = result;
              result = new Equip();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Equip MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::world.OtherPlayer.Types.Equip.Descriptor; }
          }
          
          public override Equip DefaultInstanceForType {
            get { return global::world.OtherPlayer.Types.Equip.DefaultInstance; }
          }
          
          public override Equip BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Equip) {
              return MergeFrom((Equip) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Equip other) {
            if (other == global::world.OtherPlayer.Types.Equip.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasModel) {
              Model = other.Model;
            }
            if (other.HasLevel) {
              Level = other.Level;
            }
            if (other.HasGlow) {
              Glow = other.Glow;
            }
            if (other.HasColor) {
              Color = other.Color;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_equipFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _equipFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasModel = input.ReadInt32(ref result.model_);
                  break;
                }
                case 16: {
                  result.hasLevel = input.ReadInt32(ref result.level_);
                  break;
                }
                case 24: {
                  result.hasGlow = input.ReadInt32(ref result.glow_);
                  break;
                }
                case 32: {
                  result.hasColor = input.ReadInt32(ref result.color_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasModel {
            get { return result.hasModel; }
          }
          public int Model {
            get { return result.Model; }
            set { SetModel(value); }
          }
          public Builder SetModel(int value) {
            PrepareBuilder();
            result.hasModel = true;
            result.model_ = value;
            return this;
          }
          public Builder ClearModel() {
            PrepareBuilder();
            result.hasModel = false;
            result.model_ = 0;
            return this;
          }
          
          public bool HasLevel {
            get { return result.hasLevel; }
          }
          public int Level {
            get { return result.Level; }
            set { SetLevel(value); }
          }
          public Builder SetLevel(int value) {
            PrepareBuilder();
            result.hasLevel = true;
            result.level_ = value;
            return this;
          }
          public Builder ClearLevel() {
            PrepareBuilder();
            result.hasLevel = false;
            result.level_ = 0;
            return this;
          }
          
          public bool HasGlow {
            get { return result.hasGlow; }
          }
          public int Glow {
            get { return result.Glow; }
            set { SetGlow(value); }
          }
          public Builder SetGlow(int value) {
            PrepareBuilder();
            result.hasGlow = true;
            result.glow_ = value;
            return this;
          }
          public Builder ClearGlow() {
            PrepareBuilder();
            result.hasGlow = false;
            result.glow_ = 0;
            return this;
          }
          
          public bool HasColor {
            get { return result.hasColor; }
          }
          public int Color {
            get { return result.Color; }
            set { SetColor(value); }
          }
          public Builder SetColor(int value) {
            PrepareBuilder();
            result.hasColor = true;
            result.color_ = value;
            return this;
          }
          public Builder ClearColor() {
            PrepareBuilder();
            result.hasColor = false;
            result.color_ = 0;
            return this;
          }
        }
        static Equip() {
          object.ReferenceEquals(global::world.WorldService.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int CharactorFieldNumber = 1;
    private bool hasCharactor;
    private global::world.OtherCharactor charactor_;
    public bool HasCharactor {
      get { return hasCharactor; }
    }
    public global::world.OtherCharactor Charactor {
      get { return charactor_ ?? global::world.OtherCharactor.DefaultInstance; }
    }
    
    public const int AvatarFieldNumber = 2;
    private bool hasAvatar;
    private global::world.OtherPlayer.Types.Avatar avatar_;
    public bool HasAvatar {
      get { return hasAvatar; }
    }
    public global::world.OtherPlayer.Types.Avatar Avatar {
      get { return avatar_ ?? global::world.OtherPlayer.Types.Avatar.DefaultInstance; }
    }
    
    public const int EquipsFieldNumber = 3;
    private pbc::PopsicleList<global::world.OtherPlayer.Types.Equip> equips_ = new pbc::PopsicleList<global::world.OtherPlayer.Types.Equip>();
    public scg::IList<global::world.OtherPlayer.Types.Equip> EquipsList {
      get { return equips_; }
    }
    public int EquipsCount {
      get { return equips_.Count; }
    }
    public global::world.OtherPlayer.Types.Equip GetEquips(int index) {
      return equips_[index];
    }
    
    public const int PkModeFieldNumber = 4;
    private bool hasPkMode;
    private int pkMode_;
    public bool HasPkMode {
      get { return hasPkMode; }
    }
    public int PkMode {
      get { return pkMode_; }
    }
    
    public const int RedNameFieldNumber = 5;
    private bool hasRedName;
    private bool redName_;
    public bool HasRedName {
      get { return hasRedName; }
    }
    public bool RedName {
      get { return redName_; }
    }
    
    public const int VisibleFieldNumber = 6;
    private bool hasVisible;
    private int visible_;
    public bool HasVisible {
      get { return hasVisible; }
    }
    public int Visible {
      get { return visible_; }
    }
    
    public const int ShapeFieldNumber = 7;
    private bool hasShape;
    private int shape_;
    public bool HasShape {
      get { return hasShape; }
    }
    public int Shape {
      get { return shape_; }
    }
    
    public const int TitleFieldNumber = 8;
    private bool hasTitle;
    private int title_;
    public bool HasTitle {
      get { return hasTitle; }
    }
    public int Title {
      get { return title_; }
    }
    
    public const int ConsortiaFieldNumber = 9;
    private bool hasConsortia;
    private string consortia_ = "";
    public bool HasConsortia {
      get { return hasConsortia; }
    }
    public string Consortia {
      get { return consortia_; }
    }
    
    public const int ModelFieldNumber = 10;
    private bool hasModel;
    private int model_;
    public bool HasModel {
      get { return hasModel; }
    }
    public int Model {
      get { return model_; }
    }
    
    public const int LevelFieldNumber = 11;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int DressModeFieldNumber = 12;
    private bool hasDressMode;
    private bool dressMode_;
    public bool HasDressMode {
      get { return hasDressMode; }
    }
    public bool DressMode {
      get { return dressMode_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCharactor) return false;
        if (!hasAvatar) return false;
        if (!hasPkMode) return false;
        if (!hasRedName) return false;
        if (!hasVisible) return false;
        if (!hasShape) return false;
        if (!hasTitle) return false;
        if (!hasConsortia) return false;
        if (!hasModel) return false;
        if (!hasLevel) return false;
        if (!hasDressMode) return false;
        if (!Charactor.IsInitialized) return false;
        if (!Avatar.IsInitialized) return false;
        foreach (global::world.OtherPlayer.Types.Equip element in EquipsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _otherPlayerFieldNames;
      if (hasCharactor) {
        output.WriteMessage(1, field_names[1], Charactor);
      }
      if (hasAvatar) {
        output.WriteMessage(2, field_names[0], Avatar);
      }
      if (equips_.Count > 0) {
        output.WriteMessageArray(3, field_names[4], equips_);
      }
      if (hasPkMode) {
        output.WriteInt32(4, field_names[7], PkMode);
      }
      if (hasRedName) {
        output.WriteBool(5, field_names[8], RedName);
      }
      if (hasVisible) {
        output.WriteInt32(6, field_names[11], Visible);
      }
      if (hasShape) {
        output.WriteInt32(7, field_names[9], Shape);
      }
      if (hasTitle) {
        output.WriteInt32(8, field_names[10], Title);
      }
      if (hasConsortia) {
        output.WriteString(9, field_names[2], Consortia);
      }
      if (hasModel) {
        output.WriteInt32(10, field_names[6], Model);
      }
      if (hasLevel) {
        output.WriteInt32(11, field_names[5], Level);
      }
      if (hasDressMode) {
        output.WriteBool(12, field_names[3], DressMode);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCharactor) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Charactor);
        }
        if (hasAvatar) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Avatar);
        }
        foreach (global::world.OtherPlayer.Types.Equip element in EquipsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasPkMode) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, PkMode);
        }
        if (hasRedName) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, RedName);
        }
        if (hasVisible) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Visible);
        }
        if (hasShape) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, Shape);
        }
        if (hasTitle) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Title);
        }
        if (hasConsortia) {
          size += pb::CodedOutputStream.ComputeStringSize(9, Consortia);
        }
        if (hasModel) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, Model);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, Level);
        }
        if (hasDressMode) {
          size += pb::CodedOutputStream.ComputeBoolSize(12, DressMode);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static OtherPlayer ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OtherPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OtherPlayer ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static OtherPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static OtherPlayer ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OtherPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static OtherPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static OtherPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static OtherPlayer ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static OtherPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private OtherPlayer MakeReadOnly() {
      equips_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(OtherPlayer prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<OtherPlayer, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(OtherPlayer cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private OtherPlayer result;
      
      private OtherPlayer PrepareBuilder() {
        if (resultIsReadOnly) {
          OtherPlayer original = result;
          result = new OtherPlayer();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override OtherPlayer MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.OtherPlayer.Descriptor; }
      }
      
      public override OtherPlayer DefaultInstanceForType {
        get { return global::world.OtherPlayer.DefaultInstance; }
      }
      
      public override OtherPlayer BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is OtherPlayer) {
          return MergeFrom((OtherPlayer) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(OtherPlayer other) {
        if (other == global::world.OtherPlayer.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCharactor) {
          MergeCharactor(other.Charactor);
        }
        if (other.HasAvatar) {
          MergeAvatar(other.Avatar);
        }
        if (other.equips_.Count != 0) {
          result.equips_.Add(other.equips_);
        }
        if (other.HasPkMode) {
          PkMode = other.PkMode;
        }
        if (other.HasRedName) {
          RedName = other.RedName;
        }
        if (other.HasVisible) {
          Visible = other.Visible;
        }
        if (other.HasShape) {
          Shape = other.Shape;
        }
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasConsortia) {
          Consortia = other.Consortia;
        }
        if (other.HasModel) {
          Model = other.Model;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasDressMode) {
          DressMode = other.DressMode;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_otherPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _otherPlayerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::world.OtherCharactor.Builder subBuilder = global::world.OtherCharactor.CreateBuilder();
              if (result.hasCharactor) {
                subBuilder.MergeFrom(Charactor);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Charactor = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::world.OtherPlayer.Types.Avatar.Builder subBuilder = global::world.OtherPlayer.Types.Avatar.CreateBuilder();
              if (result.hasAvatar) {
                subBuilder.MergeFrom(Avatar);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Avatar = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.equips_, global::world.OtherPlayer.Types.Equip.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasPkMode = input.ReadInt32(ref result.pkMode_);
              break;
            }
            case 40: {
              result.hasRedName = input.ReadBool(ref result.redName_);
              break;
            }
            case 48: {
              result.hasVisible = input.ReadInt32(ref result.visible_);
              break;
            }
            case 56: {
              result.hasShape = input.ReadInt32(ref result.shape_);
              break;
            }
            case 64: {
              result.hasTitle = input.ReadInt32(ref result.title_);
              break;
            }
            case 74: {
              result.hasConsortia = input.ReadString(ref result.consortia_);
              break;
            }
            case 80: {
              result.hasModel = input.ReadInt32(ref result.model_);
              break;
            }
            case 88: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 96: {
              result.hasDressMode = input.ReadBool(ref result.dressMode_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCharactor {
       get { return result.hasCharactor; }
      }
      public global::world.OtherCharactor Charactor {
        get { return result.Charactor; }
        set { SetCharactor(value); }
      }
      public Builder SetCharactor(global::world.OtherCharactor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCharactor = true;
        result.charactor_ = value;
        return this;
      }
      public Builder SetCharactor(global::world.OtherCharactor.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCharactor = true;
        result.charactor_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCharactor(global::world.OtherCharactor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCharactor &&
            result.charactor_ != global::world.OtherCharactor.DefaultInstance) {
            result.charactor_ = global::world.OtherCharactor.CreateBuilder(result.charactor_).MergeFrom(value).BuildPartial();
        } else {
          result.charactor_ = value;
        }
        result.hasCharactor = true;
        return this;
      }
      public Builder ClearCharactor() {
        PrepareBuilder();
        result.hasCharactor = false;
        result.charactor_ = null;
        return this;
      }
      
      public bool HasAvatar {
       get { return result.hasAvatar; }
      }
      public global::world.OtherPlayer.Types.Avatar Avatar {
        get { return result.Avatar; }
        set { SetAvatar(value); }
      }
      public Builder SetAvatar(global::world.OtherPlayer.Types.Avatar value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAvatar = true;
        result.avatar_ = value;
        return this;
      }
      public Builder SetAvatar(global::world.OtherPlayer.Types.Avatar.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasAvatar = true;
        result.avatar_ = builderForValue.Build();
        return this;
      }
      public Builder MergeAvatar(global::world.OtherPlayer.Types.Avatar value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasAvatar &&
            result.avatar_ != global::world.OtherPlayer.Types.Avatar.DefaultInstance) {
            result.avatar_ = global::world.OtherPlayer.Types.Avatar.CreateBuilder(result.avatar_).MergeFrom(value).BuildPartial();
        } else {
          result.avatar_ = value;
        }
        result.hasAvatar = true;
        return this;
      }
      public Builder ClearAvatar() {
        PrepareBuilder();
        result.hasAvatar = false;
        result.avatar_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::world.OtherPlayer.Types.Equip> EquipsList {
        get { return PrepareBuilder().equips_; }
      }
      public int EquipsCount {
        get { return result.EquipsCount; }
      }
      public global::world.OtherPlayer.Types.Equip GetEquips(int index) {
        return result.GetEquips(index);
      }
      public Builder SetEquips(int index, global::world.OtherPlayer.Types.Equip value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.equips_[index] = value;
        return this;
      }
      public Builder SetEquips(int index, global::world.OtherPlayer.Types.Equip.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.equips_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEquips(global::world.OtherPlayer.Types.Equip value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.equips_.Add(value);
        return this;
      }
      public Builder AddEquips(global::world.OtherPlayer.Types.Equip.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.equips_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEquips(scg::IEnumerable<global::world.OtherPlayer.Types.Equip> values) {
        PrepareBuilder();
        result.equips_.Add(values);
        return this;
      }
      public Builder ClearEquips() {
        PrepareBuilder();
        result.equips_.Clear();
        return this;
      }
      
      public bool HasPkMode {
        get { return result.hasPkMode; }
      }
      public int PkMode {
        get { return result.PkMode; }
        set { SetPkMode(value); }
      }
      public Builder SetPkMode(int value) {
        PrepareBuilder();
        result.hasPkMode = true;
        result.pkMode_ = value;
        return this;
      }
      public Builder ClearPkMode() {
        PrepareBuilder();
        result.hasPkMode = false;
        result.pkMode_ = 0;
        return this;
      }
      
      public bool HasRedName {
        get { return result.hasRedName; }
      }
      public bool RedName {
        get { return result.RedName; }
        set { SetRedName(value); }
      }
      public Builder SetRedName(bool value) {
        PrepareBuilder();
        result.hasRedName = true;
        result.redName_ = value;
        return this;
      }
      public Builder ClearRedName() {
        PrepareBuilder();
        result.hasRedName = false;
        result.redName_ = false;
        return this;
      }
      
      public bool HasVisible {
        get { return result.hasVisible; }
      }
      public int Visible {
        get { return result.Visible; }
        set { SetVisible(value); }
      }
      public Builder SetVisible(int value) {
        PrepareBuilder();
        result.hasVisible = true;
        result.visible_ = value;
        return this;
      }
      public Builder ClearVisible() {
        PrepareBuilder();
        result.hasVisible = false;
        result.visible_ = 0;
        return this;
      }
      
      public bool HasShape {
        get { return result.hasShape; }
      }
      public int Shape {
        get { return result.Shape; }
        set { SetShape(value); }
      }
      public Builder SetShape(int value) {
        PrepareBuilder();
        result.hasShape = true;
        result.shape_ = value;
        return this;
      }
      public Builder ClearShape() {
        PrepareBuilder();
        result.hasShape = false;
        result.shape_ = 0;
        return this;
      }
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public int Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(int value) {
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = 0;
        return this;
      }
      
      public bool HasConsortia {
        get { return result.hasConsortia; }
      }
      public string Consortia {
        get { return result.Consortia; }
        set { SetConsortia(value); }
      }
      public Builder SetConsortia(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasConsortia = true;
        result.consortia_ = value;
        return this;
      }
      public Builder ClearConsortia() {
        PrepareBuilder();
        result.hasConsortia = false;
        result.consortia_ = "";
        return this;
      }
      
      public bool HasModel {
        get { return result.hasModel; }
      }
      public int Model {
        get { return result.Model; }
        set { SetModel(value); }
      }
      public Builder SetModel(int value) {
        PrepareBuilder();
        result.hasModel = true;
        result.model_ = value;
        return this;
      }
      public Builder ClearModel() {
        PrepareBuilder();
        result.hasModel = false;
        result.model_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasDressMode {
        get { return result.hasDressMode; }
      }
      public bool DressMode {
        get { return result.DressMode; }
        set { SetDressMode(value); }
      }
      public Builder SetDressMode(bool value) {
        PrepareBuilder();
        result.hasDressMode = true;
        result.dressMode_ = value;
        return this;
      }
      public Builder ClearDressMode() {
        PrepareBuilder();
        result.hasDressMode = false;
        result.dressMode_ = false;
        return this;
      }
    }
    static OtherPlayer() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NPC : pb::GeneratedMessage<NPC, NPC.Builder> {
    private NPC() { }
    private static readonly NPC defaultInstance = new NPC().MakeReadOnly();
    private static readonly string[] _nPCFieldNames = new string[] { "charactor", "class", "model", "rotation", "styler" };
    private static readonly uint[] _nPCFieldTags = new uint[] { 10, 16, 24, 40, 32 };
    public static NPC DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NPC DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NPC ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_NPC__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NPC, NPC.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_NPC__FieldAccessorTable; }
    }
    
    public const int CharactorFieldNumber = 1;
    private bool hasCharactor;
    private global::world.OtherCharactor charactor_;
    public bool HasCharactor {
      get { return hasCharactor; }
    }
    public global::world.OtherCharactor Charactor {
      get { return charactor_ ?? global::world.OtherCharactor.DefaultInstance; }
    }
    
    public const int ClassFieldNumber = 2;
    private bool hasClass;
    private int class_;
    public bool HasClass {
      get { return hasClass; }
    }
    public int Class {
      get { return class_; }
    }
    
    public const int ModelFieldNumber = 3;
    private bool hasModel;
    private int model_;
    public bool HasModel {
      get { return hasModel; }
    }
    public int Model {
      get { return model_; }
    }
    
    public const int StylerFieldNumber = 4;
    private bool hasStyler;
    private int styler_;
    public bool HasStyler {
      get { return hasStyler; }
    }
    public int Styler {
      get { return styler_; }
    }
    
    public const int RotationFieldNumber = 5;
    private bool hasRotation;
    private bool rotation_;
    public bool HasRotation {
      get { return hasRotation; }
    }
    public bool Rotation {
      get { return rotation_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCharactor) return false;
        if (!hasClass) return false;
        if (!hasModel) return false;
        if (!hasStyler) return false;
        if (!hasRotation) return false;
        if (!Charactor.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nPCFieldNames;
      if (hasCharactor) {
        output.WriteMessage(1, field_names[0], Charactor);
      }
      if (hasClass) {
        output.WriteInt32(2, field_names[1], Class);
      }
      if (hasModel) {
        output.WriteInt32(3, field_names[2], Model);
      }
      if (hasStyler) {
        output.WriteInt32(4, field_names[4], Styler);
      }
      if (hasRotation) {
        output.WriteBool(5, field_names[3], Rotation);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCharactor) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Charactor);
        }
        if (hasClass) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Class);
        }
        if (hasModel) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Model);
        }
        if (hasStyler) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Styler);
        }
        if (hasRotation) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, Rotation);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NPC ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NPC ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NPC ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NPC ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NPC ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NPC ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NPC ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NPC ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NPC ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NPC ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NPC MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NPC prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NPC, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NPC cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NPC result;
      
      private NPC PrepareBuilder() {
        if (resultIsReadOnly) {
          NPC original = result;
          result = new NPC();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NPC MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.NPC.Descriptor; }
      }
      
      public override NPC DefaultInstanceForType {
        get { return global::world.NPC.DefaultInstance; }
      }
      
      public override NPC BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NPC) {
          return MergeFrom((NPC) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NPC other) {
        if (other == global::world.NPC.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCharactor) {
          MergeCharactor(other.Charactor);
        }
        if (other.HasClass) {
          Class = other.Class;
        }
        if (other.HasModel) {
          Model = other.Model;
        }
        if (other.HasStyler) {
          Styler = other.Styler;
        }
        if (other.HasRotation) {
          Rotation = other.Rotation;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nPCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nPCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::world.OtherCharactor.Builder subBuilder = global::world.OtherCharactor.CreateBuilder();
              if (result.hasCharactor) {
                subBuilder.MergeFrom(Charactor);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Charactor = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasClass = input.ReadInt32(ref result.class_);
              break;
            }
            case 24: {
              result.hasModel = input.ReadInt32(ref result.model_);
              break;
            }
            case 32: {
              result.hasStyler = input.ReadInt32(ref result.styler_);
              break;
            }
            case 40: {
              result.hasRotation = input.ReadBool(ref result.rotation_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCharactor {
       get { return result.hasCharactor; }
      }
      public global::world.OtherCharactor Charactor {
        get { return result.Charactor; }
        set { SetCharactor(value); }
      }
      public Builder SetCharactor(global::world.OtherCharactor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCharactor = true;
        result.charactor_ = value;
        return this;
      }
      public Builder SetCharactor(global::world.OtherCharactor.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCharactor = true;
        result.charactor_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCharactor(global::world.OtherCharactor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCharactor &&
            result.charactor_ != global::world.OtherCharactor.DefaultInstance) {
            result.charactor_ = global::world.OtherCharactor.CreateBuilder(result.charactor_).MergeFrom(value).BuildPartial();
        } else {
          result.charactor_ = value;
        }
        result.hasCharactor = true;
        return this;
      }
      public Builder ClearCharactor() {
        PrepareBuilder();
        result.hasCharactor = false;
        result.charactor_ = null;
        return this;
      }
      
      public bool HasClass {
        get { return result.hasClass; }
      }
      public int Class {
        get { return result.Class; }
        set { SetClass(value); }
      }
      public Builder SetClass(int value) {
        PrepareBuilder();
        result.hasClass = true;
        result.class_ = value;
        return this;
      }
      public Builder ClearClass() {
        PrepareBuilder();
        result.hasClass = false;
        result.class_ = 0;
        return this;
      }
      
      public bool HasModel {
        get { return result.hasModel; }
      }
      public int Model {
        get { return result.Model; }
        set { SetModel(value); }
      }
      public Builder SetModel(int value) {
        PrepareBuilder();
        result.hasModel = true;
        result.model_ = value;
        return this;
      }
      public Builder ClearModel() {
        PrepareBuilder();
        result.hasModel = false;
        result.model_ = 0;
        return this;
      }
      
      public bool HasStyler {
        get { return result.hasStyler; }
      }
      public int Styler {
        get { return result.Styler; }
        set { SetStyler(value); }
      }
      public Builder SetStyler(int value) {
        PrepareBuilder();
        result.hasStyler = true;
        result.styler_ = value;
        return this;
      }
      public Builder ClearStyler() {
        PrepareBuilder();
        result.hasStyler = false;
        result.styler_ = 0;
        return this;
      }
      
      public bool HasRotation {
        get { return result.hasRotation; }
      }
      public bool Rotation {
        get { return result.Rotation; }
        set { SetRotation(value); }
      }
      public Builder SetRotation(bool value) {
        PrepareBuilder();
        result.hasRotation = true;
        result.rotation_ = value;
        return this;
      }
      public Builder ClearRotation() {
        PrepareBuilder();
        result.hasRotation = false;
        result.rotation_ = false;
        return this;
      }
    }
    static NPC() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Callee : pb::GeneratedMessage<Callee, Callee.Builder> {
    private Callee() { }
    private static readonly Callee defaultInstance = new Callee().MakeReadOnly();
    private static readonly string[] _calleeFieldNames = new string[] { "controller_id", "controller_level", "controller_name", "pk_mode", "red_name" };
    private static readonly uint[] _calleeFieldTags = new uint[] { 8, 26, 18, 32, 40 };
    public static Callee DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Callee DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Callee ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.WorldService.internal__static_world_Callee__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Callee, Callee.Builder> InternalFieldAccessors {
      get { return global::world.WorldService.internal__static_world_Callee__FieldAccessorTable; }
    }
    
    public const int ControllerIdFieldNumber = 1;
    private bool hasControllerId;
    private int controllerId_;
    public bool HasControllerId {
      get { return hasControllerId; }
    }
    public int ControllerId {
      get { return controllerId_; }
    }
    
    public const int ControllerNameFieldNumber = 2;
    private bool hasControllerName;
    private string controllerName_ = "";
    public bool HasControllerName {
      get { return hasControllerName; }
    }
    public string ControllerName {
      get { return controllerName_; }
    }
    
    public const int ControllerLevelFieldNumber = 3;
    private bool hasControllerLevel;
    private string controllerLevel_ = "";
    public bool HasControllerLevel {
      get { return hasControllerLevel; }
    }
    public string ControllerLevel {
      get { return controllerLevel_; }
    }
    
    public const int PkModeFieldNumber = 4;
    private bool hasPkMode;
    private int pkMode_;
    public bool HasPkMode {
      get { return hasPkMode; }
    }
    public int PkMode {
      get { return pkMode_; }
    }
    
    public const int RedNameFieldNumber = 5;
    private bool hasRedName;
    private bool redName_;
    public bool HasRedName {
      get { return hasRedName; }
    }
    public bool RedName {
      get { return redName_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasControllerId) return false;
        if (!hasControllerName) return false;
        if (!hasControllerLevel) return false;
        if (!hasPkMode) return false;
        if (!hasRedName) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _calleeFieldNames;
      if (hasControllerId) {
        output.WriteInt32(1, field_names[0], ControllerId);
      }
      if (hasControllerName) {
        output.WriteString(2, field_names[2], ControllerName);
      }
      if (hasControllerLevel) {
        output.WriteString(3, field_names[1], ControllerLevel);
      }
      if (hasPkMode) {
        output.WriteInt32(4, field_names[3], PkMode);
      }
      if (hasRedName) {
        output.WriteBool(5, field_names[4], RedName);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasControllerId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, ControllerId);
        }
        if (hasControllerName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, ControllerName);
        }
        if (hasControllerLevel) {
          size += pb::CodedOutputStream.ComputeStringSize(3, ControllerLevel);
        }
        if (hasPkMode) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, PkMode);
        }
        if (hasRedName) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, RedName);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Callee ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Callee ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Callee ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Callee ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Callee ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Callee ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Callee ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Callee ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Callee ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Callee ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Callee MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Callee prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Callee, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Callee cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Callee result;
      
      private Callee PrepareBuilder() {
        if (resultIsReadOnly) {
          Callee original = result;
          result = new Callee();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Callee MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.Callee.Descriptor; }
      }
      
      public override Callee DefaultInstanceForType {
        get { return global::world.Callee.DefaultInstance; }
      }
      
      public override Callee BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Callee) {
          return MergeFrom((Callee) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Callee other) {
        if (other == global::world.Callee.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasControllerId) {
          ControllerId = other.ControllerId;
        }
        if (other.HasControllerName) {
          ControllerName = other.ControllerName;
        }
        if (other.HasControllerLevel) {
          ControllerLevel = other.ControllerLevel;
        }
        if (other.HasPkMode) {
          PkMode = other.PkMode;
        }
        if (other.HasRedName) {
          RedName = other.RedName;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_calleeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _calleeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasControllerId = input.ReadInt32(ref result.controllerId_);
              break;
            }
            case 18: {
              result.hasControllerName = input.ReadString(ref result.controllerName_);
              break;
            }
            case 26: {
              result.hasControllerLevel = input.ReadString(ref result.controllerLevel_);
              break;
            }
            case 32: {
              result.hasPkMode = input.ReadInt32(ref result.pkMode_);
              break;
            }
            case 40: {
              result.hasRedName = input.ReadBool(ref result.redName_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasControllerId {
        get { return result.hasControllerId; }
      }
      public int ControllerId {
        get { return result.ControllerId; }
        set { SetControllerId(value); }
      }
      public Builder SetControllerId(int value) {
        PrepareBuilder();
        result.hasControllerId = true;
        result.controllerId_ = value;
        return this;
      }
      public Builder ClearControllerId() {
        PrepareBuilder();
        result.hasControllerId = false;
        result.controllerId_ = 0;
        return this;
      }
      
      public bool HasControllerName {
        get { return result.hasControllerName; }
      }
      public string ControllerName {
        get { return result.ControllerName; }
        set { SetControllerName(value); }
      }
      public Builder SetControllerName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasControllerName = true;
        result.controllerName_ = value;
        return this;
      }
      public Builder ClearControllerName() {
        PrepareBuilder();
        result.hasControllerName = false;
        result.controllerName_ = "";
        return this;
      }
      
      public bool HasControllerLevel {
        get { return result.hasControllerLevel; }
      }
      public string ControllerLevel {
        get { return result.ControllerLevel; }
        set { SetControllerLevel(value); }
      }
      public Builder SetControllerLevel(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasControllerLevel = true;
        result.controllerLevel_ = value;
        return this;
      }
      public Builder ClearControllerLevel() {
        PrepareBuilder();
        result.hasControllerLevel = false;
        result.controllerLevel_ = "";
        return this;
      }
      
      public bool HasPkMode {
        get { return result.hasPkMode; }
      }
      public int PkMode {
        get { return result.PkMode; }
        set { SetPkMode(value); }
      }
      public Builder SetPkMode(int value) {
        PrepareBuilder();
        result.hasPkMode = true;
        result.pkMode_ = value;
        return this;
      }
      public Builder ClearPkMode() {
        PrepareBuilder();
        result.hasPkMode = false;
        result.pkMode_ = 0;
        return this;
      }
      
      public bool HasRedName {
        get { return result.hasRedName; }
      }
      public bool RedName {
        get { return result.RedName; }
        set { SetRedName(value); }
      }
      public Builder SetRedName(bool value) {
        PrepareBuilder();
        result.hasRedName = true;
        result.redName_ = value;
        return this;
      }
      public Builder ClearRedName() {
        PrepareBuilder();
        result.hasRedName = false;
        result.redName_ = false;
        return this;
      }
    }
    static Callee() {
      object.ReferenceEquals(global::world.WorldService.Descriptor, null);
    }
  }
  
  #endregion
  
  #region Services
  /*
  * Service generation is now disabled by default, use the following option to enable:
  * option (google.protobuf.csharp_file_options).service_generator_type = GENERIC;
  */
  /*
  * Service generation is now disabled by default, use the following option to enable:
  * option (google.protobuf.csharp_file_options).service_generator_type = GENERIC;
  */
  /*
  * Service generation is now disabled by default, use the following option to enable:
  * option (google.protobuf.csharp_file_options).service_generator_type = GENERIC;
  */
  /*
  * Service generation is now disabled by default, use the following option to enable:
  * option (google.protobuf.csharp_file_options).service_generator_type = GENERIC;
  */
  /*
  * Service generation is now disabled by default, use the following option to enable:
  * option (google.protobuf.csharp_file_options).service_generator_type = GENERIC;
  */
  #endregion
  
}

#endregion Designer generated code
