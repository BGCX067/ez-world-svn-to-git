// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace world.template {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class WorldTemplate {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_world_template_Item__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.template.Item, global::world.template.Item.Builder> internal__static_world_template_Item__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_template_Price__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.template.Price, global::world.template.Price.Builder> internal__static_world_template_Price__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_template_EquipLevel__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.template.EquipLevel, global::world.template.EquipLevel.Builder> internal__static_world_template_EquipLevel__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_template_Equip__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.template.Equip, global::world.template.Equip.Builder> internal__static_world_template_Equip__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_template_Prop__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.template.Prop, global::world.template.Prop.Builder> internal__static_world_template_Prop__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_template_Gem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.template.Gem, global::world.template.Gem.Builder> internal__static_world_template_Gem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_template_TalismaFix__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.template.TalismaFix, global::world.template.TalismaFix.Builder> internal__static_world_template_TalismaFix__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_template_Talisma__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.template.Talisma, global::world.template.Talisma.Builder> internal__static_world_template_Talisma__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_template_JingLian__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.template.JingLian, global::world.template.JingLian.Builder> internal__static_world_template_JingLian__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_template_Map__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.template.Map, global::world.template.Map.Builder> internal__static_world_template_Map__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_template_Mine__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.template.Mine, global::world.template.Mine.Builder> internal__static_world_template_Mine__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_template_NPC__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.template.NPC, global::world.template.NPC.Builder> internal__static_world_template_NPC__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_template_Templates__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.template.Templates, global::world.template.Templates.Builder> internal__static_world_template_Templates__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static WorldTemplate() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChR3b3JsZF90ZW1wbGF0ZS5wcm90bxIOd29ybGQudGVtcGxhdGUaDHN5c3Rl" + 
          "bS5wcm90bxoVd29ybGRfaW50ZXJmYWNlLnByb3RvIq0CCgRJdGVtEgoKAmlk" + 
          "GAEgAigFEgwKBG5hbWUYAiACKAkSEAoIYnV5X2FibGUYAyACKAgSEQoJc2Vs" + 
          "bF9hYmxlGAQgAigIEhUKDWV4Y2hhbmdlX2FibGUYBSACKAgSFAoMZGVzdHJv" + 
          "eV9hYmxlGAYgAigIEjMKCm1vbmV5X3R5cGUYByACKA4yHy53b3JsZC5JbnRl" + 
          "cmZhY2UuSXRlbS5Nb25leVR5cGUSMQoJYmluZF90eXBlGAggAigOMh4ud29y" + 
          "bGQuSW50ZXJmYWNlLkl0ZW0uQmluZFR5cGUSLgoFY2xhc3MYCSACKA4yHy53" + 
          "b3JsZC5JbnRlcmZhY2UuSXRlbS5DbGFzc1R5cGUSDwoHaWNvbl9pZBgKIAIo" + 
          "BRIQCgh0aW1lX21heBgLIAIoBSIuCgVQcmljZRIRCglidXlfcHJpY2UYASAC" + 
          "KAUSEgoKc2VsbF9wcmljZRgCIAIoBSJwCgpFcXVpcExldmVsEhUKDW1heF9k" + 
          "dXJhYmlsaXQYASACKAUSDgoGc291bHVwGAIgAigFEhUKDXN0aWxldHRvcHJp" + 
          "Y2UYAyACKAUSEAoIdXBjaGFuY2UYBCACKAUSEgoKc29ja2V0Y2hhbhgFIAIo" + 
          "BSLRAwoFRXF1aXASJwoJaXRlbV9pbmZvGAEgAigLMhQud29ybGQudGVtcGxh" + 
          "dGUuSXRlbRIsCgRib2R5GAIgAigOMh4ud29ybGQudGVtcGxhdGUuRXF1aXAu" + 
          "Qm9keVBhcnQSDgoGc2V0X2lkGAMgAigFEioKBmxldmVscxgEIAMoCzIaLndv" + 
          "cmxkLnRlbXBsYXRlLkVxdWlwTGV2ZWwSDwoHZXF1aXBsdhgFIAIoBRIPCgd4" + 
          "emNzb25lGAYgAigCEg8KB3h6Y3N0d28YByACKAISEwoLc2ZieHlmanNqeHMY" + 
          "CCACKAgSIAoGbGltaXRzGA0gAygLMhAuY29yZS5MaW1pdFZhbHVlEiIKB2Vm" + 
          "ZmVjdHMYDiADKAsyES5jb3JlLkVmZmVjdFZhbHVlIqYBCghCb2R5UGFydBIK" + 
          "CgZ0b3VrdWkQABIKCgZodWppYW4QARIKCgZwaWZlbmcQAhIICgR5aWZ1EAMS" + 
          "CgoGeWFvZGFpEAQSCQoFaHV0dWkQBRILCgdzaG91dGFvEAYSCQoFaHV3YW4Q" + 
          "BxIJCgV4aWV6aRAIEggKBHd1cWkQCRINCgl4aWFuZ2xpYW4QChIKCgZqaWV6" + 
          "aGkQCxINCglzaGl6aHVhbmcQDCKJBgoEUHJvcBInCglpdGVtX2luZm8YASAC" + 
          "KAsyFC53b3JsZC50ZW1wbGF0ZS5JdGVtEiQKBXByaWNlGAIgAigLMhUud29y" + 
          "bGQudGVtcGxhdGUuUHJpY2USJwoEdHlwZRgDIAIoDjIZLndvcmxkLnRlbXBs" + 
          "YXRlLlByb3AuVHlwZRINCgVncm91cBgEIAIoBRIQCghjb29sZG93bhgFIAIo" + 
          "BRIPCgd1c2VhYmxlGAYgAigIEhMKC29ubHllZmZlY3RzGAcgAigIEhMKC25v" + 
          "ZGlzYXBwZWFyGAggAigIEgsKA2FjdBgJIAIoCBITCgtvdmVybGFwX21heBgK" + 
          "IAIoBRIgCgZsaW1pdHMYCyADKAsyEC5jb3JlLkxpbWl0VmFsdWUSIgoHZWZm" + 
          "ZWN0cxgMIAMoCzIRLmNvcmUuRWZmZWN0VmFsdWUixAMKBFR5cGUSCQoFdHlw" + 
          "ZTAQABIJCgV0eXBlMRABEgkKBXR5cGUyEAISCQoFdHlwZTMQAxIJCgV0eXBl" + 
          "NBAEEgkKBXR5cGU1EAUSCQoFdHlwZTYQBhIJCgV0eXBlNxAHEgkKBXR5cGU4" + 
          "EAgSCQoFdHlwZTkQCRIKCgZ0eXBlMTAQChIKCgZ0eXBlMTEQCxIKCgZ0eXBl" + 
          "MTIQDBIKCgZ0eXBlMTMQDRIKCgZ0eXBlMTQQDhIKCgZ0eXBlMTUQDxIKCgZ0" + 
          "eXBlMTYQEBIKCgZ0eXBlMTcQERIKCgZ0eXBlMTgQEhIKCgZ0eXBlMTkQExIK" + 
          "CgZ0eXBlMjAQFBIKCgZ0eXBlMjEQFRIKCgZ0eXBlMjIQFhIKCgZ0eXBlMjMQ" + 
          "FxIKCgZ0eXBlMjQQGBIKCgZ0eXBlMjUQGRIKCgZ0eXBlMjYQGhIKCgZ0eXBl" + 
          "MjcQGxIKCgZ0eXBlMjgQHBIKCgZ0eXBlMjkQHRIKCgZ0eXBlMzAQHhIKCgZ0" + 
          "eXBlMzEQHxIKCgZ0eXBlMzIQIBIKCgZ0eXBlMzMQIRIKCgZ0eXBlMzQQIhIK" + 
          "CgZ0eXBlMzUQIxIKCgZ0eXBlMzYQJBIKCgZ0eXBlMzcQJSKMAQoDR2VtEicK" + 
          "CWl0ZW1faW5mbxgBIAIoCzIULndvcmxkLnRlbXBsYXRlLkl0ZW0SJAoFcHJp" + 
          "Y2UYAiACKAsyFS53b3JsZC50ZW1wbGF0ZS5QcmljZRISCgpnbG93X2xldmVs" + 
          "GAMgAigFEiIKB2VmZmVjdHMYBCADKAsyES5jb3JlLkVmZmVjdFZhbHVlIkoK" + 
          "ClRhbGlzbWFGaXgSCgoCaWQYASACKAUSDAoEbmFtZRgCIAIoBRIiCgdlZmZl" + 
          "Y3RzGAMgAygLMhEuY29yZS5FZmZlY3RWYWx1ZSJWCgdUYWxpc21hEicKCWl0" + 
          "ZW1faW5mbxgBIAIoCzIULndvcmxkLnRlbXBsYXRlLkl0ZW0SIgoHZWZmZWN0" + 
          "cxgCIAMoCzIRLmNvcmUuRWZmZWN0VmFsdWUiqQIKCEppbmdMaWFuEh0KCWJh" + 
          "c2VfaW5mbxgBIAIoCzIKLmNvcmUuQmFzZRIOCgZidXRpYW4YAiACKAUSEAoI" + 
          "amluZ2dhbmcYAyACKAUSCwoDamluGAQgAigFEgsKA3lpbhgFIAIoBRIMCgR0" + 
          "b25nGAYgAigFEgsKA3RpZRgHIAIoBRIrCgRwYXJ0GAggAigOMh0ud29ybGQu" + 
          "dGVtcGxhdGUuSmluZ0xpYW4uUGFydBINCgVsZXZlbBgJIAIoBRIVCg1odWln" + 
          "dWFuZ3lhbnNlGAogAigFEiIKB2VmZmVjdHMYHyADKAsyES5jb3JlLkVmZmVj" + 
          "dFZhbHVlIjAKBFBhcnQSCgoGV2VhcG9uEAASBgoCVXAQARIICgREb3duEAIS" + 
          "CgoGU2hpUGluEAMisQEKA01hcBIdCgliYXNlX2luZm8YASACKAsyCi5jb3Jl" + 
          "LkJhc2USDQoFd2lkdGgYAiACKAUSDgoGaGVpZ2h0GAMgAigFEgwKBGNlbGwY" + 
          "BCACKAUSJgoEdHlwZRgFIAIoDjIYLndvcmxkLnRlbXBsYXRlLk1hcC5UeXBl" + 
          "IjYKBFR5cGUSCgoGVHlwZV8wEAASCgoGVHlwZV8xEAESCgoGVHlwZV8yEAIS" + 
          "CgoGVHlwZV8zEAMizAEKBE1pbmUSCgoCaWQYASACKAUSDAoEbmFtZRgCIAIo" + 
          "BRIOCgZtYXBfaWQYAyACKAUSDwoHYXJlYV9pZBgEIAIoBRIPCgdjaGFucGlu" + 
          "GAUgAigFEhgKBHJlY3QYBiACKAsyCi5jb3JlLlJlY3QSGQoEZmxhZxgHIAIo" + 
          "CzILLmNvcmUuUG9pbnQSDQoFbGV2ZWwYCCACKAUSDgoGbmV4dGlkGAkgAigF" + 
          "EhAKCG1heF9ucGNzGAogAigFEhIKCmdvbGRzX2x2dXAYCyACKAUixQwKA05Q" + 
          "QxIdCgliYXNlX2luZm8YASACKAsyCi5jb3JlLkJhc2USKAoFY2xhc3MYAiAC" + 
          "KA4yGS53b3JsZC50ZW1wbGF0ZS5OUEMuQ2xhc3MSJgoEdHlwZRgDIAIoDjIY" + 
          "LndvcmxkLnRlbXBsYXRlLk5QQy5UeXBlEiQKA2pvYhgEIAIoDjIXLndvcmxk" + 
          "LnRlbXBsYXRlLk5QQy5Kb2ISCwoDbW9kGAUgAigFEg8KB3RpZXR1aWQYBiAC" + 
          "KAUSLAoHbmFtZTJuZBgHIAIoDjIbLndvcmxkLnRlbXBsYXRlLk5QQy5OYW1l" + 
          "Mm5kEgoKAmFpGAggAigFEhEKCW5vYmVhdGZseRgJIAIoCBIRCgltb25leWRy" + 
          "b3AYCiACKAgSDwoHbm9tZHJvcBgLIAIoCBIOCgZzcGRyb3AYDCACKAgSEQoJ" + 
          "cm91bmRhYmxlGA0gAigIEhUKDW5vYmVhdHh1YW55dW4YDiACKAgSEgoKbm9i" + 
          "ZWF0c2xvdxgPIAIoCBITCgtub2JlYXRzbGVlcBgQIAIoCBIUCgxub2JlYXRj" + 
          "aGVubW8YESACKAgSFwoPbm9iZWF0Y2hvbmdmZW5nGBIgAigIEhMKC2F0dGRp" + 
          "c3RhbmNlGBMgAigFEg8KB2F0dGtpbmQYFCACKAUSFgoOYmlydGhleGN1cnNp" + 
          "b24YFSACKAUSEgoKcGF0cm9sYXJlYRgWIAIoBRISCgpib2R5YmV0aW1lGBcg" + 
          "AigFEhAKCGppbmVuZ2lkGBggAygFIpUCCgVDbGFzcxILCgdDbGFzc18wEAAS" + 
          "CwoHQ2xhc3NfMRABEgsKB0NsYXNzXzIQAhILCgdDbGFzc18zEAMSCwoHQ2xh" + 
          "c3NfNBAEEgsKB0NsYXNzXzUQBRILCgdDbGFzc182EAYSCwoHQ2xhc3NfNxAH" + 
          "EgsKB0NsYXNzXzgQCBILCgdDbGFzc185EAkSDAoIQ2xhc3NfMTAQChIMCghD" + 
          "bGFzc18xMRALEgwKCENsYXNzXzEyEAwSDAoIQ2xhc3NfMTMQDRIMCghDbGFz" + 
          "c18xNBAOEgwKCENsYXNzXzE1EA8SDAoIQ2xhc3NfMTYQEBIMCghDbGFzc18x" + 
          "NxAREgwKCENsYXNzXzE4EBISDAoIQ2xhc3NfMTkQEyI2CgRUeXBlEgoKBlR5" + 
          "cGVfMBABEgoKBlR5cGVfMRACEgoKBlR5cGVfMhADEgoKBlR5cGVfMxAEIusB" + 
          "CgNKb2ISCQoFSm9iXzAQABIJCgVKb2JfMRABEgkKBUpvYl8yEAISCQoFSm9i" + 
          "XzMQAxIJCgVKb2JfNBAEEgkKBUpvYl81EAUSCQoFSm9iXzYQBhIJCgVKb2Jf" + 
          "NxAHEgkKBUpvYl84EAgSCQoFSm9iXzkQCRIKCgZKb2JfMTAQChIKCgZKb2Jf" + 
          "MTEQCxIKCgZKb2JfMTIQDBIKCgZKb2JfMTMQDRIKCgZKb2JfMTQQDhIKCgZK" + 
          "b2JfMTUQDxIKCgZKb2JfMTYQEBIKCgZKb2JfMTcQERIKCgZKb2JfMTgQEhIK" + 
          "CgZKb2JfMTkQEyLPAwoHTmFtZTJuZBINCglOYW1lMm5kXzAQABINCglOYW1l" + 
          "Mm5kXzEQARINCglOYW1lMm5kXzIQAhINCglOYW1lMm5kXzMQAxINCglOYW1l" + 
          "Mm5kXzQQBBINCglOYW1lMm5kXzUQBRINCglOYW1lMm5kXzYQBhINCglOYW1l" + 
          "Mm5kXzcQBxINCglOYW1lMm5kXzgQCBINCglOYW1lMm5kXzkQCRIOCgpOYW1l" + 
          "Mm5kXzEwEAoSDgoKTmFtZTJuZF8xMRALEg4KCk5hbWUybmRfMTIQDBIOCgpO" + 
          "YW1lMm5kXzEzEA0SDgoKTmFtZTJuZF8xNBAOEg4KCk5hbWUybmRfMTUQDxIO" + 
          "CgpOYW1lMm5kXzE2EBASDgoKTmFtZTJuZF8xNxAREg4KCk5hbWUybmRfMTgQ" + 
          "EhIOCgpOYW1lMm5kXzE5EBMSDgoKTmFtZTJuZF8yMBAUEg4KCk5hbWUybmRf" + 
          "MjEQFRIOCgpOYW1lMm5kXzIyEBYSDgoKTmFtZTJuZF8yMxAXEg4KCk5hbWUy" + 
          "bmRfMjQQGBIOCgpOYW1lMm5kXzI1EBkSDgoKTmFtZTJuZF8yNhAaEg4KCk5h" + 
          "bWUybmRfMjcQGxIOCgpOYW1lMm5kXzI4EBwiVwoJVGVtcGxhdGVzEiUKBmVx" + 
          "dWlwcxgBIAMoCzIVLndvcmxkLnRlbXBsYXRlLkVxdWlwEiMKBXByb3BzGAIg" + 
          "AygLMhQud29ybGQudGVtcGxhdGUuUHJvcA==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_world_template_Item__Descriptor = Descriptor.MessageTypes[0];
        internal__static_world_template_Item__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.template.Item, global::world.template.Item.Builder>(internal__static_world_template_Item__Descriptor,
                new string[] { "Id", "Name", "BuyAble", "SellAble", "ExchangeAble", "DestroyAble", "MoneyType", "BindType", "Class", "IconId", "TimeMax", });
        internal__static_world_template_Price__Descriptor = Descriptor.MessageTypes[1];
        internal__static_world_template_Price__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.template.Price, global::world.template.Price.Builder>(internal__static_world_template_Price__Descriptor,
                new string[] { "BuyPrice", "SellPrice", });
        internal__static_world_template_EquipLevel__Descriptor = Descriptor.MessageTypes[2];
        internal__static_world_template_EquipLevel__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.template.EquipLevel, global::world.template.EquipLevel.Builder>(internal__static_world_template_EquipLevel__Descriptor,
                new string[] { "MaxDurabilit", "Soulup", "Stilettoprice", "Upchance", "Socketchan", });
        internal__static_world_template_Equip__Descriptor = Descriptor.MessageTypes[3];
        internal__static_world_template_Equip__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.template.Equip, global::world.template.Equip.Builder>(internal__static_world_template_Equip__Descriptor,
                new string[] { "ItemInfo", "Body", "SetId", "Levels", "Equiplv", "Xzcsone", "Xzcstwo", "Sfbxyfjsjxs", "Limits", "Effects", });
        internal__static_world_template_Prop__Descriptor = Descriptor.MessageTypes[4];
        internal__static_world_template_Prop__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.template.Prop, global::world.template.Prop.Builder>(internal__static_world_template_Prop__Descriptor,
                new string[] { "ItemInfo", "Price", "Type", "Group", "Cooldown", "Useable", "Onlyeffects", "Nodisappear", "Act", "OverlapMax", "Limits", "Effects", });
        internal__static_world_template_Gem__Descriptor = Descriptor.MessageTypes[5];
        internal__static_world_template_Gem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.template.Gem, global::world.template.Gem.Builder>(internal__static_world_template_Gem__Descriptor,
                new string[] { "ItemInfo", "Price", "GlowLevel", "Effects", });
        internal__static_world_template_TalismaFix__Descriptor = Descriptor.MessageTypes[6];
        internal__static_world_template_TalismaFix__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.template.TalismaFix, global::world.template.TalismaFix.Builder>(internal__static_world_template_TalismaFix__Descriptor,
                new string[] { "Id", "Name", "Effects", });
        internal__static_world_template_Talisma__Descriptor = Descriptor.MessageTypes[7];
        internal__static_world_template_Talisma__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.template.Talisma, global::world.template.Talisma.Builder>(internal__static_world_template_Talisma__Descriptor,
                new string[] { "ItemInfo", "Effects", });
        internal__static_world_template_JingLian__Descriptor = Descriptor.MessageTypes[8];
        internal__static_world_template_JingLian__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.template.JingLian, global::world.template.JingLian.Builder>(internal__static_world_template_JingLian__Descriptor,
                new string[] { "BaseInfo", "Butian", "Jinggang", "Jin", "Yin", "Tong", "Tie", "Part", "Level", "Huiguangyanse", "Effects", });
        internal__static_world_template_Map__Descriptor = Descriptor.MessageTypes[9];
        internal__static_world_template_Map__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.template.Map, global::world.template.Map.Builder>(internal__static_world_template_Map__Descriptor,
                new string[] { "BaseInfo", "Width", "Height", "Cell", "Type", });
        internal__static_world_template_Mine__Descriptor = Descriptor.MessageTypes[10];
        internal__static_world_template_Mine__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.template.Mine, global::world.template.Mine.Builder>(internal__static_world_template_Mine__Descriptor,
                new string[] { "Id", "Name", "MapId", "AreaId", "Chanpin", "Rect", "Flag", "Level", "Nextid", "MaxNpcs", "GoldsLvup", });
        internal__static_world_template_NPC__Descriptor = Descriptor.MessageTypes[11];
        internal__static_world_template_NPC__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.template.NPC, global::world.template.NPC.Builder>(internal__static_world_template_NPC__Descriptor,
                new string[] { "BaseInfo", "Class", "Type", "Job", "Mod", "Tietuid", "Name2Nd", "Ai", "Nobeatfly", "Moneydrop", "Nomdrop", "Spdrop", "Roundable", "Nobeatxuanyun", "Nobeatslow", "Nobeatsleep", "Nobeatchenmo", "Nobeatchongfeng", "Attdistance", "Attkind", "Birthexcursion", "Patrolarea", "Bodybetime", "Jinengid", });
        internal__static_world_template_Templates__Descriptor = Descriptor.MessageTypes[12];
        internal__static_world_template_Templates__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.template.Templates, global::world.template.Templates.Builder>(internal__static_world_template_Templates__Descriptor,
                new string[] { "Equips", "Props", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::core.System.Descriptor, 
          global::world.Interface.WorldInterface.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Item : pb::GeneratedMessage<Item, Item.Builder> {
    private Item() { }
    private static readonly Item defaultInstance = new Item().MakeReadOnly();
    private static readonly string[] _itemFieldNames = new string[] { "bind_type", "buy_able", "class", "destroy_able", "exchange_able", "icon_id", "id", "money_type", "name", "sell_able", "time_max" };
    private static readonly uint[] _itemFieldTags = new uint[] { 64, 24, 72, 48, 40, 80, 8, 56, 18, 32, 88 };
    public static Item DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Item DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Item ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Item__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Item, Item.Builder> InternalFieldAccessors {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Item__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int BuyAbleFieldNumber = 3;
    private bool hasBuyAble;
    private bool buyAble_;
    public bool HasBuyAble {
      get { return hasBuyAble; }
    }
    public bool BuyAble {
      get { return buyAble_; }
    }
    
    public const int SellAbleFieldNumber = 4;
    private bool hasSellAble;
    private bool sellAble_;
    public bool HasSellAble {
      get { return hasSellAble; }
    }
    public bool SellAble {
      get { return sellAble_; }
    }
    
    public const int ExchangeAbleFieldNumber = 5;
    private bool hasExchangeAble;
    private bool exchangeAble_;
    public bool HasExchangeAble {
      get { return hasExchangeAble; }
    }
    public bool ExchangeAble {
      get { return exchangeAble_; }
    }
    
    public const int DestroyAbleFieldNumber = 6;
    private bool hasDestroyAble;
    private bool destroyAble_;
    public bool HasDestroyAble {
      get { return hasDestroyAble; }
    }
    public bool DestroyAble {
      get { return destroyAble_; }
    }
    
    public const int MoneyTypeFieldNumber = 7;
    private bool hasMoneyType;
    private global::world.Interface.Item.Types.MoneyType moneyType_ = global::world.Interface.Item.Types.MoneyType.GameMoney;
    public bool HasMoneyType {
      get { return hasMoneyType; }
    }
    public global::world.Interface.Item.Types.MoneyType MoneyType {
      get { return moneyType_; }
    }
    
    public const int BindTypeFieldNumber = 8;
    private bool hasBindType;
    private global::world.Interface.Item.Types.BindType bindType_ = global::world.Interface.Item.Types.BindType.Cannot;
    public bool HasBindType {
      get { return hasBindType; }
    }
    public global::world.Interface.Item.Types.BindType BindType {
      get { return bindType_; }
    }
    
    public const int ClassFieldNumber = 9;
    private bool hasClass;
    private global::world.Interface.Item.Types.ClassType class_ = global::world.Interface.Item.Types.ClassType.PuTong;
    public bool HasClass {
      get { return hasClass; }
    }
    public global::world.Interface.Item.Types.ClassType Class {
      get { return class_; }
    }
    
    public const int IconIdFieldNumber = 10;
    private bool hasIconId;
    private int iconId_;
    public bool HasIconId {
      get { return hasIconId; }
    }
    public int IconId {
      get { return iconId_; }
    }
    
    public const int TimeMaxFieldNumber = 11;
    private bool hasTimeMax;
    private int timeMax_;
    public bool HasTimeMax {
      get { return hasTimeMax; }
    }
    public int TimeMax {
      get { return timeMax_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasName) return false;
        if (!hasBuyAble) return false;
        if (!hasSellAble) return false;
        if (!hasExchangeAble) return false;
        if (!hasDestroyAble) return false;
        if (!hasMoneyType) return false;
        if (!hasBindType) return false;
        if (!hasClass) return false;
        if (!hasIconId) return false;
        if (!hasTimeMax) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _itemFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[6], Id);
      }
      if (hasName) {
        output.WriteString(2, field_names[8], Name);
      }
      if (hasBuyAble) {
        output.WriteBool(3, field_names[1], BuyAble);
      }
      if (hasSellAble) {
        output.WriteBool(4, field_names[9], SellAble);
      }
      if (hasExchangeAble) {
        output.WriteBool(5, field_names[4], ExchangeAble);
      }
      if (hasDestroyAble) {
        output.WriteBool(6, field_names[3], DestroyAble);
      }
      if (hasMoneyType) {
        output.WriteEnum(7, field_names[7], (int) MoneyType, MoneyType);
      }
      if (hasBindType) {
        output.WriteEnum(8, field_names[0], (int) BindType, BindType);
      }
      if (hasClass) {
        output.WriteEnum(9, field_names[2], (int) Class, Class);
      }
      if (hasIconId) {
        output.WriteInt32(10, field_names[5], IconId);
      }
      if (hasTimeMax) {
        output.WriteInt32(11, field_names[10], TimeMax);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Name);
        }
        if (hasBuyAble) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, BuyAble);
        }
        if (hasSellAble) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, SellAble);
        }
        if (hasExchangeAble) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, ExchangeAble);
        }
        if (hasDestroyAble) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, DestroyAble);
        }
        if (hasMoneyType) {
          size += pb::CodedOutputStream.ComputeEnumSize(7, (int) MoneyType);
        }
        if (hasBindType) {
          size += pb::CodedOutputStream.ComputeEnumSize(8, (int) BindType);
        }
        if (hasClass) {
          size += pb::CodedOutputStream.ComputeEnumSize(9, (int) Class);
        }
        if (hasIconId) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, IconId);
        }
        if (hasTimeMax) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, TimeMax);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Item ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Item ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Item ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Item ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Item ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Item ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Item ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Item ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Item ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Item ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Item MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Item prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Item, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Item cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Item result;
      
      private Item PrepareBuilder() {
        if (resultIsReadOnly) {
          Item original = result;
          result = new Item();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Item MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.template.Item.Descriptor; }
      }
      
      public override Item DefaultInstanceForType {
        get { return global::world.template.Item.DefaultInstance; }
      }
      
      public override Item BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Item) {
          return MergeFrom((Item) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Item other) {
        if (other == global::world.template.Item.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasBuyAble) {
          BuyAble = other.BuyAble;
        }
        if (other.HasSellAble) {
          SellAble = other.SellAble;
        }
        if (other.HasExchangeAble) {
          ExchangeAble = other.ExchangeAble;
        }
        if (other.HasDestroyAble) {
          DestroyAble = other.DestroyAble;
        }
        if (other.HasMoneyType) {
          MoneyType = other.MoneyType;
        }
        if (other.HasBindType) {
          BindType = other.BindType;
        }
        if (other.HasClass) {
          Class = other.Class;
        }
        if (other.HasIconId) {
          IconId = other.IconId;
        }
        if (other.HasTimeMax) {
          TimeMax = other.TimeMax;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_itemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _itemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 24: {
              result.hasBuyAble = input.ReadBool(ref result.buyAble_);
              break;
            }
            case 32: {
              result.hasSellAble = input.ReadBool(ref result.sellAble_);
              break;
            }
            case 40: {
              result.hasExchangeAble = input.ReadBool(ref result.exchangeAble_);
              break;
            }
            case 48: {
              result.hasDestroyAble = input.ReadBool(ref result.destroyAble_);
              break;
            }
            case 56: {
              object unknown;
              if(input.ReadEnum(ref result.moneyType_, out unknown)) {
                result.hasMoneyType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(7, (ulong)(int)unknown);
              }
              break;
            }
            case 64: {
              object unknown;
              if(input.ReadEnum(ref result.bindType_, out unknown)) {
                result.hasBindType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(8, (ulong)(int)unknown);
              }
              break;
            }
            case 72: {
              object unknown;
              if(input.ReadEnum(ref result.class_, out unknown)) {
                result.hasClass = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(9, (ulong)(int)unknown);
              }
              break;
            }
            case 80: {
              result.hasIconId = input.ReadInt32(ref result.iconId_);
              break;
            }
            case 88: {
              result.hasTimeMax = input.ReadInt32(ref result.timeMax_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasBuyAble {
        get { return result.hasBuyAble; }
      }
      public bool BuyAble {
        get { return result.BuyAble; }
        set { SetBuyAble(value); }
      }
      public Builder SetBuyAble(bool value) {
        PrepareBuilder();
        result.hasBuyAble = true;
        result.buyAble_ = value;
        return this;
      }
      public Builder ClearBuyAble() {
        PrepareBuilder();
        result.hasBuyAble = false;
        result.buyAble_ = false;
        return this;
      }
      
      public bool HasSellAble {
        get { return result.hasSellAble; }
      }
      public bool SellAble {
        get { return result.SellAble; }
        set { SetSellAble(value); }
      }
      public Builder SetSellAble(bool value) {
        PrepareBuilder();
        result.hasSellAble = true;
        result.sellAble_ = value;
        return this;
      }
      public Builder ClearSellAble() {
        PrepareBuilder();
        result.hasSellAble = false;
        result.sellAble_ = false;
        return this;
      }
      
      public bool HasExchangeAble {
        get { return result.hasExchangeAble; }
      }
      public bool ExchangeAble {
        get { return result.ExchangeAble; }
        set { SetExchangeAble(value); }
      }
      public Builder SetExchangeAble(bool value) {
        PrepareBuilder();
        result.hasExchangeAble = true;
        result.exchangeAble_ = value;
        return this;
      }
      public Builder ClearExchangeAble() {
        PrepareBuilder();
        result.hasExchangeAble = false;
        result.exchangeAble_ = false;
        return this;
      }
      
      public bool HasDestroyAble {
        get { return result.hasDestroyAble; }
      }
      public bool DestroyAble {
        get { return result.DestroyAble; }
        set { SetDestroyAble(value); }
      }
      public Builder SetDestroyAble(bool value) {
        PrepareBuilder();
        result.hasDestroyAble = true;
        result.destroyAble_ = value;
        return this;
      }
      public Builder ClearDestroyAble() {
        PrepareBuilder();
        result.hasDestroyAble = false;
        result.destroyAble_ = false;
        return this;
      }
      
      public bool HasMoneyType {
       get { return result.hasMoneyType; }
      }
      public global::world.Interface.Item.Types.MoneyType MoneyType {
        get { return result.MoneyType; }
        set { SetMoneyType(value); }
      }
      public Builder SetMoneyType(global::world.Interface.Item.Types.MoneyType value) {
        PrepareBuilder();
        result.hasMoneyType = true;
        result.moneyType_ = value;
        return this;
      }
      public Builder ClearMoneyType() {
        PrepareBuilder();
        result.hasMoneyType = false;
        result.moneyType_ = global::world.Interface.Item.Types.MoneyType.GameMoney;
        return this;
      }
      
      public bool HasBindType {
       get { return result.hasBindType; }
      }
      public global::world.Interface.Item.Types.BindType BindType {
        get { return result.BindType; }
        set { SetBindType(value); }
      }
      public Builder SetBindType(global::world.Interface.Item.Types.BindType value) {
        PrepareBuilder();
        result.hasBindType = true;
        result.bindType_ = value;
        return this;
      }
      public Builder ClearBindType() {
        PrepareBuilder();
        result.hasBindType = false;
        result.bindType_ = global::world.Interface.Item.Types.BindType.Cannot;
        return this;
      }
      
      public bool HasClass {
       get { return result.hasClass; }
      }
      public global::world.Interface.Item.Types.ClassType Class {
        get { return result.Class; }
        set { SetClass(value); }
      }
      public Builder SetClass(global::world.Interface.Item.Types.ClassType value) {
        PrepareBuilder();
        result.hasClass = true;
        result.class_ = value;
        return this;
      }
      public Builder ClearClass() {
        PrepareBuilder();
        result.hasClass = false;
        result.class_ = global::world.Interface.Item.Types.ClassType.PuTong;
        return this;
      }
      
      public bool HasIconId {
        get { return result.hasIconId; }
      }
      public int IconId {
        get { return result.IconId; }
        set { SetIconId(value); }
      }
      public Builder SetIconId(int value) {
        PrepareBuilder();
        result.hasIconId = true;
        result.iconId_ = value;
        return this;
      }
      public Builder ClearIconId() {
        PrepareBuilder();
        result.hasIconId = false;
        result.iconId_ = 0;
        return this;
      }
      
      public bool HasTimeMax {
        get { return result.hasTimeMax; }
      }
      public int TimeMax {
        get { return result.TimeMax; }
        set { SetTimeMax(value); }
      }
      public Builder SetTimeMax(int value) {
        PrepareBuilder();
        result.hasTimeMax = true;
        result.timeMax_ = value;
        return this;
      }
      public Builder ClearTimeMax() {
        PrepareBuilder();
        result.hasTimeMax = false;
        result.timeMax_ = 0;
        return this;
      }
    }
    static Item() {
      object.ReferenceEquals(global::world.template.WorldTemplate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Price : pb::GeneratedMessage<Price, Price.Builder> {
    private Price() { }
    private static readonly Price defaultInstance = new Price().MakeReadOnly();
    private static readonly string[] _priceFieldNames = new string[] { "buy_price", "sell_price" };
    private static readonly uint[] _priceFieldTags = new uint[] { 8, 16 };
    public static Price DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Price DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Price ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Price__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Price, Price.Builder> InternalFieldAccessors {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Price__FieldAccessorTable; }
    }
    
    public const int BuyPriceFieldNumber = 1;
    private bool hasBuyPrice;
    private int buyPrice_;
    public bool HasBuyPrice {
      get { return hasBuyPrice; }
    }
    public int BuyPrice {
      get { return buyPrice_; }
    }
    
    public const int SellPriceFieldNumber = 2;
    private bool hasSellPrice;
    private int sellPrice_;
    public bool HasSellPrice {
      get { return hasSellPrice; }
    }
    public int SellPrice {
      get { return sellPrice_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBuyPrice) return false;
        if (!hasSellPrice) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _priceFieldNames;
      if (hasBuyPrice) {
        output.WriteInt32(1, field_names[0], BuyPrice);
      }
      if (hasSellPrice) {
        output.WriteInt32(2, field_names[1], SellPrice);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBuyPrice) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, BuyPrice);
        }
        if (hasSellPrice) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, SellPrice);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Price ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Price ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Price ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Price ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Price ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Price ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Price ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Price ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Price ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Price ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Price MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Price prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Price, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Price cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Price result;
      
      private Price PrepareBuilder() {
        if (resultIsReadOnly) {
          Price original = result;
          result = new Price();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Price MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.template.Price.Descriptor; }
      }
      
      public override Price DefaultInstanceForType {
        get { return global::world.template.Price.DefaultInstance; }
      }
      
      public override Price BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Price) {
          return MergeFrom((Price) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Price other) {
        if (other == global::world.template.Price.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBuyPrice) {
          BuyPrice = other.BuyPrice;
        }
        if (other.HasSellPrice) {
          SellPrice = other.SellPrice;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_priceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _priceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasBuyPrice = input.ReadInt32(ref result.buyPrice_);
              break;
            }
            case 16: {
              result.hasSellPrice = input.ReadInt32(ref result.sellPrice_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBuyPrice {
        get { return result.hasBuyPrice; }
      }
      public int BuyPrice {
        get { return result.BuyPrice; }
        set { SetBuyPrice(value); }
      }
      public Builder SetBuyPrice(int value) {
        PrepareBuilder();
        result.hasBuyPrice = true;
        result.buyPrice_ = value;
        return this;
      }
      public Builder ClearBuyPrice() {
        PrepareBuilder();
        result.hasBuyPrice = false;
        result.buyPrice_ = 0;
        return this;
      }
      
      public bool HasSellPrice {
        get { return result.hasSellPrice; }
      }
      public int SellPrice {
        get { return result.SellPrice; }
        set { SetSellPrice(value); }
      }
      public Builder SetSellPrice(int value) {
        PrepareBuilder();
        result.hasSellPrice = true;
        result.sellPrice_ = value;
        return this;
      }
      public Builder ClearSellPrice() {
        PrepareBuilder();
        result.hasSellPrice = false;
        result.sellPrice_ = 0;
        return this;
      }
    }
    static Price() {
      object.ReferenceEquals(global::world.template.WorldTemplate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class EquipLevel : pb::GeneratedMessage<EquipLevel, EquipLevel.Builder> {
    private EquipLevel() { }
    private static readonly EquipLevel defaultInstance = new EquipLevel().MakeReadOnly();
    private static readonly string[] _equipLevelFieldNames = new string[] { "max_durabilit", "socketchan", "soulup", "stilettoprice", "upchance" };
    private static readonly uint[] _equipLevelFieldTags = new uint[] { 8, 40, 16, 24, 32 };
    public static EquipLevel DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override EquipLevel DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EquipLevel ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.template.WorldTemplate.internal__static_world_template_EquipLevel__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<EquipLevel, EquipLevel.Builder> InternalFieldAccessors {
      get { return global::world.template.WorldTemplate.internal__static_world_template_EquipLevel__FieldAccessorTable; }
    }
    
    public const int MaxDurabilitFieldNumber = 1;
    private bool hasMaxDurabilit;
    private int maxDurabilit_;
    public bool HasMaxDurabilit {
      get { return hasMaxDurabilit; }
    }
    public int MaxDurabilit {
      get { return maxDurabilit_; }
    }
    
    public const int SoulupFieldNumber = 2;
    private bool hasSoulup;
    private int soulup_;
    public bool HasSoulup {
      get { return hasSoulup; }
    }
    public int Soulup {
      get { return soulup_; }
    }
    
    public const int StilettopriceFieldNumber = 3;
    private bool hasStilettoprice;
    private int stilettoprice_;
    public bool HasStilettoprice {
      get { return hasStilettoprice; }
    }
    public int Stilettoprice {
      get { return stilettoprice_; }
    }
    
    public const int UpchanceFieldNumber = 4;
    private bool hasUpchance;
    private int upchance_;
    public bool HasUpchance {
      get { return hasUpchance; }
    }
    public int Upchance {
      get { return upchance_; }
    }
    
    public const int SocketchanFieldNumber = 5;
    private bool hasSocketchan;
    private int socketchan_;
    public bool HasSocketchan {
      get { return hasSocketchan; }
    }
    public int Socketchan {
      get { return socketchan_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasMaxDurabilit) return false;
        if (!hasSoulup) return false;
        if (!hasStilettoprice) return false;
        if (!hasUpchance) return false;
        if (!hasSocketchan) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _equipLevelFieldNames;
      if (hasMaxDurabilit) {
        output.WriteInt32(1, field_names[0], MaxDurabilit);
      }
      if (hasSoulup) {
        output.WriteInt32(2, field_names[2], Soulup);
      }
      if (hasStilettoprice) {
        output.WriteInt32(3, field_names[3], Stilettoprice);
      }
      if (hasUpchance) {
        output.WriteInt32(4, field_names[4], Upchance);
      }
      if (hasSocketchan) {
        output.WriteInt32(5, field_names[1], Socketchan);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasMaxDurabilit) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, MaxDurabilit);
        }
        if (hasSoulup) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Soulup);
        }
        if (hasStilettoprice) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Stilettoprice);
        }
        if (hasUpchance) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Upchance);
        }
        if (hasSocketchan) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Socketchan);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static EquipLevel ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EquipLevel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EquipLevel ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static EquipLevel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static EquipLevel ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EquipLevel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static EquipLevel ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static EquipLevel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static EquipLevel ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static EquipLevel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EquipLevel MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(EquipLevel prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<EquipLevel, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EquipLevel cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EquipLevel result;
      
      private EquipLevel PrepareBuilder() {
        if (resultIsReadOnly) {
          EquipLevel original = result;
          result = new EquipLevel();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EquipLevel MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.template.EquipLevel.Descriptor; }
      }
      
      public override EquipLevel DefaultInstanceForType {
        get { return global::world.template.EquipLevel.DefaultInstance; }
      }
      
      public override EquipLevel BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is EquipLevel) {
          return MergeFrom((EquipLevel) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EquipLevel other) {
        if (other == global::world.template.EquipLevel.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasMaxDurabilit) {
          MaxDurabilit = other.MaxDurabilit;
        }
        if (other.HasSoulup) {
          Soulup = other.Soulup;
        }
        if (other.HasStilettoprice) {
          Stilettoprice = other.Stilettoprice;
        }
        if (other.HasUpchance) {
          Upchance = other.Upchance;
        }
        if (other.HasSocketchan) {
          Socketchan = other.Socketchan;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_equipLevelFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _equipLevelFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasMaxDurabilit = input.ReadInt32(ref result.maxDurabilit_);
              break;
            }
            case 16: {
              result.hasSoulup = input.ReadInt32(ref result.soulup_);
              break;
            }
            case 24: {
              result.hasStilettoprice = input.ReadInt32(ref result.stilettoprice_);
              break;
            }
            case 32: {
              result.hasUpchance = input.ReadInt32(ref result.upchance_);
              break;
            }
            case 40: {
              result.hasSocketchan = input.ReadInt32(ref result.socketchan_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasMaxDurabilit {
        get { return result.hasMaxDurabilit; }
      }
      public int MaxDurabilit {
        get { return result.MaxDurabilit; }
        set { SetMaxDurabilit(value); }
      }
      public Builder SetMaxDurabilit(int value) {
        PrepareBuilder();
        result.hasMaxDurabilit = true;
        result.maxDurabilit_ = value;
        return this;
      }
      public Builder ClearMaxDurabilit() {
        PrepareBuilder();
        result.hasMaxDurabilit = false;
        result.maxDurabilit_ = 0;
        return this;
      }
      
      public bool HasSoulup {
        get { return result.hasSoulup; }
      }
      public int Soulup {
        get { return result.Soulup; }
        set { SetSoulup(value); }
      }
      public Builder SetSoulup(int value) {
        PrepareBuilder();
        result.hasSoulup = true;
        result.soulup_ = value;
        return this;
      }
      public Builder ClearSoulup() {
        PrepareBuilder();
        result.hasSoulup = false;
        result.soulup_ = 0;
        return this;
      }
      
      public bool HasStilettoprice {
        get { return result.hasStilettoprice; }
      }
      public int Stilettoprice {
        get { return result.Stilettoprice; }
        set { SetStilettoprice(value); }
      }
      public Builder SetStilettoprice(int value) {
        PrepareBuilder();
        result.hasStilettoprice = true;
        result.stilettoprice_ = value;
        return this;
      }
      public Builder ClearStilettoprice() {
        PrepareBuilder();
        result.hasStilettoprice = false;
        result.stilettoprice_ = 0;
        return this;
      }
      
      public bool HasUpchance {
        get { return result.hasUpchance; }
      }
      public int Upchance {
        get { return result.Upchance; }
        set { SetUpchance(value); }
      }
      public Builder SetUpchance(int value) {
        PrepareBuilder();
        result.hasUpchance = true;
        result.upchance_ = value;
        return this;
      }
      public Builder ClearUpchance() {
        PrepareBuilder();
        result.hasUpchance = false;
        result.upchance_ = 0;
        return this;
      }
      
      public bool HasSocketchan {
        get { return result.hasSocketchan; }
      }
      public int Socketchan {
        get { return result.Socketchan; }
        set { SetSocketchan(value); }
      }
      public Builder SetSocketchan(int value) {
        PrepareBuilder();
        result.hasSocketchan = true;
        result.socketchan_ = value;
        return this;
      }
      public Builder ClearSocketchan() {
        PrepareBuilder();
        result.hasSocketchan = false;
        result.socketchan_ = 0;
        return this;
      }
    }
    static EquipLevel() {
      object.ReferenceEquals(global::world.template.WorldTemplate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Equip : pb::GeneratedMessage<Equip, Equip.Builder> {
    private Equip() { }
    private static readonly Equip defaultInstance = new Equip().MakeReadOnly();
    private static readonly string[] _equipFieldNames = new string[] { "body", "effects", "equiplv", "item_info", "levels", "limits", "set_id", "sfbxyfjsjxs", "xzcsone", "xzcstwo" };
    private static readonly uint[] _equipFieldTags = new uint[] { 16, 114, 40, 10, 34, 106, 24, 64, 53, 61 };
    public static Equip DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Equip DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Equip ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Equip__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Equip, Equip.Builder> InternalFieldAccessors {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Equip__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum BodyPart {
        toukui = 0,
        hujian = 1,
        pifeng = 2,
        yifu = 3,
        yaodai = 4,
        hutui = 5,
        shoutao = 6,
        huwan = 7,
        xiezi = 8,
        wuqi = 9,
        xianglian = 10,
        jiezhi = 11,
        shizhuang = 12,
      }
      
    }
    #endregion
    
    public const int ItemInfoFieldNumber = 1;
    private bool hasItemInfo;
    private global::world.template.Item itemInfo_;
    public bool HasItemInfo {
      get { return hasItemInfo; }
    }
    public global::world.template.Item ItemInfo {
      get { return itemInfo_ ?? global::world.template.Item.DefaultInstance; }
    }
    
    public const int BodyFieldNumber = 2;
    private bool hasBody;
    private global::world.template.Equip.Types.BodyPart body_ = global::world.template.Equip.Types.BodyPart.toukui;
    public bool HasBody {
      get { return hasBody; }
    }
    public global::world.template.Equip.Types.BodyPart Body {
      get { return body_; }
    }
    
    public const int SetIdFieldNumber = 3;
    private bool hasSetId;
    private int setId_;
    public bool HasSetId {
      get { return hasSetId; }
    }
    public int SetId {
      get { return setId_; }
    }
    
    public const int LevelsFieldNumber = 4;
    private pbc::PopsicleList<global::world.template.EquipLevel> levels_ = new pbc::PopsicleList<global::world.template.EquipLevel>();
    public scg::IList<global::world.template.EquipLevel> LevelsList {
      get { return levels_; }
    }
    public int LevelsCount {
      get { return levels_.Count; }
    }
    public global::world.template.EquipLevel GetLevels(int index) {
      return levels_[index];
    }
    
    public const int EquiplvFieldNumber = 5;
    private bool hasEquiplv;
    private int equiplv_;
    public bool HasEquiplv {
      get { return hasEquiplv; }
    }
    public int Equiplv {
      get { return equiplv_; }
    }
    
    public const int XzcsoneFieldNumber = 6;
    private bool hasXzcsone;
    private float xzcsone_;
    public bool HasXzcsone {
      get { return hasXzcsone; }
    }
    public float Xzcsone {
      get { return xzcsone_; }
    }
    
    public const int XzcstwoFieldNumber = 7;
    private bool hasXzcstwo;
    private float xzcstwo_;
    public bool HasXzcstwo {
      get { return hasXzcstwo; }
    }
    public float Xzcstwo {
      get { return xzcstwo_; }
    }
    
    public const int SfbxyfjsjxsFieldNumber = 8;
    private bool hasSfbxyfjsjxs;
    private bool sfbxyfjsjxs_;
    public bool HasSfbxyfjsjxs {
      get { return hasSfbxyfjsjxs; }
    }
    public bool Sfbxyfjsjxs {
      get { return sfbxyfjsjxs_; }
    }
    
    public const int LimitsFieldNumber = 13;
    private pbc::PopsicleList<global::core.LimitValue> limits_ = new pbc::PopsicleList<global::core.LimitValue>();
    public scg::IList<global::core.LimitValue> LimitsList {
      get { return limits_; }
    }
    public int LimitsCount {
      get { return limits_.Count; }
    }
    public global::core.LimitValue GetLimits(int index) {
      return limits_[index];
    }
    
    public const int EffectsFieldNumber = 14;
    private pbc::PopsicleList<global::core.EffectValue> effects_ = new pbc::PopsicleList<global::core.EffectValue>();
    public scg::IList<global::core.EffectValue> EffectsList {
      get { return effects_; }
    }
    public int EffectsCount {
      get { return effects_.Count; }
    }
    public global::core.EffectValue GetEffects(int index) {
      return effects_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemInfo) return false;
        if (!hasBody) return false;
        if (!hasSetId) return false;
        if (!hasEquiplv) return false;
        if (!hasXzcsone) return false;
        if (!hasXzcstwo) return false;
        if (!hasSfbxyfjsjxs) return false;
        if (!ItemInfo.IsInitialized) return false;
        foreach (global::world.template.EquipLevel element in LevelsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::core.LimitValue element in LimitsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::core.EffectValue element in EffectsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _equipFieldNames;
      if (hasItemInfo) {
        output.WriteMessage(1, field_names[3], ItemInfo);
      }
      if (hasBody) {
        output.WriteEnum(2, field_names[0], (int) Body, Body);
      }
      if (hasSetId) {
        output.WriteInt32(3, field_names[6], SetId);
      }
      if (levels_.Count > 0) {
        output.WriteMessageArray(4, field_names[4], levels_);
      }
      if (hasEquiplv) {
        output.WriteInt32(5, field_names[2], Equiplv);
      }
      if (hasXzcsone) {
        output.WriteFloat(6, field_names[8], Xzcsone);
      }
      if (hasXzcstwo) {
        output.WriteFloat(7, field_names[9], Xzcstwo);
      }
      if (hasSfbxyfjsjxs) {
        output.WriteBool(8, field_names[7], Sfbxyfjsjxs);
      }
      if (limits_.Count > 0) {
        output.WriteMessageArray(13, field_names[5], limits_);
      }
      if (effects_.Count > 0) {
        output.WriteMessageArray(14, field_names[1], effects_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItemInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ItemInfo);
        }
        if (hasBody) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Body);
        }
        if (hasSetId) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, SetId);
        }
        foreach (global::world.template.EquipLevel element in LevelsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        if (hasEquiplv) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Equiplv);
        }
        if (hasXzcsone) {
          size += pb::CodedOutputStream.ComputeFloatSize(6, Xzcsone);
        }
        if (hasXzcstwo) {
          size += pb::CodedOutputStream.ComputeFloatSize(7, Xzcstwo);
        }
        if (hasSfbxyfjsjxs) {
          size += pb::CodedOutputStream.ComputeBoolSize(8, Sfbxyfjsjxs);
        }
        foreach (global::core.LimitValue element in LimitsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, element);
        }
        foreach (global::core.EffectValue element in EffectsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Equip ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Equip ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Equip ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Equip ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Equip ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Equip ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Equip ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Equip ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Equip ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Equip ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Equip MakeReadOnly() {
      levels_.MakeReadOnly();
      limits_.MakeReadOnly();
      effects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Equip prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Equip, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Equip cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Equip result;
      
      private Equip PrepareBuilder() {
        if (resultIsReadOnly) {
          Equip original = result;
          result = new Equip();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Equip MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.template.Equip.Descriptor; }
      }
      
      public override Equip DefaultInstanceForType {
        get { return global::world.template.Equip.DefaultInstance; }
      }
      
      public override Equip BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Equip) {
          return MergeFrom((Equip) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Equip other) {
        if (other == global::world.template.Equip.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemInfo) {
          MergeItemInfo(other.ItemInfo);
        }
        if (other.HasBody) {
          Body = other.Body;
        }
        if (other.HasSetId) {
          SetId = other.SetId;
        }
        if (other.levels_.Count != 0) {
          result.levels_.Add(other.levels_);
        }
        if (other.HasEquiplv) {
          Equiplv = other.Equiplv;
        }
        if (other.HasXzcsone) {
          Xzcsone = other.Xzcsone;
        }
        if (other.HasXzcstwo) {
          Xzcstwo = other.Xzcstwo;
        }
        if (other.HasSfbxyfjsjxs) {
          Sfbxyfjsjxs = other.Sfbxyfjsjxs;
        }
        if (other.limits_.Count != 0) {
          result.limits_.Add(other.limits_);
        }
        if (other.effects_.Count != 0) {
          result.effects_.Add(other.effects_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_equipFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _equipFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::world.template.Item.Builder subBuilder = global::world.template.Item.CreateBuilder();
              if (result.hasItemInfo) {
                subBuilder.MergeFrom(ItemInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ItemInfo = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.body_, out unknown)) {
                result.hasBody = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              result.hasSetId = input.ReadInt32(ref result.setId_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.levels_, global::world.template.EquipLevel.DefaultInstance, extensionRegistry);
              break;
            }
            case 40: {
              result.hasEquiplv = input.ReadInt32(ref result.equiplv_);
              break;
            }
            case 53: {
              result.hasXzcsone = input.ReadFloat(ref result.xzcsone_);
              break;
            }
            case 61: {
              result.hasXzcstwo = input.ReadFloat(ref result.xzcstwo_);
              break;
            }
            case 64: {
              result.hasSfbxyfjsjxs = input.ReadBool(ref result.sfbxyfjsjxs_);
              break;
            }
            case 106: {
              input.ReadMessageArray(tag, field_name, result.limits_, global::core.LimitValue.DefaultInstance, extensionRegistry);
              break;
            }
            case 114: {
              input.ReadMessageArray(tag, field_name, result.effects_, global::core.EffectValue.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemInfo {
       get { return result.hasItemInfo; }
      }
      public global::world.template.Item ItemInfo {
        get { return result.ItemInfo; }
        set { SetItemInfo(value); }
      }
      public Builder SetItemInfo(global::world.template.Item value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItemInfo = true;
        result.itemInfo_ = value;
        return this;
      }
      public Builder SetItemInfo(global::world.template.Item.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItemInfo = true;
        result.itemInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItemInfo(global::world.template.Item value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItemInfo &&
            result.itemInfo_ != global::world.template.Item.DefaultInstance) {
            result.itemInfo_ = global::world.template.Item.CreateBuilder(result.itemInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.itemInfo_ = value;
        }
        result.hasItemInfo = true;
        return this;
      }
      public Builder ClearItemInfo() {
        PrepareBuilder();
        result.hasItemInfo = false;
        result.itemInfo_ = null;
        return this;
      }
      
      public bool HasBody {
       get { return result.hasBody; }
      }
      public global::world.template.Equip.Types.BodyPart Body {
        get { return result.Body; }
        set { SetBody(value); }
      }
      public Builder SetBody(global::world.template.Equip.Types.BodyPart value) {
        PrepareBuilder();
        result.hasBody = true;
        result.body_ = value;
        return this;
      }
      public Builder ClearBody() {
        PrepareBuilder();
        result.hasBody = false;
        result.body_ = global::world.template.Equip.Types.BodyPart.toukui;
        return this;
      }
      
      public bool HasSetId {
        get { return result.hasSetId; }
      }
      public int SetId {
        get { return result.SetId; }
        set { SetSetId(value); }
      }
      public Builder SetSetId(int value) {
        PrepareBuilder();
        result.hasSetId = true;
        result.setId_ = value;
        return this;
      }
      public Builder ClearSetId() {
        PrepareBuilder();
        result.hasSetId = false;
        result.setId_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::world.template.EquipLevel> LevelsList {
        get { return PrepareBuilder().levels_; }
      }
      public int LevelsCount {
        get { return result.LevelsCount; }
      }
      public global::world.template.EquipLevel GetLevels(int index) {
        return result.GetLevels(index);
      }
      public Builder SetLevels(int index, global::world.template.EquipLevel value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.levels_[index] = value;
        return this;
      }
      public Builder SetLevels(int index, global::world.template.EquipLevel.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.levels_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLevels(global::world.template.EquipLevel value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.levels_.Add(value);
        return this;
      }
      public Builder AddLevels(global::world.template.EquipLevel.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.levels_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLevels(scg::IEnumerable<global::world.template.EquipLevel> values) {
        PrepareBuilder();
        result.levels_.Add(values);
        return this;
      }
      public Builder ClearLevels() {
        PrepareBuilder();
        result.levels_.Clear();
        return this;
      }
      
      public bool HasEquiplv {
        get { return result.hasEquiplv; }
      }
      public int Equiplv {
        get { return result.Equiplv; }
        set { SetEquiplv(value); }
      }
      public Builder SetEquiplv(int value) {
        PrepareBuilder();
        result.hasEquiplv = true;
        result.equiplv_ = value;
        return this;
      }
      public Builder ClearEquiplv() {
        PrepareBuilder();
        result.hasEquiplv = false;
        result.equiplv_ = 0;
        return this;
      }
      
      public bool HasXzcsone {
        get { return result.hasXzcsone; }
      }
      public float Xzcsone {
        get { return result.Xzcsone; }
        set { SetXzcsone(value); }
      }
      public Builder SetXzcsone(float value) {
        PrepareBuilder();
        result.hasXzcsone = true;
        result.xzcsone_ = value;
        return this;
      }
      public Builder ClearXzcsone() {
        PrepareBuilder();
        result.hasXzcsone = false;
        result.xzcsone_ = 0F;
        return this;
      }
      
      public bool HasXzcstwo {
        get { return result.hasXzcstwo; }
      }
      public float Xzcstwo {
        get { return result.Xzcstwo; }
        set { SetXzcstwo(value); }
      }
      public Builder SetXzcstwo(float value) {
        PrepareBuilder();
        result.hasXzcstwo = true;
        result.xzcstwo_ = value;
        return this;
      }
      public Builder ClearXzcstwo() {
        PrepareBuilder();
        result.hasXzcstwo = false;
        result.xzcstwo_ = 0F;
        return this;
      }
      
      public bool HasSfbxyfjsjxs {
        get { return result.hasSfbxyfjsjxs; }
      }
      public bool Sfbxyfjsjxs {
        get { return result.Sfbxyfjsjxs; }
        set { SetSfbxyfjsjxs(value); }
      }
      public Builder SetSfbxyfjsjxs(bool value) {
        PrepareBuilder();
        result.hasSfbxyfjsjxs = true;
        result.sfbxyfjsjxs_ = value;
        return this;
      }
      public Builder ClearSfbxyfjsjxs() {
        PrepareBuilder();
        result.hasSfbxyfjsjxs = false;
        result.sfbxyfjsjxs_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::core.LimitValue> LimitsList {
        get { return PrepareBuilder().limits_; }
      }
      public int LimitsCount {
        get { return result.LimitsCount; }
      }
      public global::core.LimitValue GetLimits(int index) {
        return result.GetLimits(index);
      }
      public Builder SetLimits(int index, global::core.LimitValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.limits_[index] = value;
        return this;
      }
      public Builder SetLimits(int index, global::core.LimitValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.limits_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLimits(global::core.LimitValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.limits_.Add(value);
        return this;
      }
      public Builder AddLimits(global::core.LimitValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.limits_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLimits(scg::IEnumerable<global::core.LimitValue> values) {
        PrepareBuilder();
        result.limits_.Add(values);
        return this;
      }
      public Builder ClearLimits() {
        PrepareBuilder();
        result.limits_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::core.EffectValue> EffectsList {
        get { return PrepareBuilder().effects_; }
      }
      public int EffectsCount {
        get { return result.EffectsCount; }
      }
      public global::core.EffectValue GetEffects(int index) {
        return result.GetEffects(index);
      }
      public Builder SetEffects(int index, global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_[index] = value;
        return this;
      }
      public Builder SetEffects(int index, global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEffects(global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_.Add(value);
        return this;
      }
      public Builder AddEffects(global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEffects(scg::IEnumerable<global::core.EffectValue> values) {
        PrepareBuilder();
        result.effects_.Add(values);
        return this;
      }
      public Builder ClearEffects() {
        PrepareBuilder();
        result.effects_.Clear();
        return this;
      }
    }
    static Equip() {
      object.ReferenceEquals(global::world.template.WorldTemplate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Prop : pb::GeneratedMessage<Prop, Prop.Builder> {
    private Prop() { }
    private static readonly Prop defaultInstance = new Prop().MakeReadOnly();
    private static readonly string[] _propFieldNames = new string[] { "act", "cooldown", "effects", "group", "item_info", "limits", "nodisappear", "onlyeffects", "overlap_max", "price", "type", "useable" };
    private static readonly uint[] _propFieldTags = new uint[] { 72, 40, 98, 32, 10, 90, 64, 56, 80, 18, 24, 48 };
    public static Prop DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Prop DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Prop ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Prop__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Prop, Prop.Builder> InternalFieldAccessors {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Prop__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Type {
        type0 = 0,
        type1 = 1,
        type2 = 2,
        type3 = 3,
        type4 = 4,
        type5 = 5,
        type6 = 6,
        type7 = 7,
        type8 = 8,
        type9 = 9,
        type10 = 10,
        type11 = 11,
        type12 = 12,
        type13 = 13,
        type14 = 14,
        type15 = 15,
        type16 = 16,
        type17 = 17,
        type18 = 18,
        type19 = 19,
        type20 = 20,
        type21 = 21,
        type22 = 22,
        type23 = 23,
        type24 = 24,
        type25 = 25,
        type26 = 26,
        type27 = 27,
        type28 = 28,
        type29 = 29,
        type30 = 30,
        type31 = 31,
        type32 = 32,
        type33 = 33,
        type34 = 34,
        type35 = 35,
        type36 = 36,
        type37 = 37,
      }
      
    }
    #endregion
    
    public const int ItemInfoFieldNumber = 1;
    private bool hasItemInfo;
    private global::world.template.Item itemInfo_;
    public bool HasItemInfo {
      get { return hasItemInfo; }
    }
    public global::world.template.Item ItemInfo {
      get { return itemInfo_ ?? global::world.template.Item.DefaultInstance; }
    }
    
    public const int PriceFieldNumber = 2;
    private bool hasPrice;
    private global::world.template.Price price_;
    public bool HasPrice {
      get { return hasPrice; }
    }
    public global::world.template.Price Price {
      get { return price_ ?? global::world.template.Price.DefaultInstance; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private global::world.template.Prop.Types.Type type_ = global::world.template.Prop.Types.Type.type0;
    public bool HasType {
      get { return hasType; }
    }
    public global::world.template.Prop.Types.Type Type {
      get { return type_; }
    }
    
    public const int GroupFieldNumber = 4;
    private bool hasGroup;
    private int group_;
    public bool HasGroup {
      get { return hasGroup; }
    }
    public int Group {
      get { return group_; }
    }
    
    public const int CooldownFieldNumber = 5;
    private bool hasCooldown;
    private int cooldown_;
    public bool HasCooldown {
      get { return hasCooldown; }
    }
    public int Cooldown {
      get { return cooldown_; }
    }
    
    public const int UseableFieldNumber = 6;
    private bool hasUseable;
    private bool useable_;
    public bool HasUseable {
      get { return hasUseable; }
    }
    public bool Useable {
      get { return useable_; }
    }
    
    public const int OnlyeffectsFieldNumber = 7;
    private bool hasOnlyeffects;
    private bool onlyeffects_;
    public bool HasOnlyeffects {
      get { return hasOnlyeffects; }
    }
    public bool Onlyeffects {
      get { return onlyeffects_; }
    }
    
    public const int NodisappearFieldNumber = 8;
    private bool hasNodisappear;
    private bool nodisappear_;
    public bool HasNodisappear {
      get { return hasNodisappear; }
    }
    public bool Nodisappear {
      get { return nodisappear_; }
    }
    
    public const int ActFieldNumber = 9;
    private bool hasAct;
    private bool act_;
    public bool HasAct {
      get { return hasAct; }
    }
    public bool Act {
      get { return act_; }
    }
    
    public const int OverlapMaxFieldNumber = 10;
    private bool hasOverlapMax;
    private int overlapMax_;
    public bool HasOverlapMax {
      get { return hasOverlapMax; }
    }
    public int OverlapMax {
      get { return overlapMax_; }
    }
    
    public const int LimitsFieldNumber = 11;
    private pbc::PopsicleList<global::core.LimitValue> limits_ = new pbc::PopsicleList<global::core.LimitValue>();
    public scg::IList<global::core.LimitValue> LimitsList {
      get { return limits_; }
    }
    public int LimitsCount {
      get { return limits_.Count; }
    }
    public global::core.LimitValue GetLimits(int index) {
      return limits_[index];
    }
    
    public const int EffectsFieldNumber = 12;
    private pbc::PopsicleList<global::core.EffectValue> effects_ = new pbc::PopsicleList<global::core.EffectValue>();
    public scg::IList<global::core.EffectValue> EffectsList {
      get { return effects_; }
    }
    public int EffectsCount {
      get { return effects_.Count; }
    }
    public global::core.EffectValue GetEffects(int index) {
      return effects_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemInfo) return false;
        if (!hasPrice) return false;
        if (!hasType) return false;
        if (!hasGroup) return false;
        if (!hasCooldown) return false;
        if (!hasUseable) return false;
        if (!hasOnlyeffects) return false;
        if (!hasNodisappear) return false;
        if (!hasAct) return false;
        if (!hasOverlapMax) return false;
        if (!ItemInfo.IsInitialized) return false;
        if (!Price.IsInitialized) return false;
        foreach (global::core.LimitValue element in LimitsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::core.EffectValue element in EffectsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _propFieldNames;
      if (hasItemInfo) {
        output.WriteMessage(1, field_names[4], ItemInfo);
      }
      if (hasPrice) {
        output.WriteMessage(2, field_names[9], Price);
      }
      if (hasType) {
        output.WriteEnum(3, field_names[10], (int) Type, Type);
      }
      if (hasGroup) {
        output.WriteInt32(4, field_names[3], Group);
      }
      if (hasCooldown) {
        output.WriteInt32(5, field_names[1], Cooldown);
      }
      if (hasUseable) {
        output.WriteBool(6, field_names[11], Useable);
      }
      if (hasOnlyeffects) {
        output.WriteBool(7, field_names[7], Onlyeffects);
      }
      if (hasNodisappear) {
        output.WriteBool(8, field_names[6], Nodisappear);
      }
      if (hasAct) {
        output.WriteBool(9, field_names[0], Act);
      }
      if (hasOverlapMax) {
        output.WriteInt32(10, field_names[8], OverlapMax);
      }
      if (limits_.Count > 0) {
        output.WriteMessageArray(11, field_names[5], limits_);
      }
      if (effects_.Count > 0) {
        output.WriteMessageArray(12, field_names[2], effects_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItemInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ItemInfo);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Price);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        if (hasGroup) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Group);
        }
        if (hasCooldown) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Cooldown);
        }
        if (hasUseable) {
          size += pb::CodedOutputStream.ComputeBoolSize(6, Useable);
        }
        if (hasOnlyeffects) {
          size += pb::CodedOutputStream.ComputeBoolSize(7, Onlyeffects);
        }
        if (hasNodisappear) {
          size += pb::CodedOutputStream.ComputeBoolSize(8, Nodisappear);
        }
        if (hasAct) {
          size += pb::CodedOutputStream.ComputeBoolSize(9, Act);
        }
        if (hasOverlapMax) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, OverlapMax);
        }
        foreach (global::core.LimitValue element in LimitsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(11, element);
        }
        foreach (global::core.EffectValue element in EffectsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Prop ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Prop ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Prop ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Prop ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Prop ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Prop ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Prop ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Prop ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Prop ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Prop ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Prop MakeReadOnly() {
      limits_.MakeReadOnly();
      effects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Prop prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Prop, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Prop cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Prop result;
      
      private Prop PrepareBuilder() {
        if (resultIsReadOnly) {
          Prop original = result;
          result = new Prop();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Prop MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.template.Prop.Descriptor; }
      }
      
      public override Prop DefaultInstanceForType {
        get { return global::world.template.Prop.DefaultInstance; }
      }
      
      public override Prop BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Prop) {
          return MergeFrom((Prop) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Prop other) {
        if (other == global::world.template.Prop.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemInfo) {
          MergeItemInfo(other.ItemInfo);
        }
        if (other.HasPrice) {
          MergePrice(other.Price);
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasGroup) {
          Group = other.Group;
        }
        if (other.HasCooldown) {
          Cooldown = other.Cooldown;
        }
        if (other.HasUseable) {
          Useable = other.Useable;
        }
        if (other.HasOnlyeffects) {
          Onlyeffects = other.Onlyeffects;
        }
        if (other.HasNodisappear) {
          Nodisappear = other.Nodisappear;
        }
        if (other.HasAct) {
          Act = other.Act;
        }
        if (other.HasOverlapMax) {
          OverlapMax = other.OverlapMax;
        }
        if (other.limits_.Count != 0) {
          result.limits_.Add(other.limits_);
        }
        if (other.effects_.Count != 0) {
          result.effects_.Add(other.effects_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_propFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _propFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::world.template.Item.Builder subBuilder = global::world.template.Item.CreateBuilder();
              if (result.hasItemInfo) {
                subBuilder.MergeFrom(ItemInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ItemInfo = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::world.template.Price.Builder subBuilder = global::world.template.Price.CreateBuilder();
              if (result.hasPrice) {
                subBuilder.MergeFrom(Price);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Price = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              result.hasGroup = input.ReadInt32(ref result.group_);
              break;
            }
            case 40: {
              result.hasCooldown = input.ReadInt32(ref result.cooldown_);
              break;
            }
            case 48: {
              result.hasUseable = input.ReadBool(ref result.useable_);
              break;
            }
            case 56: {
              result.hasOnlyeffects = input.ReadBool(ref result.onlyeffects_);
              break;
            }
            case 64: {
              result.hasNodisappear = input.ReadBool(ref result.nodisappear_);
              break;
            }
            case 72: {
              result.hasAct = input.ReadBool(ref result.act_);
              break;
            }
            case 80: {
              result.hasOverlapMax = input.ReadInt32(ref result.overlapMax_);
              break;
            }
            case 90: {
              input.ReadMessageArray(tag, field_name, result.limits_, global::core.LimitValue.DefaultInstance, extensionRegistry);
              break;
            }
            case 98: {
              input.ReadMessageArray(tag, field_name, result.effects_, global::core.EffectValue.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemInfo {
       get { return result.hasItemInfo; }
      }
      public global::world.template.Item ItemInfo {
        get { return result.ItemInfo; }
        set { SetItemInfo(value); }
      }
      public Builder SetItemInfo(global::world.template.Item value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItemInfo = true;
        result.itemInfo_ = value;
        return this;
      }
      public Builder SetItemInfo(global::world.template.Item.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItemInfo = true;
        result.itemInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItemInfo(global::world.template.Item value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItemInfo &&
            result.itemInfo_ != global::world.template.Item.DefaultInstance) {
            result.itemInfo_ = global::world.template.Item.CreateBuilder(result.itemInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.itemInfo_ = value;
        }
        result.hasItemInfo = true;
        return this;
      }
      public Builder ClearItemInfo() {
        PrepareBuilder();
        result.hasItemInfo = false;
        result.itemInfo_ = null;
        return this;
      }
      
      public bool HasPrice {
       get { return result.hasPrice; }
      }
      public global::world.template.Price Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(global::world.template.Price value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder SetPrice(global::world.template.Price.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = builderForValue.Build();
        return this;
      }
      public Builder MergePrice(global::world.template.Price value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPrice &&
            result.price_ != global::world.template.Price.DefaultInstance) {
            result.price_ = global::world.template.Price.CreateBuilder(result.price_).MergeFrom(value).BuildPartial();
        } else {
          result.price_ = value;
        }
        result.hasPrice = true;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.hasPrice = false;
        result.price_ = null;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::world.template.Prop.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::world.template.Prop.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::world.template.Prop.Types.Type.type0;
        return this;
      }
      
      public bool HasGroup {
        get { return result.hasGroup; }
      }
      public int Group {
        get { return result.Group; }
        set { SetGroup(value); }
      }
      public Builder SetGroup(int value) {
        PrepareBuilder();
        result.hasGroup = true;
        result.group_ = value;
        return this;
      }
      public Builder ClearGroup() {
        PrepareBuilder();
        result.hasGroup = false;
        result.group_ = 0;
        return this;
      }
      
      public bool HasCooldown {
        get { return result.hasCooldown; }
      }
      public int Cooldown {
        get { return result.Cooldown; }
        set { SetCooldown(value); }
      }
      public Builder SetCooldown(int value) {
        PrepareBuilder();
        result.hasCooldown = true;
        result.cooldown_ = value;
        return this;
      }
      public Builder ClearCooldown() {
        PrepareBuilder();
        result.hasCooldown = false;
        result.cooldown_ = 0;
        return this;
      }
      
      public bool HasUseable {
        get { return result.hasUseable; }
      }
      public bool Useable {
        get { return result.Useable; }
        set { SetUseable(value); }
      }
      public Builder SetUseable(bool value) {
        PrepareBuilder();
        result.hasUseable = true;
        result.useable_ = value;
        return this;
      }
      public Builder ClearUseable() {
        PrepareBuilder();
        result.hasUseable = false;
        result.useable_ = false;
        return this;
      }
      
      public bool HasOnlyeffects {
        get { return result.hasOnlyeffects; }
      }
      public bool Onlyeffects {
        get { return result.Onlyeffects; }
        set { SetOnlyeffects(value); }
      }
      public Builder SetOnlyeffects(bool value) {
        PrepareBuilder();
        result.hasOnlyeffects = true;
        result.onlyeffects_ = value;
        return this;
      }
      public Builder ClearOnlyeffects() {
        PrepareBuilder();
        result.hasOnlyeffects = false;
        result.onlyeffects_ = false;
        return this;
      }
      
      public bool HasNodisappear {
        get { return result.hasNodisappear; }
      }
      public bool Nodisappear {
        get { return result.Nodisappear; }
        set { SetNodisappear(value); }
      }
      public Builder SetNodisappear(bool value) {
        PrepareBuilder();
        result.hasNodisappear = true;
        result.nodisappear_ = value;
        return this;
      }
      public Builder ClearNodisappear() {
        PrepareBuilder();
        result.hasNodisappear = false;
        result.nodisappear_ = false;
        return this;
      }
      
      public bool HasAct {
        get { return result.hasAct; }
      }
      public bool Act {
        get { return result.Act; }
        set { SetAct(value); }
      }
      public Builder SetAct(bool value) {
        PrepareBuilder();
        result.hasAct = true;
        result.act_ = value;
        return this;
      }
      public Builder ClearAct() {
        PrepareBuilder();
        result.hasAct = false;
        result.act_ = false;
        return this;
      }
      
      public bool HasOverlapMax {
        get { return result.hasOverlapMax; }
      }
      public int OverlapMax {
        get { return result.OverlapMax; }
        set { SetOverlapMax(value); }
      }
      public Builder SetOverlapMax(int value) {
        PrepareBuilder();
        result.hasOverlapMax = true;
        result.overlapMax_ = value;
        return this;
      }
      public Builder ClearOverlapMax() {
        PrepareBuilder();
        result.hasOverlapMax = false;
        result.overlapMax_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::core.LimitValue> LimitsList {
        get { return PrepareBuilder().limits_; }
      }
      public int LimitsCount {
        get { return result.LimitsCount; }
      }
      public global::core.LimitValue GetLimits(int index) {
        return result.GetLimits(index);
      }
      public Builder SetLimits(int index, global::core.LimitValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.limits_[index] = value;
        return this;
      }
      public Builder SetLimits(int index, global::core.LimitValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.limits_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLimits(global::core.LimitValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.limits_.Add(value);
        return this;
      }
      public Builder AddLimits(global::core.LimitValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.limits_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLimits(scg::IEnumerable<global::core.LimitValue> values) {
        PrepareBuilder();
        result.limits_.Add(values);
        return this;
      }
      public Builder ClearLimits() {
        PrepareBuilder();
        result.limits_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::core.EffectValue> EffectsList {
        get { return PrepareBuilder().effects_; }
      }
      public int EffectsCount {
        get { return result.EffectsCount; }
      }
      public global::core.EffectValue GetEffects(int index) {
        return result.GetEffects(index);
      }
      public Builder SetEffects(int index, global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_[index] = value;
        return this;
      }
      public Builder SetEffects(int index, global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEffects(global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_.Add(value);
        return this;
      }
      public Builder AddEffects(global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEffects(scg::IEnumerable<global::core.EffectValue> values) {
        PrepareBuilder();
        result.effects_.Add(values);
        return this;
      }
      public Builder ClearEffects() {
        PrepareBuilder();
        result.effects_.Clear();
        return this;
      }
    }
    static Prop() {
      object.ReferenceEquals(global::world.template.WorldTemplate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Gem : pb::GeneratedMessage<Gem, Gem.Builder> {
    private Gem() { }
    private static readonly Gem defaultInstance = new Gem().MakeReadOnly();
    private static readonly string[] _gemFieldNames = new string[] { "effects", "glow_level", "item_info", "price" };
    private static readonly uint[] _gemFieldTags = new uint[] { 34, 24, 10, 18 };
    public static Gem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Gem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Gem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Gem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Gem, Gem.Builder> InternalFieldAccessors {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Gem__FieldAccessorTable; }
    }
    
    public const int ItemInfoFieldNumber = 1;
    private bool hasItemInfo;
    private global::world.template.Item itemInfo_;
    public bool HasItemInfo {
      get { return hasItemInfo; }
    }
    public global::world.template.Item ItemInfo {
      get { return itemInfo_ ?? global::world.template.Item.DefaultInstance; }
    }
    
    public const int PriceFieldNumber = 2;
    private bool hasPrice;
    private global::world.template.Price price_;
    public bool HasPrice {
      get { return hasPrice; }
    }
    public global::world.template.Price Price {
      get { return price_ ?? global::world.template.Price.DefaultInstance; }
    }
    
    public const int GlowLevelFieldNumber = 3;
    private bool hasGlowLevel;
    private int glowLevel_;
    public bool HasGlowLevel {
      get { return hasGlowLevel; }
    }
    public int GlowLevel {
      get { return glowLevel_; }
    }
    
    public const int EffectsFieldNumber = 4;
    private pbc::PopsicleList<global::core.EffectValue> effects_ = new pbc::PopsicleList<global::core.EffectValue>();
    public scg::IList<global::core.EffectValue> EffectsList {
      get { return effects_; }
    }
    public int EffectsCount {
      get { return effects_.Count; }
    }
    public global::core.EffectValue GetEffects(int index) {
      return effects_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemInfo) return false;
        if (!hasPrice) return false;
        if (!hasGlowLevel) return false;
        if (!ItemInfo.IsInitialized) return false;
        if (!Price.IsInitialized) return false;
        foreach (global::core.EffectValue element in EffectsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gemFieldNames;
      if (hasItemInfo) {
        output.WriteMessage(1, field_names[2], ItemInfo);
      }
      if (hasPrice) {
        output.WriteMessage(2, field_names[3], Price);
      }
      if (hasGlowLevel) {
        output.WriteInt32(3, field_names[1], GlowLevel);
      }
      if (effects_.Count > 0) {
        output.WriteMessageArray(4, field_names[0], effects_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItemInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ItemInfo);
        }
        if (hasPrice) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Price);
        }
        if (hasGlowLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, GlowLevel);
        }
        foreach (global::core.EffectValue element in EffectsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Gem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Gem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Gem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Gem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Gem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Gem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Gem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Gem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Gem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Gem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Gem MakeReadOnly() {
      effects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Gem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Gem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Gem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Gem result;
      
      private Gem PrepareBuilder() {
        if (resultIsReadOnly) {
          Gem original = result;
          result = new Gem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Gem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.template.Gem.Descriptor; }
      }
      
      public override Gem DefaultInstanceForType {
        get { return global::world.template.Gem.DefaultInstance; }
      }
      
      public override Gem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Gem) {
          return MergeFrom((Gem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Gem other) {
        if (other == global::world.template.Gem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemInfo) {
          MergeItemInfo(other.ItemInfo);
        }
        if (other.HasPrice) {
          MergePrice(other.Price);
        }
        if (other.HasGlowLevel) {
          GlowLevel = other.GlowLevel;
        }
        if (other.effects_.Count != 0) {
          result.effects_.Add(other.effects_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::world.template.Item.Builder subBuilder = global::world.template.Item.CreateBuilder();
              if (result.hasItemInfo) {
                subBuilder.MergeFrom(ItemInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ItemInfo = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::world.template.Price.Builder subBuilder = global::world.template.Price.CreateBuilder();
              if (result.hasPrice) {
                subBuilder.MergeFrom(Price);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Price = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasGlowLevel = input.ReadInt32(ref result.glowLevel_);
              break;
            }
            case 34: {
              input.ReadMessageArray(tag, field_name, result.effects_, global::core.EffectValue.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemInfo {
       get { return result.hasItemInfo; }
      }
      public global::world.template.Item ItemInfo {
        get { return result.ItemInfo; }
        set { SetItemInfo(value); }
      }
      public Builder SetItemInfo(global::world.template.Item value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItemInfo = true;
        result.itemInfo_ = value;
        return this;
      }
      public Builder SetItemInfo(global::world.template.Item.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItemInfo = true;
        result.itemInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItemInfo(global::world.template.Item value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItemInfo &&
            result.itemInfo_ != global::world.template.Item.DefaultInstance) {
            result.itemInfo_ = global::world.template.Item.CreateBuilder(result.itemInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.itemInfo_ = value;
        }
        result.hasItemInfo = true;
        return this;
      }
      public Builder ClearItemInfo() {
        PrepareBuilder();
        result.hasItemInfo = false;
        result.itemInfo_ = null;
        return this;
      }
      
      public bool HasPrice {
       get { return result.hasPrice; }
      }
      public global::world.template.Price Price {
        get { return result.Price; }
        set { SetPrice(value); }
      }
      public Builder SetPrice(global::world.template.Price value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = value;
        return this;
      }
      public Builder SetPrice(global::world.template.Price.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPrice = true;
        result.price_ = builderForValue.Build();
        return this;
      }
      public Builder MergePrice(global::world.template.Price value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPrice &&
            result.price_ != global::world.template.Price.DefaultInstance) {
            result.price_ = global::world.template.Price.CreateBuilder(result.price_).MergeFrom(value).BuildPartial();
        } else {
          result.price_ = value;
        }
        result.hasPrice = true;
        return this;
      }
      public Builder ClearPrice() {
        PrepareBuilder();
        result.hasPrice = false;
        result.price_ = null;
        return this;
      }
      
      public bool HasGlowLevel {
        get { return result.hasGlowLevel; }
      }
      public int GlowLevel {
        get { return result.GlowLevel; }
        set { SetGlowLevel(value); }
      }
      public Builder SetGlowLevel(int value) {
        PrepareBuilder();
        result.hasGlowLevel = true;
        result.glowLevel_ = value;
        return this;
      }
      public Builder ClearGlowLevel() {
        PrepareBuilder();
        result.hasGlowLevel = false;
        result.glowLevel_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::core.EffectValue> EffectsList {
        get { return PrepareBuilder().effects_; }
      }
      public int EffectsCount {
        get { return result.EffectsCount; }
      }
      public global::core.EffectValue GetEffects(int index) {
        return result.GetEffects(index);
      }
      public Builder SetEffects(int index, global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_[index] = value;
        return this;
      }
      public Builder SetEffects(int index, global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEffects(global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_.Add(value);
        return this;
      }
      public Builder AddEffects(global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEffects(scg::IEnumerable<global::core.EffectValue> values) {
        PrepareBuilder();
        result.effects_.Add(values);
        return this;
      }
      public Builder ClearEffects() {
        PrepareBuilder();
        result.effects_.Clear();
        return this;
      }
    }
    static Gem() {
      object.ReferenceEquals(global::world.template.WorldTemplate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class TalismaFix : pb::GeneratedMessage<TalismaFix, TalismaFix.Builder> {
    private TalismaFix() { }
    private static readonly TalismaFix defaultInstance = new TalismaFix().MakeReadOnly();
    private static readonly string[] _talismaFixFieldNames = new string[] { "effects", "id", "name" };
    private static readonly uint[] _talismaFixFieldTags = new uint[] { 26, 8, 16 };
    public static TalismaFix DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TalismaFix DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TalismaFix ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.template.WorldTemplate.internal__static_world_template_TalismaFix__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TalismaFix, TalismaFix.Builder> InternalFieldAccessors {
      get { return global::world.template.WorldTemplate.internal__static_world_template_TalismaFix__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private int name_;
    public bool HasName {
      get { return hasName; }
    }
    public int Name {
      get { return name_; }
    }
    
    public const int EffectsFieldNumber = 3;
    private pbc::PopsicleList<global::core.EffectValue> effects_ = new pbc::PopsicleList<global::core.EffectValue>();
    public scg::IList<global::core.EffectValue> EffectsList {
      get { return effects_; }
    }
    public int EffectsCount {
      get { return effects_.Count; }
    }
    public global::core.EffectValue GetEffects(int index) {
      return effects_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasName) return false;
        foreach (global::core.EffectValue element in EffectsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _talismaFixFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (hasName) {
        output.WriteInt32(2, field_names[2], Name);
      }
      if (effects_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], effects_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Name);
        }
        foreach (global::core.EffectValue element in EffectsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static TalismaFix ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TalismaFix ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TalismaFix ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TalismaFix ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TalismaFix ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TalismaFix ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TalismaFix ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TalismaFix ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TalismaFix ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TalismaFix ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TalismaFix MakeReadOnly() {
      effects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TalismaFix prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<TalismaFix, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TalismaFix cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TalismaFix result;
      
      private TalismaFix PrepareBuilder() {
        if (resultIsReadOnly) {
          TalismaFix original = result;
          result = new TalismaFix();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TalismaFix MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.template.TalismaFix.Descriptor; }
      }
      
      public override TalismaFix DefaultInstanceForType {
        get { return global::world.template.TalismaFix.DefaultInstance; }
      }
      
      public override TalismaFix BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TalismaFix) {
          return MergeFrom((TalismaFix) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TalismaFix other) {
        if (other == global::world.template.TalismaFix.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.effects_.Count != 0) {
          result.effects_.Add(other.effects_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_talismaFixFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _talismaFixFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasName = input.ReadInt32(ref result.name_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.effects_, global::core.EffectValue.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public int Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(int value) {
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::core.EffectValue> EffectsList {
        get { return PrepareBuilder().effects_; }
      }
      public int EffectsCount {
        get { return result.EffectsCount; }
      }
      public global::core.EffectValue GetEffects(int index) {
        return result.GetEffects(index);
      }
      public Builder SetEffects(int index, global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_[index] = value;
        return this;
      }
      public Builder SetEffects(int index, global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEffects(global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_.Add(value);
        return this;
      }
      public Builder AddEffects(global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEffects(scg::IEnumerable<global::core.EffectValue> values) {
        PrepareBuilder();
        result.effects_.Add(values);
        return this;
      }
      public Builder ClearEffects() {
        PrepareBuilder();
        result.effects_.Clear();
        return this;
      }
    }
    static TalismaFix() {
      object.ReferenceEquals(global::world.template.WorldTemplate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Talisma : pb::GeneratedMessage<Talisma, Talisma.Builder> {
    private Talisma() { }
    private static readonly Talisma defaultInstance = new Talisma().MakeReadOnly();
    private static readonly string[] _talismaFieldNames = new string[] { "effects", "item_info" };
    private static readonly uint[] _talismaFieldTags = new uint[] { 18, 10 };
    public static Talisma DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Talisma DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Talisma ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Talisma__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Talisma, Talisma.Builder> InternalFieldAccessors {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Talisma__FieldAccessorTable; }
    }
    
    public const int ItemInfoFieldNumber = 1;
    private bool hasItemInfo;
    private global::world.template.Item itemInfo_;
    public bool HasItemInfo {
      get { return hasItemInfo; }
    }
    public global::world.template.Item ItemInfo {
      get { return itemInfo_ ?? global::world.template.Item.DefaultInstance; }
    }
    
    public const int EffectsFieldNumber = 2;
    private pbc::PopsicleList<global::core.EffectValue> effects_ = new pbc::PopsicleList<global::core.EffectValue>();
    public scg::IList<global::core.EffectValue> EffectsList {
      get { return effects_; }
    }
    public int EffectsCount {
      get { return effects_.Count; }
    }
    public global::core.EffectValue GetEffects(int index) {
      return effects_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemInfo) return false;
        if (!ItemInfo.IsInitialized) return false;
        foreach (global::core.EffectValue element in EffectsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _talismaFieldNames;
      if (hasItemInfo) {
        output.WriteMessage(1, field_names[1], ItemInfo);
      }
      if (effects_.Count > 0) {
        output.WriteMessageArray(2, field_names[0], effects_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasItemInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ItemInfo);
        }
        foreach (global::core.EffectValue element in EffectsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Talisma ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Talisma ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Talisma ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Talisma ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Talisma ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Talisma ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Talisma ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Talisma ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Talisma ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Talisma ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Talisma MakeReadOnly() {
      effects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Talisma prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Talisma, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Talisma cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Talisma result;
      
      private Talisma PrepareBuilder() {
        if (resultIsReadOnly) {
          Talisma original = result;
          result = new Talisma();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Talisma MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.template.Talisma.Descriptor; }
      }
      
      public override Talisma DefaultInstanceForType {
        get { return global::world.template.Talisma.DefaultInstance; }
      }
      
      public override Talisma BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Talisma) {
          return MergeFrom((Talisma) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Talisma other) {
        if (other == global::world.template.Talisma.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemInfo) {
          MergeItemInfo(other.ItemInfo);
        }
        if (other.effects_.Count != 0) {
          result.effects_.Add(other.effects_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_talismaFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _talismaFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::world.template.Item.Builder subBuilder = global::world.template.Item.CreateBuilder();
              if (result.hasItemInfo) {
                subBuilder.MergeFrom(ItemInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ItemInfo = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.effects_, global::core.EffectValue.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemInfo {
       get { return result.hasItemInfo; }
      }
      public global::world.template.Item ItemInfo {
        get { return result.ItemInfo; }
        set { SetItemInfo(value); }
      }
      public Builder SetItemInfo(global::world.template.Item value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasItemInfo = true;
        result.itemInfo_ = value;
        return this;
      }
      public Builder SetItemInfo(global::world.template.Item.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasItemInfo = true;
        result.itemInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeItemInfo(global::world.template.Item value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasItemInfo &&
            result.itemInfo_ != global::world.template.Item.DefaultInstance) {
            result.itemInfo_ = global::world.template.Item.CreateBuilder(result.itemInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.itemInfo_ = value;
        }
        result.hasItemInfo = true;
        return this;
      }
      public Builder ClearItemInfo() {
        PrepareBuilder();
        result.hasItemInfo = false;
        result.itemInfo_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::core.EffectValue> EffectsList {
        get { return PrepareBuilder().effects_; }
      }
      public int EffectsCount {
        get { return result.EffectsCount; }
      }
      public global::core.EffectValue GetEffects(int index) {
        return result.GetEffects(index);
      }
      public Builder SetEffects(int index, global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_[index] = value;
        return this;
      }
      public Builder SetEffects(int index, global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEffects(global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_.Add(value);
        return this;
      }
      public Builder AddEffects(global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEffects(scg::IEnumerable<global::core.EffectValue> values) {
        PrepareBuilder();
        result.effects_.Add(values);
        return this;
      }
      public Builder ClearEffects() {
        PrepareBuilder();
        result.effects_.Clear();
        return this;
      }
    }
    static Talisma() {
      object.ReferenceEquals(global::world.template.WorldTemplate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class JingLian : pb::GeneratedMessage<JingLian, JingLian.Builder> {
    private JingLian() { }
    private static readonly JingLian defaultInstance = new JingLian().MakeReadOnly();
    private static readonly string[] _jingLianFieldNames = new string[] { "base_info", "butian", "effects", "huiguangyanse", "jin", "jinggang", "level", "part", "tie", "tong", "yin" };
    private static readonly uint[] _jingLianFieldTags = new uint[] { 10, 16, 250, 80, 32, 24, 72, 64, 56, 48, 40 };
    public static JingLian DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JingLian DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override JingLian ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.template.WorldTemplate.internal__static_world_template_JingLian__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JingLian, JingLian.Builder> InternalFieldAccessors {
      get { return global::world.template.WorldTemplate.internal__static_world_template_JingLian__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Part {
        Weapon = 0,
        Up = 1,
        Down = 2,
        ShiPin = 3,
      }
      
    }
    #endregion
    
    public const int BaseInfoFieldNumber = 1;
    private bool hasBaseInfo;
    private global::core.Base baseInfo_;
    public bool HasBaseInfo {
      get { return hasBaseInfo; }
    }
    public global::core.Base BaseInfo {
      get { return baseInfo_ ?? global::core.Base.DefaultInstance; }
    }
    
    public const int ButianFieldNumber = 2;
    private bool hasButian;
    private int butian_;
    public bool HasButian {
      get { return hasButian; }
    }
    public int Butian {
      get { return butian_; }
    }
    
    public const int JinggangFieldNumber = 3;
    private bool hasJinggang;
    private int jinggang_;
    public bool HasJinggang {
      get { return hasJinggang; }
    }
    public int Jinggang {
      get { return jinggang_; }
    }
    
    public const int JinFieldNumber = 4;
    private bool hasJin;
    private int jin_;
    public bool HasJin {
      get { return hasJin; }
    }
    public int Jin {
      get { return jin_; }
    }
    
    public const int YinFieldNumber = 5;
    private bool hasYin;
    private int yin_;
    public bool HasYin {
      get { return hasYin; }
    }
    public int Yin {
      get { return yin_; }
    }
    
    public const int TongFieldNumber = 6;
    private bool hasTong;
    private int tong_;
    public bool HasTong {
      get { return hasTong; }
    }
    public int Tong {
      get { return tong_; }
    }
    
    public const int TieFieldNumber = 7;
    private bool hasTie;
    private int tie_;
    public bool HasTie {
      get { return hasTie; }
    }
    public int Tie {
      get { return tie_; }
    }
    
    public const int PartFieldNumber = 8;
    private bool hasPart;
    private global::world.template.JingLian.Types.Part part_ = global::world.template.JingLian.Types.Part.Weapon;
    public bool HasPart {
      get { return hasPart; }
    }
    public global::world.template.JingLian.Types.Part Part {
      get { return part_; }
    }
    
    public const int LevelFieldNumber = 9;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int HuiguangyanseFieldNumber = 10;
    private bool hasHuiguangyanse;
    private int huiguangyanse_;
    public bool HasHuiguangyanse {
      get { return hasHuiguangyanse; }
    }
    public int Huiguangyanse {
      get { return huiguangyanse_; }
    }
    
    public const int EffectsFieldNumber = 31;
    private pbc::PopsicleList<global::core.EffectValue> effects_ = new pbc::PopsicleList<global::core.EffectValue>();
    public scg::IList<global::core.EffectValue> EffectsList {
      get { return effects_; }
    }
    public int EffectsCount {
      get { return effects_.Count; }
    }
    public global::core.EffectValue GetEffects(int index) {
      return effects_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBaseInfo) return false;
        if (!hasButian) return false;
        if (!hasJinggang) return false;
        if (!hasJin) return false;
        if (!hasYin) return false;
        if (!hasTong) return false;
        if (!hasTie) return false;
        if (!hasPart) return false;
        if (!hasLevel) return false;
        if (!hasHuiguangyanse) return false;
        if (!BaseInfo.IsInitialized) return false;
        foreach (global::core.EffectValue element in EffectsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _jingLianFieldNames;
      if (hasBaseInfo) {
        output.WriteMessage(1, field_names[0], BaseInfo);
      }
      if (hasButian) {
        output.WriteInt32(2, field_names[1], Butian);
      }
      if (hasJinggang) {
        output.WriteInt32(3, field_names[5], Jinggang);
      }
      if (hasJin) {
        output.WriteInt32(4, field_names[4], Jin);
      }
      if (hasYin) {
        output.WriteInt32(5, field_names[10], Yin);
      }
      if (hasTong) {
        output.WriteInt32(6, field_names[9], Tong);
      }
      if (hasTie) {
        output.WriteInt32(7, field_names[8], Tie);
      }
      if (hasPart) {
        output.WriteEnum(8, field_names[7], (int) Part, Part);
      }
      if (hasLevel) {
        output.WriteInt32(9, field_names[6], Level);
      }
      if (hasHuiguangyanse) {
        output.WriteInt32(10, field_names[3], Huiguangyanse);
      }
      if (effects_.Count > 0) {
        output.WriteMessageArray(31, field_names[2], effects_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBaseInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BaseInfo);
        }
        if (hasButian) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Butian);
        }
        if (hasJinggang) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Jinggang);
        }
        if (hasJin) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Jin);
        }
        if (hasYin) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Yin);
        }
        if (hasTong) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Tong);
        }
        if (hasTie) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, Tie);
        }
        if (hasPart) {
          size += pb::CodedOutputStream.ComputeEnumSize(8, (int) Part);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, Level);
        }
        if (hasHuiguangyanse) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, Huiguangyanse);
        }
        foreach (global::core.EffectValue element in EffectsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(31, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static JingLian ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JingLian ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JingLian ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JingLian ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JingLian ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JingLian ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JingLian ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static JingLian ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static JingLian ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JingLian ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private JingLian MakeReadOnly() {
      effects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JingLian prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<JingLian, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(JingLian cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private JingLian result;
      
      private JingLian PrepareBuilder() {
        if (resultIsReadOnly) {
          JingLian original = result;
          result = new JingLian();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override JingLian MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.template.JingLian.Descriptor; }
      }
      
      public override JingLian DefaultInstanceForType {
        get { return global::world.template.JingLian.DefaultInstance; }
      }
      
      public override JingLian BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JingLian) {
          return MergeFrom((JingLian) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JingLian other) {
        if (other == global::world.template.JingLian.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBaseInfo) {
          MergeBaseInfo(other.BaseInfo);
        }
        if (other.HasButian) {
          Butian = other.Butian;
        }
        if (other.HasJinggang) {
          Jinggang = other.Jinggang;
        }
        if (other.HasJin) {
          Jin = other.Jin;
        }
        if (other.HasYin) {
          Yin = other.Yin;
        }
        if (other.HasTong) {
          Tong = other.Tong;
        }
        if (other.HasTie) {
          Tie = other.Tie;
        }
        if (other.HasPart) {
          Part = other.Part;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasHuiguangyanse) {
          Huiguangyanse = other.Huiguangyanse;
        }
        if (other.effects_.Count != 0) {
          result.effects_.Add(other.effects_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_jingLianFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _jingLianFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::core.Base.Builder subBuilder = global::core.Base.CreateBuilder();
              if (result.hasBaseInfo) {
                subBuilder.MergeFrom(BaseInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseInfo = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasButian = input.ReadInt32(ref result.butian_);
              break;
            }
            case 24: {
              result.hasJinggang = input.ReadInt32(ref result.jinggang_);
              break;
            }
            case 32: {
              result.hasJin = input.ReadInt32(ref result.jin_);
              break;
            }
            case 40: {
              result.hasYin = input.ReadInt32(ref result.yin_);
              break;
            }
            case 48: {
              result.hasTong = input.ReadInt32(ref result.tong_);
              break;
            }
            case 56: {
              result.hasTie = input.ReadInt32(ref result.tie_);
              break;
            }
            case 64: {
              object unknown;
              if(input.ReadEnum(ref result.part_, out unknown)) {
                result.hasPart = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(8, (ulong)(int)unknown);
              }
              break;
            }
            case 72: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 80: {
              result.hasHuiguangyanse = input.ReadInt32(ref result.huiguangyanse_);
              break;
            }
            case 250: {
              input.ReadMessageArray(tag, field_name, result.effects_, global::core.EffectValue.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBaseInfo {
       get { return result.hasBaseInfo; }
      }
      public global::core.Base BaseInfo {
        get { return result.BaseInfo; }
        set { SetBaseInfo(value); }
      }
      public Builder SetBaseInfo(global::core.Base value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseInfo = true;
        result.baseInfo_ = value;
        return this;
      }
      public Builder SetBaseInfo(global::core.Base.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseInfo = true;
        result.baseInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseInfo(global::core.Base value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseInfo &&
            result.baseInfo_ != global::core.Base.DefaultInstance) {
            result.baseInfo_ = global::core.Base.CreateBuilder(result.baseInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.baseInfo_ = value;
        }
        result.hasBaseInfo = true;
        return this;
      }
      public Builder ClearBaseInfo() {
        PrepareBuilder();
        result.hasBaseInfo = false;
        result.baseInfo_ = null;
        return this;
      }
      
      public bool HasButian {
        get { return result.hasButian; }
      }
      public int Butian {
        get { return result.Butian; }
        set { SetButian(value); }
      }
      public Builder SetButian(int value) {
        PrepareBuilder();
        result.hasButian = true;
        result.butian_ = value;
        return this;
      }
      public Builder ClearButian() {
        PrepareBuilder();
        result.hasButian = false;
        result.butian_ = 0;
        return this;
      }
      
      public bool HasJinggang {
        get { return result.hasJinggang; }
      }
      public int Jinggang {
        get { return result.Jinggang; }
        set { SetJinggang(value); }
      }
      public Builder SetJinggang(int value) {
        PrepareBuilder();
        result.hasJinggang = true;
        result.jinggang_ = value;
        return this;
      }
      public Builder ClearJinggang() {
        PrepareBuilder();
        result.hasJinggang = false;
        result.jinggang_ = 0;
        return this;
      }
      
      public bool HasJin {
        get { return result.hasJin; }
      }
      public int Jin {
        get { return result.Jin; }
        set { SetJin(value); }
      }
      public Builder SetJin(int value) {
        PrepareBuilder();
        result.hasJin = true;
        result.jin_ = value;
        return this;
      }
      public Builder ClearJin() {
        PrepareBuilder();
        result.hasJin = false;
        result.jin_ = 0;
        return this;
      }
      
      public bool HasYin {
        get { return result.hasYin; }
      }
      public int Yin {
        get { return result.Yin; }
        set { SetYin(value); }
      }
      public Builder SetYin(int value) {
        PrepareBuilder();
        result.hasYin = true;
        result.yin_ = value;
        return this;
      }
      public Builder ClearYin() {
        PrepareBuilder();
        result.hasYin = false;
        result.yin_ = 0;
        return this;
      }
      
      public bool HasTong {
        get { return result.hasTong; }
      }
      public int Tong {
        get { return result.Tong; }
        set { SetTong(value); }
      }
      public Builder SetTong(int value) {
        PrepareBuilder();
        result.hasTong = true;
        result.tong_ = value;
        return this;
      }
      public Builder ClearTong() {
        PrepareBuilder();
        result.hasTong = false;
        result.tong_ = 0;
        return this;
      }
      
      public bool HasTie {
        get { return result.hasTie; }
      }
      public int Tie {
        get { return result.Tie; }
        set { SetTie(value); }
      }
      public Builder SetTie(int value) {
        PrepareBuilder();
        result.hasTie = true;
        result.tie_ = value;
        return this;
      }
      public Builder ClearTie() {
        PrepareBuilder();
        result.hasTie = false;
        result.tie_ = 0;
        return this;
      }
      
      public bool HasPart {
       get { return result.hasPart; }
      }
      public global::world.template.JingLian.Types.Part Part {
        get { return result.Part; }
        set { SetPart(value); }
      }
      public Builder SetPart(global::world.template.JingLian.Types.Part value) {
        PrepareBuilder();
        result.hasPart = true;
        result.part_ = value;
        return this;
      }
      public Builder ClearPart() {
        PrepareBuilder();
        result.hasPart = false;
        result.part_ = global::world.template.JingLian.Types.Part.Weapon;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasHuiguangyanse {
        get { return result.hasHuiguangyanse; }
      }
      public int Huiguangyanse {
        get { return result.Huiguangyanse; }
        set { SetHuiguangyanse(value); }
      }
      public Builder SetHuiguangyanse(int value) {
        PrepareBuilder();
        result.hasHuiguangyanse = true;
        result.huiguangyanse_ = value;
        return this;
      }
      public Builder ClearHuiguangyanse() {
        PrepareBuilder();
        result.hasHuiguangyanse = false;
        result.huiguangyanse_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::core.EffectValue> EffectsList {
        get { return PrepareBuilder().effects_; }
      }
      public int EffectsCount {
        get { return result.EffectsCount; }
      }
      public global::core.EffectValue GetEffects(int index) {
        return result.GetEffects(index);
      }
      public Builder SetEffects(int index, global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_[index] = value;
        return this;
      }
      public Builder SetEffects(int index, global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEffects(global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_.Add(value);
        return this;
      }
      public Builder AddEffects(global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEffects(scg::IEnumerable<global::core.EffectValue> values) {
        PrepareBuilder();
        result.effects_.Add(values);
        return this;
      }
      public Builder ClearEffects() {
        PrepareBuilder();
        result.effects_.Clear();
        return this;
      }
    }
    static JingLian() {
      object.ReferenceEquals(global::world.template.WorldTemplate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Map : pb::GeneratedMessage<Map, Map.Builder> {
    private Map() { }
    private static readonly Map defaultInstance = new Map().MakeReadOnly();
    private static readonly string[] _mapFieldNames = new string[] { "base_info", "cell", "height", "type", "width" };
    private static readonly uint[] _mapFieldTags = new uint[] { 10, 32, 24, 40, 16 };
    public static Map DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Map DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Map ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Map__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Map, Map.Builder> InternalFieldAccessors {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Map__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Type {
        Type_0 = 0,
        Type_1 = 1,
        Type_2 = 2,
        Type_3 = 3,
      }
      
    }
    #endregion
    
    public const int BaseInfoFieldNumber = 1;
    private bool hasBaseInfo;
    private global::core.Base baseInfo_;
    public bool HasBaseInfo {
      get { return hasBaseInfo; }
    }
    public global::core.Base BaseInfo {
      get { return baseInfo_ ?? global::core.Base.DefaultInstance; }
    }
    
    public const int WidthFieldNumber = 2;
    private bool hasWidth;
    private int width_;
    public bool HasWidth {
      get { return hasWidth; }
    }
    public int Width {
      get { return width_; }
    }
    
    public const int HeightFieldNumber = 3;
    private bool hasHeight;
    private int height_;
    public bool HasHeight {
      get { return hasHeight; }
    }
    public int Height {
      get { return height_; }
    }
    
    public const int CellFieldNumber = 4;
    private bool hasCell;
    private int cell_;
    public bool HasCell {
      get { return hasCell; }
    }
    public int Cell {
      get { return cell_; }
    }
    
    public const int TypeFieldNumber = 5;
    private bool hasType;
    private global::world.template.Map.Types.Type type_ = global::world.template.Map.Types.Type.Type_0;
    public bool HasType {
      get { return hasType; }
    }
    public global::world.template.Map.Types.Type Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBaseInfo) return false;
        if (!hasWidth) return false;
        if (!hasHeight) return false;
        if (!hasCell) return false;
        if (!hasType) return false;
        if (!BaseInfo.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mapFieldNames;
      if (hasBaseInfo) {
        output.WriteMessage(1, field_names[0], BaseInfo);
      }
      if (hasWidth) {
        output.WriteInt32(2, field_names[4], Width);
      }
      if (hasHeight) {
        output.WriteInt32(3, field_names[2], Height);
      }
      if (hasCell) {
        output.WriteInt32(4, field_names[1], Cell);
      }
      if (hasType) {
        output.WriteEnum(5, field_names[3], (int) Type, Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBaseInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BaseInfo);
        }
        if (hasWidth) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Width);
        }
        if (hasHeight) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Height);
        }
        if (hasCell) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Cell);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(5, (int) Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Map ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Map ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Map ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Map ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Map ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Map ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Map ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Map ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Map ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Map ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Map MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Map prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Map, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Map cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Map result;
      
      private Map PrepareBuilder() {
        if (resultIsReadOnly) {
          Map original = result;
          result = new Map();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Map MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.template.Map.Descriptor; }
      }
      
      public override Map DefaultInstanceForType {
        get { return global::world.template.Map.DefaultInstance; }
      }
      
      public override Map BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Map) {
          return MergeFrom((Map) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Map other) {
        if (other == global::world.template.Map.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBaseInfo) {
          MergeBaseInfo(other.BaseInfo);
        }
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        if (other.HasCell) {
          Cell = other.Cell;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mapFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mapFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::core.Base.Builder subBuilder = global::core.Base.CreateBuilder();
              if (result.hasBaseInfo) {
                subBuilder.MergeFrom(BaseInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseInfo = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasWidth = input.ReadInt32(ref result.width_);
              break;
            }
            case 24: {
              result.hasHeight = input.ReadInt32(ref result.height_);
              break;
            }
            case 32: {
              result.hasCell = input.ReadInt32(ref result.cell_);
              break;
            }
            case 40: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(5, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBaseInfo {
       get { return result.hasBaseInfo; }
      }
      public global::core.Base BaseInfo {
        get { return result.BaseInfo; }
        set { SetBaseInfo(value); }
      }
      public Builder SetBaseInfo(global::core.Base value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseInfo = true;
        result.baseInfo_ = value;
        return this;
      }
      public Builder SetBaseInfo(global::core.Base.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseInfo = true;
        result.baseInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseInfo(global::core.Base value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseInfo &&
            result.baseInfo_ != global::core.Base.DefaultInstance) {
            result.baseInfo_ = global::core.Base.CreateBuilder(result.baseInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.baseInfo_ = value;
        }
        result.hasBaseInfo = true;
        return this;
      }
      public Builder ClearBaseInfo() {
        PrepareBuilder();
        result.hasBaseInfo = false;
        result.baseInfo_ = null;
        return this;
      }
      
      public bool HasWidth {
        get { return result.hasWidth; }
      }
      public int Width {
        get { return result.Width; }
        set { SetWidth(value); }
      }
      public Builder SetWidth(int value) {
        PrepareBuilder();
        result.hasWidth = true;
        result.width_ = value;
        return this;
      }
      public Builder ClearWidth() {
        PrepareBuilder();
        result.hasWidth = false;
        result.width_ = 0;
        return this;
      }
      
      public bool HasHeight {
        get { return result.hasHeight; }
      }
      public int Height {
        get { return result.Height; }
        set { SetHeight(value); }
      }
      public Builder SetHeight(int value) {
        PrepareBuilder();
        result.hasHeight = true;
        result.height_ = value;
        return this;
      }
      public Builder ClearHeight() {
        PrepareBuilder();
        result.hasHeight = false;
        result.height_ = 0;
        return this;
      }
      
      public bool HasCell {
        get { return result.hasCell; }
      }
      public int Cell {
        get { return result.Cell; }
        set { SetCell(value); }
      }
      public Builder SetCell(int value) {
        PrepareBuilder();
        result.hasCell = true;
        result.cell_ = value;
        return this;
      }
      public Builder ClearCell() {
        PrepareBuilder();
        result.hasCell = false;
        result.cell_ = 0;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::world.template.Map.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::world.template.Map.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::world.template.Map.Types.Type.Type_0;
        return this;
      }
    }
    static Map() {
      object.ReferenceEquals(global::world.template.WorldTemplate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Mine : pb::GeneratedMessage<Mine, Mine.Builder> {
    private Mine() { }
    private static readonly Mine defaultInstance = new Mine().MakeReadOnly();
    private static readonly string[] _mineFieldNames = new string[] { "area_id", "chanpin", "flag", "golds_lvup", "id", "level", "map_id", "max_npcs", "name", "nextid", "rect" };
    private static readonly uint[] _mineFieldTags = new uint[] { 32, 40, 58, 88, 8, 64, 24, 80, 16, 72, 50 };
    public static Mine DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Mine DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Mine ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Mine__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Mine, Mine.Builder> InternalFieldAccessors {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Mine__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int NameFieldNumber = 2;
    private bool hasName;
    private int name_;
    public bool HasName {
      get { return hasName; }
    }
    public int Name {
      get { return name_; }
    }
    
    public const int MapIdFieldNumber = 3;
    private bool hasMapId;
    private int mapId_;
    public bool HasMapId {
      get { return hasMapId; }
    }
    public int MapId {
      get { return mapId_; }
    }
    
    public const int AreaIdFieldNumber = 4;
    private bool hasAreaId;
    private int areaId_;
    public bool HasAreaId {
      get { return hasAreaId; }
    }
    public int AreaId {
      get { return areaId_; }
    }
    
    public const int ChanpinFieldNumber = 5;
    private bool hasChanpin;
    private int chanpin_;
    public bool HasChanpin {
      get { return hasChanpin; }
    }
    public int Chanpin {
      get { return chanpin_; }
    }
    
    public const int RectFieldNumber = 6;
    private bool hasRect;
    private global::core.Rect rect_;
    public bool HasRect {
      get { return hasRect; }
    }
    public global::core.Rect Rect {
      get { return rect_ ?? global::core.Rect.DefaultInstance; }
    }
    
    public const int FlagFieldNumber = 7;
    private bool hasFlag;
    private global::core.Point flag_;
    public bool HasFlag {
      get { return hasFlag; }
    }
    public global::core.Point Flag {
      get { return flag_ ?? global::core.Point.DefaultInstance; }
    }
    
    public const int LevelFieldNumber = 8;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int NextidFieldNumber = 9;
    private bool hasNextid;
    private int nextid_;
    public bool HasNextid {
      get { return hasNextid; }
    }
    public int Nextid {
      get { return nextid_; }
    }
    
    public const int MaxNpcsFieldNumber = 10;
    private bool hasMaxNpcs;
    private int maxNpcs_;
    public bool HasMaxNpcs {
      get { return hasMaxNpcs; }
    }
    public int MaxNpcs {
      get { return maxNpcs_; }
    }
    
    public const int GoldsLvupFieldNumber = 11;
    private bool hasGoldsLvup;
    private int goldsLvup_;
    public bool HasGoldsLvup {
      get { return hasGoldsLvup; }
    }
    public int GoldsLvup {
      get { return goldsLvup_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasName) return false;
        if (!hasMapId) return false;
        if (!hasAreaId) return false;
        if (!hasChanpin) return false;
        if (!hasRect) return false;
        if (!hasFlag) return false;
        if (!hasLevel) return false;
        if (!hasNextid) return false;
        if (!hasMaxNpcs) return false;
        if (!hasGoldsLvup) return false;
        if (!Rect.IsInitialized) return false;
        if (!Flag.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mineFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[4], Id);
      }
      if (hasName) {
        output.WriteInt32(2, field_names[8], Name);
      }
      if (hasMapId) {
        output.WriteInt32(3, field_names[6], MapId);
      }
      if (hasAreaId) {
        output.WriteInt32(4, field_names[0], AreaId);
      }
      if (hasChanpin) {
        output.WriteInt32(5, field_names[1], Chanpin);
      }
      if (hasRect) {
        output.WriteMessage(6, field_names[10], Rect);
      }
      if (hasFlag) {
        output.WriteMessage(7, field_names[2], Flag);
      }
      if (hasLevel) {
        output.WriteInt32(8, field_names[5], Level);
      }
      if (hasNextid) {
        output.WriteInt32(9, field_names[9], Nextid);
      }
      if (hasMaxNpcs) {
        output.WriteInt32(10, field_names[7], MaxNpcs);
      }
      if (hasGoldsLvup) {
        output.WriteInt32(11, field_names[3], GoldsLvup);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        if (hasName) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Name);
        }
        if (hasMapId) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, MapId);
        }
        if (hasAreaId) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, AreaId);
        }
        if (hasChanpin) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Chanpin);
        }
        if (hasRect) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, Rect);
        }
        if (hasFlag) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, Flag);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Level);
        }
        if (hasNextid) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, Nextid);
        }
        if (hasMaxNpcs) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, MaxNpcs);
        }
        if (hasGoldsLvup) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, GoldsLvup);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Mine ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Mine ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Mine ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Mine ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Mine ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Mine ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Mine ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Mine ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Mine ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Mine ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Mine MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Mine prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Mine, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Mine cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Mine result;
      
      private Mine PrepareBuilder() {
        if (resultIsReadOnly) {
          Mine original = result;
          result = new Mine();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Mine MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.template.Mine.Descriptor; }
      }
      
      public override Mine DefaultInstanceForType {
        get { return global::world.template.Mine.DefaultInstance; }
      }
      
      public override Mine BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Mine) {
          return MergeFrom((Mine) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Mine other) {
        if (other == global::world.template.Mine.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasMapId) {
          MapId = other.MapId;
        }
        if (other.HasAreaId) {
          AreaId = other.AreaId;
        }
        if (other.HasChanpin) {
          Chanpin = other.Chanpin;
        }
        if (other.HasRect) {
          MergeRect(other.Rect);
        }
        if (other.HasFlag) {
          MergeFlag(other.Flag);
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasNextid) {
          Nextid = other.Nextid;
        }
        if (other.HasMaxNpcs) {
          MaxNpcs = other.MaxNpcs;
        }
        if (other.HasGoldsLvup) {
          GoldsLvup = other.GoldsLvup;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mineFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mineFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 16: {
              result.hasName = input.ReadInt32(ref result.name_);
              break;
            }
            case 24: {
              result.hasMapId = input.ReadInt32(ref result.mapId_);
              break;
            }
            case 32: {
              result.hasAreaId = input.ReadInt32(ref result.areaId_);
              break;
            }
            case 40: {
              result.hasChanpin = input.ReadInt32(ref result.chanpin_);
              break;
            }
            case 50: {
              global::core.Rect.Builder subBuilder = global::core.Rect.CreateBuilder();
              if (result.hasRect) {
                subBuilder.MergeFrom(Rect);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Rect = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::core.Point.Builder subBuilder = global::core.Point.CreateBuilder();
              if (result.hasFlag) {
                subBuilder.MergeFrom(Flag);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Flag = subBuilder.BuildPartial();
              break;
            }
            case 64: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 72: {
              result.hasNextid = input.ReadInt32(ref result.nextid_);
              break;
            }
            case 80: {
              result.hasMaxNpcs = input.ReadInt32(ref result.maxNpcs_);
              break;
            }
            case 88: {
              result.hasGoldsLvup = input.ReadInt32(ref result.goldsLvup_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public bool HasName {
        get { return result.hasName; }
      }
      public int Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(int value) {
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = 0;
        return this;
      }
      
      public bool HasMapId {
        get { return result.hasMapId; }
      }
      public int MapId {
        get { return result.MapId; }
        set { SetMapId(value); }
      }
      public Builder SetMapId(int value) {
        PrepareBuilder();
        result.hasMapId = true;
        result.mapId_ = value;
        return this;
      }
      public Builder ClearMapId() {
        PrepareBuilder();
        result.hasMapId = false;
        result.mapId_ = 0;
        return this;
      }
      
      public bool HasAreaId {
        get { return result.hasAreaId; }
      }
      public int AreaId {
        get { return result.AreaId; }
        set { SetAreaId(value); }
      }
      public Builder SetAreaId(int value) {
        PrepareBuilder();
        result.hasAreaId = true;
        result.areaId_ = value;
        return this;
      }
      public Builder ClearAreaId() {
        PrepareBuilder();
        result.hasAreaId = false;
        result.areaId_ = 0;
        return this;
      }
      
      public bool HasChanpin {
        get { return result.hasChanpin; }
      }
      public int Chanpin {
        get { return result.Chanpin; }
        set { SetChanpin(value); }
      }
      public Builder SetChanpin(int value) {
        PrepareBuilder();
        result.hasChanpin = true;
        result.chanpin_ = value;
        return this;
      }
      public Builder ClearChanpin() {
        PrepareBuilder();
        result.hasChanpin = false;
        result.chanpin_ = 0;
        return this;
      }
      
      public bool HasRect {
       get { return result.hasRect; }
      }
      public global::core.Rect Rect {
        get { return result.Rect; }
        set { SetRect(value); }
      }
      public Builder SetRect(global::core.Rect value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasRect = true;
        result.rect_ = value;
        return this;
      }
      public Builder SetRect(global::core.Rect.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasRect = true;
        result.rect_ = builderForValue.Build();
        return this;
      }
      public Builder MergeRect(global::core.Rect value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasRect &&
            result.rect_ != global::core.Rect.DefaultInstance) {
            result.rect_ = global::core.Rect.CreateBuilder(result.rect_).MergeFrom(value).BuildPartial();
        } else {
          result.rect_ = value;
        }
        result.hasRect = true;
        return this;
      }
      public Builder ClearRect() {
        PrepareBuilder();
        result.hasRect = false;
        result.rect_ = null;
        return this;
      }
      
      public bool HasFlag {
       get { return result.hasFlag; }
      }
      public global::core.Point Flag {
        get { return result.Flag; }
        set { SetFlag(value); }
      }
      public Builder SetFlag(global::core.Point value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFlag = true;
        result.flag_ = value;
        return this;
      }
      public Builder SetFlag(global::core.Point.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFlag = true;
        result.flag_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFlag(global::core.Point value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFlag &&
            result.flag_ != global::core.Point.DefaultInstance) {
            result.flag_ = global::core.Point.CreateBuilder(result.flag_).MergeFrom(value).BuildPartial();
        } else {
          result.flag_ = value;
        }
        result.hasFlag = true;
        return this;
      }
      public Builder ClearFlag() {
        PrepareBuilder();
        result.hasFlag = false;
        result.flag_ = null;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasNextid {
        get { return result.hasNextid; }
      }
      public int Nextid {
        get { return result.Nextid; }
        set { SetNextid(value); }
      }
      public Builder SetNextid(int value) {
        PrepareBuilder();
        result.hasNextid = true;
        result.nextid_ = value;
        return this;
      }
      public Builder ClearNextid() {
        PrepareBuilder();
        result.hasNextid = false;
        result.nextid_ = 0;
        return this;
      }
      
      public bool HasMaxNpcs {
        get { return result.hasMaxNpcs; }
      }
      public int MaxNpcs {
        get { return result.MaxNpcs; }
        set { SetMaxNpcs(value); }
      }
      public Builder SetMaxNpcs(int value) {
        PrepareBuilder();
        result.hasMaxNpcs = true;
        result.maxNpcs_ = value;
        return this;
      }
      public Builder ClearMaxNpcs() {
        PrepareBuilder();
        result.hasMaxNpcs = false;
        result.maxNpcs_ = 0;
        return this;
      }
      
      public bool HasGoldsLvup {
        get { return result.hasGoldsLvup; }
      }
      public int GoldsLvup {
        get { return result.GoldsLvup; }
        set { SetGoldsLvup(value); }
      }
      public Builder SetGoldsLvup(int value) {
        PrepareBuilder();
        result.hasGoldsLvup = true;
        result.goldsLvup_ = value;
        return this;
      }
      public Builder ClearGoldsLvup() {
        PrepareBuilder();
        result.hasGoldsLvup = false;
        result.goldsLvup_ = 0;
        return this;
      }
    }
    static Mine() {
      object.ReferenceEquals(global::world.template.WorldTemplate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NPC : pb::GeneratedMessage<NPC, NPC.Builder> {
    private NPC() { }
    private static readonly NPC defaultInstance = new NPC().MakeReadOnly();
    private static readonly string[] _nPCFieldNames = new string[] { "ai", "attdistance", "attkind", "base_info", "birthexcursion", "bodybetime", "class", "jinengid", "job", "mod", "moneydrop", "name2nd", "nobeatchenmo", "nobeatchongfeng", "nobeatfly", "nobeatsleep", "nobeatslow", "nobeatxuanyun", "nomdrop", "patrolarea", "roundable", "spdrop", "tietuid", "type" };
    private static readonly uint[] _nPCFieldTags = new uint[] { 64, 152, 160, 10, 168, 184, 16, 192, 32, 40, 80, 56, 136, 144, 72, 128, 120, 112, 88, 176, 104, 96, 48, 24 };
    public static NPC DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NPC DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NPC ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.template.WorldTemplate.internal__static_world_template_NPC__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NPC, NPC.Builder> InternalFieldAccessors {
      get { return global::world.template.WorldTemplate.internal__static_world_template_NPC__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Class {
        Class_0 = 0,
        Class_1 = 1,
        Class_2 = 2,
        Class_3 = 3,
        Class_4 = 4,
        Class_5 = 5,
        Class_6 = 6,
        Class_7 = 7,
        Class_8 = 8,
        Class_9 = 9,
        Class_10 = 10,
        Class_11 = 11,
        Class_12 = 12,
        Class_13 = 13,
        Class_14 = 14,
        Class_15 = 15,
        Class_16 = 16,
        Class_17 = 17,
        Class_18 = 18,
        Class_19 = 19,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Type {
        Type_0 = 1,
        Type_1 = 2,
        Type_2 = 3,
        Type_3 = 4,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Job {
        Job_0 = 0,
        Job_1 = 1,
        Job_2 = 2,
        Job_3 = 3,
        Job_4 = 4,
        Job_5 = 5,
        Job_6 = 6,
        Job_7 = 7,
        Job_8 = 8,
        Job_9 = 9,
        Job_10 = 10,
        Job_11 = 11,
        Job_12 = 12,
        Job_13 = 13,
        Job_14 = 14,
        Job_15 = 15,
        Job_16 = 16,
        Job_17 = 17,
        Job_18 = 18,
        Job_19 = 19,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Name2nd {
        Name2nd_0 = 0,
        Name2nd_1 = 1,
        Name2nd_2 = 2,
        Name2nd_3 = 3,
        Name2nd_4 = 4,
        Name2nd_5 = 5,
        Name2nd_6 = 6,
        Name2nd_7 = 7,
        Name2nd_8 = 8,
        Name2nd_9 = 9,
        Name2nd_10 = 10,
        Name2nd_11 = 11,
        Name2nd_12 = 12,
        Name2nd_13 = 13,
        Name2nd_14 = 14,
        Name2nd_15 = 15,
        Name2nd_16 = 16,
        Name2nd_17 = 17,
        Name2nd_18 = 18,
        Name2nd_19 = 19,
        Name2nd_20 = 20,
        Name2nd_21 = 21,
        Name2nd_22 = 22,
        Name2nd_23 = 23,
        Name2nd_24 = 24,
        Name2nd_25 = 25,
        Name2nd_26 = 26,
        Name2nd_27 = 27,
        Name2nd_28 = 28,
      }
      
    }
    #endregion
    
    public const int BaseInfoFieldNumber = 1;
    private bool hasBaseInfo;
    private global::core.Base baseInfo_;
    public bool HasBaseInfo {
      get { return hasBaseInfo; }
    }
    public global::core.Base BaseInfo {
      get { return baseInfo_ ?? global::core.Base.DefaultInstance; }
    }
    
    public const int ClassFieldNumber = 2;
    private bool hasClass;
    private global::world.template.NPC.Types.Class class_ = global::world.template.NPC.Types.Class.Class_0;
    public bool HasClass {
      get { return hasClass; }
    }
    public global::world.template.NPC.Types.Class Class {
      get { return class_; }
    }
    
    public const int TypeFieldNumber = 3;
    private bool hasType;
    private global::world.template.NPC.Types.Type type_ = global::world.template.NPC.Types.Type.Type_0;
    public bool HasType {
      get { return hasType; }
    }
    public global::world.template.NPC.Types.Type Type {
      get { return type_; }
    }
    
    public const int JobFieldNumber = 4;
    private bool hasJob;
    private global::world.template.NPC.Types.Job job_ = global::world.template.NPC.Types.Job.Job_0;
    public bool HasJob {
      get { return hasJob; }
    }
    public global::world.template.NPC.Types.Job Job {
      get { return job_; }
    }
    
    public const int ModFieldNumber = 5;
    private bool hasMod;
    private int mod_;
    public bool HasMod {
      get { return hasMod; }
    }
    public int Mod {
      get { return mod_; }
    }
    
    public const int TietuidFieldNumber = 6;
    private bool hasTietuid;
    private int tietuid_;
    public bool HasTietuid {
      get { return hasTietuid; }
    }
    public int Tietuid {
      get { return tietuid_; }
    }
    
    public const int Name2NdFieldNumber = 7;
    private bool hasName2Nd;
    private global::world.template.NPC.Types.Name2nd name2Nd_ = global::world.template.NPC.Types.Name2nd.Name2nd_0;
    public bool HasName2Nd {
      get { return hasName2Nd; }
    }
    public global::world.template.NPC.Types.Name2nd Name2Nd {
      get { return name2Nd_; }
    }
    
    public const int AiFieldNumber = 8;
    private bool hasAi;
    private int ai_;
    public bool HasAi {
      get { return hasAi; }
    }
    public int Ai {
      get { return ai_; }
    }
    
    public const int NobeatflyFieldNumber = 9;
    private bool hasNobeatfly;
    private bool nobeatfly_;
    public bool HasNobeatfly {
      get { return hasNobeatfly; }
    }
    public bool Nobeatfly {
      get { return nobeatfly_; }
    }
    
    public const int MoneydropFieldNumber = 10;
    private bool hasMoneydrop;
    private bool moneydrop_;
    public bool HasMoneydrop {
      get { return hasMoneydrop; }
    }
    public bool Moneydrop {
      get { return moneydrop_; }
    }
    
    public const int NomdropFieldNumber = 11;
    private bool hasNomdrop;
    private bool nomdrop_;
    public bool HasNomdrop {
      get { return hasNomdrop; }
    }
    public bool Nomdrop {
      get { return nomdrop_; }
    }
    
    public const int SpdropFieldNumber = 12;
    private bool hasSpdrop;
    private bool spdrop_;
    public bool HasSpdrop {
      get { return hasSpdrop; }
    }
    public bool Spdrop {
      get { return spdrop_; }
    }
    
    public const int RoundableFieldNumber = 13;
    private bool hasRoundable;
    private bool roundable_;
    public bool HasRoundable {
      get { return hasRoundable; }
    }
    public bool Roundable {
      get { return roundable_; }
    }
    
    public const int NobeatxuanyunFieldNumber = 14;
    private bool hasNobeatxuanyun;
    private bool nobeatxuanyun_;
    public bool HasNobeatxuanyun {
      get { return hasNobeatxuanyun; }
    }
    public bool Nobeatxuanyun {
      get { return nobeatxuanyun_; }
    }
    
    public const int NobeatslowFieldNumber = 15;
    private bool hasNobeatslow;
    private bool nobeatslow_;
    public bool HasNobeatslow {
      get { return hasNobeatslow; }
    }
    public bool Nobeatslow {
      get { return nobeatslow_; }
    }
    
    public const int NobeatsleepFieldNumber = 16;
    private bool hasNobeatsleep;
    private bool nobeatsleep_;
    public bool HasNobeatsleep {
      get { return hasNobeatsleep; }
    }
    public bool Nobeatsleep {
      get { return nobeatsleep_; }
    }
    
    public const int NobeatchenmoFieldNumber = 17;
    private bool hasNobeatchenmo;
    private bool nobeatchenmo_;
    public bool HasNobeatchenmo {
      get { return hasNobeatchenmo; }
    }
    public bool Nobeatchenmo {
      get { return nobeatchenmo_; }
    }
    
    public const int NobeatchongfengFieldNumber = 18;
    private bool hasNobeatchongfeng;
    private bool nobeatchongfeng_;
    public bool HasNobeatchongfeng {
      get { return hasNobeatchongfeng; }
    }
    public bool Nobeatchongfeng {
      get { return nobeatchongfeng_; }
    }
    
    public const int AttdistanceFieldNumber = 19;
    private bool hasAttdistance;
    private int attdistance_;
    public bool HasAttdistance {
      get { return hasAttdistance; }
    }
    public int Attdistance {
      get { return attdistance_; }
    }
    
    public const int AttkindFieldNumber = 20;
    private bool hasAttkind;
    private int attkind_;
    public bool HasAttkind {
      get { return hasAttkind; }
    }
    public int Attkind {
      get { return attkind_; }
    }
    
    public const int BirthexcursionFieldNumber = 21;
    private bool hasBirthexcursion;
    private int birthexcursion_;
    public bool HasBirthexcursion {
      get { return hasBirthexcursion; }
    }
    public int Birthexcursion {
      get { return birthexcursion_; }
    }
    
    public const int PatrolareaFieldNumber = 22;
    private bool hasPatrolarea;
    private int patrolarea_;
    public bool HasPatrolarea {
      get { return hasPatrolarea; }
    }
    public int Patrolarea {
      get { return patrolarea_; }
    }
    
    public const int BodybetimeFieldNumber = 23;
    private bool hasBodybetime;
    private int bodybetime_;
    public bool HasBodybetime {
      get { return hasBodybetime; }
    }
    public int Bodybetime {
      get { return bodybetime_; }
    }
    
    public const int JinengidFieldNumber = 24;
    private pbc::PopsicleList<int> jinengid_ = new pbc::PopsicleList<int>();
    public scg::IList<int> JinengidList {
      get { return pbc::Lists.AsReadOnly(jinengid_); }
    }
    public int JinengidCount {
      get { return jinengid_.Count; }
    }
    public int GetJinengid(int index) {
      return jinengid_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBaseInfo) return false;
        if (!hasClass) return false;
        if (!hasType) return false;
        if (!hasJob) return false;
        if (!hasMod) return false;
        if (!hasTietuid) return false;
        if (!hasName2Nd) return false;
        if (!hasAi) return false;
        if (!hasNobeatfly) return false;
        if (!hasMoneydrop) return false;
        if (!hasNomdrop) return false;
        if (!hasSpdrop) return false;
        if (!hasRoundable) return false;
        if (!hasNobeatxuanyun) return false;
        if (!hasNobeatslow) return false;
        if (!hasNobeatsleep) return false;
        if (!hasNobeatchenmo) return false;
        if (!hasNobeatchongfeng) return false;
        if (!hasAttdistance) return false;
        if (!hasAttkind) return false;
        if (!hasBirthexcursion) return false;
        if (!hasPatrolarea) return false;
        if (!hasBodybetime) return false;
        if (!BaseInfo.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nPCFieldNames;
      if (hasBaseInfo) {
        output.WriteMessage(1, field_names[3], BaseInfo);
      }
      if (hasClass) {
        output.WriteEnum(2, field_names[6], (int) Class, Class);
      }
      if (hasType) {
        output.WriteEnum(3, field_names[23], (int) Type, Type);
      }
      if (hasJob) {
        output.WriteEnum(4, field_names[8], (int) Job, Job);
      }
      if (hasMod) {
        output.WriteInt32(5, field_names[9], Mod);
      }
      if (hasTietuid) {
        output.WriteInt32(6, field_names[22], Tietuid);
      }
      if (hasName2Nd) {
        output.WriteEnum(7, field_names[11], (int) Name2Nd, Name2Nd);
      }
      if (hasAi) {
        output.WriteInt32(8, field_names[0], Ai);
      }
      if (hasNobeatfly) {
        output.WriteBool(9, field_names[14], Nobeatfly);
      }
      if (hasMoneydrop) {
        output.WriteBool(10, field_names[10], Moneydrop);
      }
      if (hasNomdrop) {
        output.WriteBool(11, field_names[18], Nomdrop);
      }
      if (hasSpdrop) {
        output.WriteBool(12, field_names[21], Spdrop);
      }
      if (hasRoundable) {
        output.WriteBool(13, field_names[20], Roundable);
      }
      if (hasNobeatxuanyun) {
        output.WriteBool(14, field_names[17], Nobeatxuanyun);
      }
      if (hasNobeatslow) {
        output.WriteBool(15, field_names[16], Nobeatslow);
      }
      if (hasNobeatsleep) {
        output.WriteBool(16, field_names[15], Nobeatsleep);
      }
      if (hasNobeatchenmo) {
        output.WriteBool(17, field_names[12], Nobeatchenmo);
      }
      if (hasNobeatchongfeng) {
        output.WriteBool(18, field_names[13], Nobeatchongfeng);
      }
      if (hasAttdistance) {
        output.WriteInt32(19, field_names[1], Attdistance);
      }
      if (hasAttkind) {
        output.WriteInt32(20, field_names[2], Attkind);
      }
      if (hasBirthexcursion) {
        output.WriteInt32(21, field_names[4], Birthexcursion);
      }
      if (hasPatrolarea) {
        output.WriteInt32(22, field_names[19], Patrolarea);
      }
      if (hasBodybetime) {
        output.WriteInt32(23, field_names[5], Bodybetime);
      }
      if (jinengid_.Count > 0) {
        output.WriteInt32Array(24, field_names[7], jinengid_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBaseInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BaseInfo);
        }
        if (hasClass) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Class);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Type);
        }
        if (hasJob) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Job);
        }
        if (hasMod) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Mod);
        }
        if (hasTietuid) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Tietuid);
        }
        if (hasName2Nd) {
          size += pb::CodedOutputStream.ComputeEnumSize(7, (int) Name2Nd);
        }
        if (hasAi) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Ai);
        }
        if (hasNobeatfly) {
          size += pb::CodedOutputStream.ComputeBoolSize(9, Nobeatfly);
        }
        if (hasMoneydrop) {
          size += pb::CodedOutputStream.ComputeBoolSize(10, Moneydrop);
        }
        if (hasNomdrop) {
          size += pb::CodedOutputStream.ComputeBoolSize(11, Nomdrop);
        }
        if (hasSpdrop) {
          size += pb::CodedOutputStream.ComputeBoolSize(12, Spdrop);
        }
        if (hasRoundable) {
          size += pb::CodedOutputStream.ComputeBoolSize(13, Roundable);
        }
        if (hasNobeatxuanyun) {
          size += pb::CodedOutputStream.ComputeBoolSize(14, Nobeatxuanyun);
        }
        if (hasNobeatslow) {
          size += pb::CodedOutputStream.ComputeBoolSize(15, Nobeatslow);
        }
        if (hasNobeatsleep) {
          size += pb::CodedOutputStream.ComputeBoolSize(16, Nobeatsleep);
        }
        if (hasNobeatchenmo) {
          size += pb::CodedOutputStream.ComputeBoolSize(17, Nobeatchenmo);
        }
        if (hasNobeatchongfeng) {
          size += pb::CodedOutputStream.ComputeBoolSize(18, Nobeatchongfeng);
        }
        if (hasAttdistance) {
          size += pb::CodedOutputStream.ComputeInt32Size(19, Attdistance);
        }
        if (hasAttkind) {
          size += pb::CodedOutputStream.ComputeInt32Size(20, Attkind);
        }
        if (hasBirthexcursion) {
          size += pb::CodedOutputStream.ComputeInt32Size(21, Birthexcursion);
        }
        if (hasPatrolarea) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, Patrolarea);
        }
        if (hasBodybetime) {
          size += pb::CodedOutputStream.ComputeInt32Size(23, Bodybetime);
        }
        {
          int dataSize = 0;
          foreach (int element in JinengidList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 2 * jinengid_.Count;
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NPC ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NPC ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NPC ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NPC ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NPC ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NPC ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NPC ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NPC ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NPC ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NPC ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NPC MakeReadOnly() {
      jinengid_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NPC prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NPC, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NPC cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NPC result;
      
      private NPC PrepareBuilder() {
        if (resultIsReadOnly) {
          NPC original = result;
          result = new NPC();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NPC MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.template.NPC.Descriptor; }
      }
      
      public override NPC DefaultInstanceForType {
        get { return global::world.template.NPC.DefaultInstance; }
      }
      
      public override NPC BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NPC) {
          return MergeFrom((NPC) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NPC other) {
        if (other == global::world.template.NPC.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBaseInfo) {
          MergeBaseInfo(other.BaseInfo);
        }
        if (other.HasClass) {
          Class = other.Class;
        }
        if (other.HasType) {
          Type = other.Type;
        }
        if (other.HasJob) {
          Job = other.Job;
        }
        if (other.HasMod) {
          Mod = other.Mod;
        }
        if (other.HasTietuid) {
          Tietuid = other.Tietuid;
        }
        if (other.HasName2Nd) {
          Name2Nd = other.Name2Nd;
        }
        if (other.HasAi) {
          Ai = other.Ai;
        }
        if (other.HasNobeatfly) {
          Nobeatfly = other.Nobeatfly;
        }
        if (other.HasMoneydrop) {
          Moneydrop = other.Moneydrop;
        }
        if (other.HasNomdrop) {
          Nomdrop = other.Nomdrop;
        }
        if (other.HasSpdrop) {
          Spdrop = other.Spdrop;
        }
        if (other.HasRoundable) {
          Roundable = other.Roundable;
        }
        if (other.HasNobeatxuanyun) {
          Nobeatxuanyun = other.Nobeatxuanyun;
        }
        if (other.HasNobeatslow) {
          Nobeatslow = other.Nobeatslow;
        }
        if (other.HasNobeatsleep) {
          Nobeatsleep = other.Nobeatsleep;
        }
        if (other.HasNobeatchenmo) {
          Nobeatchenmo = other.Nobeatchenmo;
        }
        if (other.HasNobeatchongfeng) {
          Nobeatchongfeng = other.Nobeatchongfeng;
        }
        if (other.HasAttdistance) {
          Attdistance = other.Attdistance;
        }
        if (other.HasAttkind) {
          Attkind = other.Attkind;
        }
        if (other.HasBirthexcursion) {
          Birthexcursion = other.Birthexcursion;
        }
        if (other.HasPatrolarea) {
          Patrolarea = other.Patrolarea;
        }
        if (other.HasBodybetime) {
          Bodybetime = other.Bodybetime;
        }
        if (other.jinengid_.Count != 0) {
          result.jinengid_.Add(other.jinengid_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nPCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nPCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::core.Base.Builder subBuilder = global::core.Base.CreateBuilder();
              if (result.hasBaseInfo) {
                subBuilder.MergeFrom(BaseInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseInfo = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.class_, out unknown)) {
                result.hasClass = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.job_, out unknown)) {
                result.hasJob = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 40: {
              result.hasMod = input.ReadInt32(ref result.mod_);
              break;
            }
            case 48: {
              result.hasTietuid = input.ReadInt32(ref result.tietuid_);
              break;
            }
            case 56: {
              object unknown;
              if(input.ReadEnum(ref result.name2Nd_, out unknown)) {
                result.hasName2Nd = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(7, (ulong)(int)unknown);
              }
              break;
            }
            case 64: {
              result.hasAi = input.ReadInt32(ref result.ai_);
              break;
            }
            case 72: {
              result.hasNobeatfly = input.ReadBool(ref result.nobeatfly_);
              break;
            }
            case 80: {
              result.hasMoneydrop = input.ReadBool(ref result.moneydrop_);
              break;
            }
            case 88: {
              result.hasNomdrop = input.ReadBool(ref result.nomdrop_);
              break;
            }
            case 96: {
              result.hasSpdrop = input.ReadBool(ref result.spdrop_);
              break;
            }
            case 104: {
              result.hasRoundable = input.ReadBool(ref result.roundable_);
              break;
            }
            case 112: {
              result.hasNobeatxuanyun = input.ReadBool(ref result.nobeatxuanyun_);
              break;
            }
            case 120: {
              result.hasNobeatslow = input.ReadBool(ref result.nobeatslow_);
              break;
            }
            case 128: {
              result.hasNobeatsleep = input.ReadBool(ref result.nobeatsleep_);
              break;
            }
            case 136: {
              result.hasNobeatchenmo = input.ReadBool(ref result.nobeatchenmo_);
              break;
            }
            case 144: {
              result.hasNobeatchongfeng = input.ReadBool(ref result.nobeatchongfeng_);
              break;
            }
            case 152: {
              result.hasAttdistance = input.ReadInt32(ref result.attdistance_);
              break;
            }
            case 160: {
              result.hasAttkind = input.ReadInt32(ref result.attkind_);
              break;
            }
            case 168: {
              result.hasBirthexcursion = input.ReadInt32(ref result.birthexcursion_);
              break;
            }
            case 176: {
              result.hasPatrolarea = input.ReadInt32(ref result.patrolarea_);
              break;
            }
            case 184: {
              result.hasBodybetime = input.ReadInt32(ref result.bodybetime_);
              break;
            }
            case 194:
            case 192: {
              input.ReadInt32Array(tag, field_name, result.jinengid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBaseInfo {
       get { return result.hasBaseInfo; }
      }
      public global::core.Base BaseInfo {
        get { return result.BaseInfo; }
        set { SetBaseInfo(value); }
      }
      public Builder SetBaseInfo(global::core.Base value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseInfo = true;
        result.baseInfo_ = value;
        return this;
      }
      public Builder SetBaseInfo(global::core.Base.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseInfo = true;
        result.baseInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseInfo(global::core.Base value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseInfo &&
            result.baseInfo_ != global::core.Base.DefaultInstance) {
            result.baseInfo_ = global::core.Base.CreateBuilder(result.baseInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.baseInfo_ = value;
        }
        result.hasBaseInfo = true;
        return this;
      }
      public Builder ClearBaseInfo() {
        PrepareBuilder();
        result.hasBaseInfo = false;
        result.baseInfo_ = null;
        return this;
      }
      
      public bool HasClass {
       get { return result.hasClass; }
      }
      public global::world.template.NPC.Types.Class Class {
        get { return result.Class; }
        set { SetClass(value); }
      }
      public Builder SetClass(global::world.template.NPC.Types.Class value) {
        PrepareBuilder();
        result.hasClass = true;
        result.class_ = value;
        return this;
      }
      public Builder ClearClass() {
        PrepareBuilder();
        result.hasClass = false;
        result.class_ = global::world.template.NPC.Types.Class.Class_0;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::world.template.NPC.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::world.template.NPC.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::world.template.NPC.Types.Type.Type_0;
        return this;
      }
      
      public bool HasJob {
       get { return result.hasJob; }
      }
      public global::world.template.NPC.Types.Job Job {
        get { return result.Job; }
        set { SetJob(value); }
      }
      public Builder SetJob(global::world.template.NPC.Types.Job value) {
        PrepareBuilder();
        result.hasJob = true;
        result.job_ = value;
        return this;
      }
      public Builder ClearJob() {
        PrepareBuilder();
        result.hasJob = false;
        result.job_ = global::world.template.NPC.Types.Job.Job_0;
        return this;
      }
      
      public bool HasMod {
        get { return result.hasMod; }
      }
      public int Mod {
        get { return result.Mod; }
        set { SetMod(value); }
      }
      public Builder SetMod(int value) {
        PrepareBuilder();
        result.hasMod = true;
        result.mod_ = value;
        return this;
      }
      public Builder ClearMod() {
        PrepareBuilder();
        result.hasMod = false;
        result.mod_ = 0;
        return this;
      }
      
      public bool HasTietuid {
        get { return result.hasTietuid; }
      }
      public int Tietuid {
        get { return result.Tietuid; }
        set { SetTietuid(value); }
      }
      public Builder SetTietuid(int value) {
        PrepareBuilder();
        result.hasTietuid = true;
        result.tietuid_ = value;
        return this;
      }
      public Builder ClearTietuid() {
        PrepareBuilder();
        result.hasTietuid = false;
        result.tietuid_ = 0;
        return this;
      }
      
      public bool HasName2Nd {
       get { return result.hasName2Nd; }
      }
      public global::world.template.NPC.Types.Name2nd Name2Nd {
        get { return result.Name2Nd; }
        set { SetName2Nd(value); }
      }
      public Builder SetName2Nd(global::world.template.NPC.Types.Name2nd value) {
        PrepareBuilder();
        result.hasName2Nd = true;
        result.name2Nd_ = value;
        return this;
      }
      public Builder ClearName2Nd() {
        PrepareBuilder();
        result.hasName2Nd = false;
        result.name2Nd_ = global::world.template.NPC.Types.Name2nd.Name2nd_0;
        return this;
      }
      
      public bool HasAi {
        get { return result.hasAi; }
      }
      public int Ai {
        get { return result.Ai; }
        set { SetAi(value); }
      }
      public Builder SetAi(int value) {
        PrepareBuilder();
        result.hasAi = true;
        result.ai_ = value;
        return this;
      }
      public Builder ClearAi() {
        PrepareBuilder();
        result.hasAi = false;
        result.ai_ = 0;
        return this;
      }
      
      public bool HasNobeatfly {
        get { return result.hasNobeatfly; }
      }
      public bool Nobeatfly {
        get { return result.Nobeatfly; }
        set { SetNobeatfly(value); }
      }
      public Builder SetNobeatfly(bool value) {
        PrepareBuilder();
        result.hasNobeatfly = true;
        result.nobeatfly_ = value;
        return this;
      }
      public Builder ClearNobeatfly() {
        PrepareBuilder();
        result.hasNobeatfly = false;
        result.nobeatfly_ = false;
        return this;
      }
      
      public bool HasMoneydrop {
        get { return result.hasMoneydrop; }
      }
      public bool Moneydrop {
        get { return result.Moneydrop; }
        set { SetMoneydrop(value); }
      }
      public Builder SetMoneydrop(bool value) {
        PrepareBuilder();
        result.hasMoneydrop = true;
        result.moneydrop_ = value;
        return this;
      }
      public Builder ClearMoneydrop() {
        PrepareBuilder();
        result.hasMoneydrop = false;
        result.moneydrop_ = false;
        return this;
      }
      
      public bool HasNomdrop {
        get { return result.hasNomdrop; }
      }
      public bool Nomdrop {
        get { return result.Nomdrop; }
        set { SetNomdrop(value); }
      }
      public Builder SetNomdrop(bool value) {
        PrepareBuilder();
        result.hasNomdrop = true;
        result.nomdrop_ = value;
        return this;
      }
      public Builder ClearNomdrop() {
        PrepareBuilder();
        result.hasNomdrop = false;
        result.nomdrop_ = false;
        return this;
      }
      
      public bool HasSpdrop {
        get { return result.hasSpdrop; }
      }
      public bool Spdrop {
        get { return result.Spdrop; }
        set { SetSpdrop(value); }
      }
      public Builder SetSpdrop(bool value) {
        PrepareBuilder();
        result.hasSpdrop = true;
        result.spdrop_ = value;
        return this;
      }
      public Builder ClearSpdrop() {
        PrepareBuilder();
        result.hasSpdrop = false;
        result.spdrop_ = false;
        return this;
      }
      
      public bool HasRoundable {
        get { return result.hasRoundable; }
      }
      public bool Roundable {
        get { return result.Roundable; }
        set { SetRoundable(value); }
      }
      public Builder SetRoundable(bool value) {
        PrepareBuilder();
        result.hasRoundable = true;
        result.roundable_ = value;
        return this;
      }
      public Builder ClearRoundable() {
        PrepareBuilder();
        result.hasRoundable = false;
        result.roundable_ = false;
        return this;
      }
      
      public bool HasNobeatxuanyun {
        get { return result.hasNobeatxuanyun; }
      }
      public bool Nobeatxuanyun {
        get { return result.Nobeatxuanyun; }
        set { SetNobeatxuanyun(value); }
      }
      public Builder SetNobeatxuanyun(bool value) {
        PrepareBuilder();
        result.hasNobeatxuanyun = true;
        result.nobeatxuanyun_ = value;
        return this;
      }
      public Builder ClearNobeatxuanyun() {
        PrepareBuilder();
        result.hasNobeatxuanyun = false;
        result.nobeatxuanyun_ = false;
        return this;
      }
      
      public bool HasNobeatslow {
        get { return result.hasNobeatslow; }
      }
      public bool Nobeatslow {
        get { return result.Nobeatslow; }
        set { SetNobeatslow(value); }
      }
      public Builder SetNobeatslow(bool value) {
        PrepareBuilder();
        result.hasNobeatslow = true;
        result.nobeatslow_ = value;
        return this;
      }
      public Builder ClearNobeatslow() {
        PrepareBuilder();
        result.hasNobeatslow = false;
        result.nobeatslow_ = false;
        return this;
      }
      
      public bool HasNobeatsleep {
        get { return result.hasNobeatsleep; }
      }
      public bool Nobeatsleep {
        get { return result.Nobeatsleep; }
        set { SetNobeatsleep(value); }
      }
      public Builder SetNobeatsleep(bool value) {
        PrepareBuilder();
        result.hasNobeatsleep = true;
        result.nobeatsleep_ = value;
        return this;
      }
      public Builder ClearNobeatsleep() {
        PrepareBuilder();
        result.hasNobeatsleep = false;
        result.nobeatsleep_ = false;
        return this;
      }
      
      public bool HasNobeatchenmo {
        get { return result.hasNobeatchenmo; }
      }
      public bool Nobeatchenmo {
        get { return result.Nobeatchenmo; }
        set { SetNobeatchenmo(value); }
      }
      public Builder SetNobeatchenmo(bool value) {
        PrepareBuilder();
        result.hasNobeatchenmo = true;
        result.nobeatchenmo_ = value;
        return this;
      }
      public Builder ClearNobeatchenmo() {
        PrepareBuilder();
        result.hasNobeatchenmo = false;
        result.nobeatchenmo_ = false;
        return this;
      }
      
      public bool HasNobeatchongfeng {
        get { return result.hasNobeatchongfeng; }
      }
      public bool Nobeatchongfeng {
        get { return result.Nobeatchongfeng; }
        set { SetNobeatchongfeng(value); }
      }
      public Builder SetNobeatchongfeng(bool value) {
        PrepareBuilder();
        result.hasNobeatchongfeng = true;
        result.nobeatchongfeng_ = value;
        return this;
      }
      public Builder ClearNobeatchongfeng() {
        PrepareBuilder();
        result.hasNobeatchongfeng = false;
        result.nobeatchongfeng_ = false;
        return this;
      }
      
      public bool HasAttdistance {
        get { return result.hasAttdistance; }
      }
      public int Attdistance {
        get { return result.Attdistance; }
        set { SetAttdistance(value); }
      }
      public Builder SetAttdistance(int value) {
        PrepareBuilder();
        result.hasAttdistance = true;
        result.attdistance_ = value;
        return this;
      }
      public Builder ClearAttdistance() {
        PrepareBuilder();
        result.hasAttdistance = false;
        result.attdistance_ = 0;
        return this;
      }
      
      public bool HasAttkind {
        get { return result.hasAttkind; }
      }
      public int Attkind {
        get { return result.Attkind; }
        set { SetAttkind(value); }
      }
      public Builder SetAttkind(int value) {
        PrepareBuilder();
        result.hasAttkind = true;
        result.attkind_ = value;
        return this;
      }
      public Builder ClearAttkind() {
        PrepareBuilder();
        result.hasAttkind = false;
        result.attkind_ = 0;
        return this;
      }
      
      public bool HasBirthexcursion {
        get { return result.hasBirthexcursion; }
      }
      public int Birthexcursion {
        get { return result.Birthexcursion; }
        set { SetBirthexcursion(value); }
      }
      public Builder SetBirthexcursion(int value) {
        PrepareBuilder();
        result.hasBirthexcursion = true;
        result.birthexcursion_ = value;
        return this;
      }
      public Builder ClearBirthexcursion() {
        PrepareBuilder();
        result.hasBirthexcursion = false;
        result.birthexcursion_ = 0;
        return this;
      }
      
      public bool HasPatrolarea {
        get { return result.hasPatrolarea; }
      }
      public int Patrolarea {
        get { return result.Patrolarea; }
        set { SetPatrolarea(value); }
      }
      public Builder SetPatrolarea(int value) {
        PrepareBuilder();
        result.hasPatrolarea = true;
        result.patrolarea_ = value;
        return this;
      }
      public Builder ClearPatrolarea() {
        PrepareBuilder();
        result.hasPatrolarea = false;
        result.patrolarea_ = 0;
        return this;
      }
      
      public bool HasBodybetime {
        get { return result.hasBodybetime; }
      }
      public int Bodybetime {
        get { return result.Bodybetime; }
        set { SetBodybetime(value); }
      }
      public Builder SetBodybetime(int value) {
        PrepareBuilder();
        result.hasBodybetime = true;
        result.bodybetime_ = value;
        return this;
      }
      public Builder ClearBodybetime() {
        PrepareBuilder();
        result.hasBodybetime = false;
        result.bodybetime_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> JinengidList {
        get { return PrepareBuilder().jinengid_; }
      }
      public int JinengidCount {
        get { return result.JinengidCount; }
      }
      public int GetJinengid(int index) {
        return result.GetJinengid(index);
      }
      public Builder SetJinengid(int index, int value) {
        PrepareBuilder();
        result.jinengid_[index] = value;
        return this;
      }
      public Builder AddJinengid(int value) {
        PrepareBuilder();
        result.jinengid_.Add(value);
        return this;
      }
      public Builder AddRangeJinengid(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.jinengid_.Add(values);
        return this;
      }
      public Builder ClearJinengid() {
        PrepareBuilder();
        result.jinengid_.Clear();
        return this;
      }
    }
    static NPC() {
      object.ReferenceEquals(global::world.template.WorldTemplate.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Templates : pb::GeneratedMessage<Templates, Templates.Builder> {
    private Templates() { }
    private static readonly Templates defaultInstance = new Templates().MakeReadOnly();
    private static readonly string[] _templatesFieldNames = new string[] { "equips", "props" };
    private static readonly uint[] _templatesFieldTags = new uint[] { 10, 18 };
    public static Templates DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Templates DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Templates ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Templates__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Templates, Templates.Builder> InternalFieldAccessors {
      get { return global::world.template.WorldTemplate.internal__static_world_template_Templates__FieldAccessorTable; }
    }
    
    public const int EquipsFieldNumber = 1;
    private pbc::PopsicleList<global::world.template.Equip> equips_ = new pbc::PopsicleList<global::world.template.Equip>();
    public scg::IList<global::world.template.Equip> EquipsList {
      get { return equips_; }
    }
    public int EquipsCount {
      get { return equips_.Count; }
    }
    public global::world.template.Equip GetEquips(int index) {
      return equips_[index];
    }
    
    public const int PropsFieldNumber = 2;
    private pbc::PopsicleList<global::world.template.Prop> props_ = new pbc::PopsicleList<global::world.template.Prop>();
    public scg::IList<global::world.template.Prop> PropsList {
      get { return props_; }
    }
    public int PropsCount {
      get { return props_.Count; }
    }
    public global::world.template.Prop GetProps(int index) {
      return props_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::world.template.Equip element in EquipsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::world.template.Prop element in PropsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _templatesFieldNames;
      if (equips_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], equips_);
      }
      if (props_.Count > 0) {
        output.WriteMessageArray(2, field_names[1], props_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::world.template.Equip element in EquipsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        foreach (global::world.template.Prop element in PropsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Templates ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Templates ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Templates ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Templates ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Templates ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Templates ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Templates ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Templates ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Templates ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Templates ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Templates MakeReadOnly() {
      equips_.MakeReadOnly();
      props_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Templates prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Templates, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Templates cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Templates result;
      
      private Templates PrepareBuilder() {
        if (resultIsReadOnly) {
          Templates original = result;
          result = new Templates();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Templates MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.template.Templates.Descriptor; }
      }
      
      public override Templates DefaultInstanceForType {
        get { return global::world.template.Templates.DefaultInstance; }
      }
      
      public override Templates BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Templates) {
          return MergeFrom((Templates) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Templates other) {
        if (other == global::world.template.Templates.DefaultInstance) return this;
        PrepareBuilder();
        if (other.equips_.Count != 0) {
          result.equips_.Add(other.equips_);
        }
        if (other.props_.Count != 0) {
          result.props_.Add(other.props_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_templatesFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _templatesFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.equips_, global::world.template.Equip.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              input.ReadMessageArray(tag, field_name, result.props_, global::world.template.Prop.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::world.template.Equip> EquipsList {
        get { return PrepareBuilder().equips_; }
      }
      public int EquipsCount {
        get { return result.EquipsCount; }
      }
      public global::world.template.Equip GetEquips(int index) {
        return result.GetEquips(index);
      }
      public Builder SetEquips(int index, global::world.template.Equip value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.equips_[index] = value;
        return this;
      }
      public Builder SetEquips(int index, global::world.template.Equip.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.equips_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEquips(global::world.template.Equip value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.equips_.Add(value);
        return this;
      }
      public Builder AddEquips(global::world.template.Equip.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.equips_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEquips(scg::IEnumerable<global::world.template.Equip> values) {
        PrepareBuilder();
        result.equips_.Add(values);
        return this;
      }
      public Builder ClearEquips() {
        PrepareBuilder();
        result.equips_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::world.template.Prop> PropsList {
        get { return PrepareBuilder().props_; }
      }
      public int PropsCount {
        get { return result.PropsCount; }
      }
      public global::world.template.Prop GetProps(int index) {
        return result.GetProps(index);
      }
      public Builder SetProps(int index, global::world.template.Prop value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.props_[index] = value;
        return this;
      }
      public Builder SetProps(int index, global::world.template.Prop.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.props_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddProps(global::world.template.Prop value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.props_.Add(value);
        return this;
      }
      public Builder AddProps(global::world.template.Prop.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.props_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeProps(scg::IEnumerable<global::world.template.Prop> values) {
        PrepareBuilder();
        result.props_.Add(values);
        return this;
      }
      public Builder ClearProps() {
        PrepareBuilder();
        result.props_.Clear();
        return this;
      }
    }
    static Templates() {
      object.ReferenceEquals(global::world.template.WorldTemplate.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
