// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace world.data {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class WorldData {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_world_data_Equip__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Equip, global::world.data.Equip.Builder> internal__static_world_data_Equip__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Prop__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Prop, global::world.data.Prop.Builder> internal__static_world_data_Prop__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Gem__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Gem, global::world.data.Gem.Builder> internal__static_world_data_Gem__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Talisman__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Talisman, global::world.data.Talisman.Builder> internal__static_world_data_Talisman__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_User__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.User, global::world.data.User.Builder> internal__static_world_data_User__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Player__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Player, global::world.data.Player.Builder> internal__static_world_data_Player__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Buff__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Buff, global::world.data.Buff.Builder> internal__static_world_data_Buff__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Mail__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Mail, global::world.data.Mail.Builder> internal__static_world_data_Mail__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Question__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Question, global::world.data.Question.Builder> internal__static_world_data_Question__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_RandomQuestion__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.RandomQuestion, global::world.data.RandomQuestion.Builder> internal__static_world_data_RandomQuestion__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Vengeance__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Vengeance, global::world.data.Vengeance.Builder> internal__static_world_data_Vengeance__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Trade__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Trade, global::world.data.Trade.Builder> internal__static_world_data_Trade__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Team__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Team, global::world.data.Team.Builder> internal__static_world_data_Team__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Requestion__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Requestion, global::world.data.Requestion.Builder> internal__static_world_data_Requestion__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Role__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Role, global::world.data.Role.Builder> internal__static_world_data_Role__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_NPC__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.NPC, global::world.data.NPC.Builder> internal__static_world_data_NPC__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Map__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Map, global::world.data.Map.Builder> internal__static_world_data_Map__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Mine__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Mine, global::world.data.Mine.Builder> internal__static_world_data_Mine__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_SkillInstance__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.SkillInstance, global::world.data.SkillInstance.Builder> internal__static_world_data_SkillInstance__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Consortia__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Consortia, global::world.data.Consortia.Builder> internal__static_world_data_Consortia__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Consortia_MineStone__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Consortia.Types.MineStone, global::world.data.Consortia.Types.MineStone.Builder> internal__static_world_data_Consortia_MineStone__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_data_Consortia_Member__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.data.Consortia.Types.Member, global::world.data.Consortia.Types.Member.Builder> internal__static_world_data_Consortia_Member__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static WorldData() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChB3b3JsZF9kYXRhLnByb3RvEgp3b3JsZC5kYXRhGgxzeXN0ZW0ucHJvdG8a" + 
          "FXdvcmxkX2ludGVyZmFjZS5wcm90bxoUd29ybGRfdGVtcGxhdGUucHJvdG8i" + 
          "5wEKBUVxdWlwEhAKCHRlbXBsYXRlGAEgAigFEi4KBWNsYXNzGAIgAigOMh8u" + 
          "d29ybGQuSW50ZXJmYWNlLkl0ZW0uQ2xhc3NUeXBlEhEKCWJ1eV9wcmljZRgD" + 
          "IAIoBRISCgpzZWxsX3ByaWNlGAQgAigFEhEKCWR1cmFiaWxpdBgFIAIoBRIP" + 
          "Cgdzb2NrZXRzGAYgAigFEgwKBGdlbXMYByADKAUSDAoEdGltZRgIIAIoBRIR" + 
          "CgliaW5kX2ZsYWcYCSACKAgSIgoHZWZmZWN0cxgKIAMoCzIRLmNvcmUuRWZm" + 
          "ZWN0VmFsdWUiZAoEUHJvcBIQCgh0ZW1wbGF0ZRgBIAIoBRIMCgR0aW1lGAIg" + 
          "AigFEhEKCWJpbmRfZmxhZxgDIAIoCBITCgtvdmVybGFwX2N1chgEIAIoBRIU" + 
          "CgxjdXJfY29vbGRvd24YBSACKAUiLAoDR2VtEhAKCHRlbXBsYXRlGAEgAigF" + 
          "EhMKC292ZXJsYXBfY3VyGAIgAigFIu0BCghUYWxpc21hbhIQCgh0ZW1wbGF0" + 
          "ZRgBIAIoBRIPCgdwcmVmaXgxGAIgAigFEg8KB3ByZWZpeDIYAyACKAUSLgoF" + 
          "Y2xhc3MYBCACKA4yHy53b3JsZC5JbnRlcmZhY2UuSXRlbS5DbGFzc1R5cGUS" + 
          "EQoJYnV5X3ByaWNlGAUgAigFEhIKCnNlbGxfcHJpY2UYBiACKAUSDQoFbGV2" + 
          "ZWwYByACKAUSEAoIY29vbGRvd24YCCACKAUSEQoJYmluZF9mbGFnGAkgAigI" + 
          "EiIKB2VmZmVjdHMYCiADKAsyES5jb3JlLkVmZmVjdFZhbHVlIr8BCgRVc2Vy" + 
          "EgsKA1JNQhgBIAIoBRInCgZ3YWxsb3cYAiACKA4yFy53b3JsZC5kYXRhLlVz" + 
          "ZXIuV2FsbG93EhAKCGdtX2xldmVsGAMgAigFEhQKDGdtX2ludmlzaWJsZRgE" + 
          "IAIoCBIWCg5nbV91bmJyZWFrYWJsZRgFIAIoCCJBCgZXYWxsb3cSEQoNd2Fs" + 
          "bG93c3RhdGVfMBAAEhEKDXdhbGxvd3N0YXRlXzEQARIRCg13YWxsb3dzdGF0" + 
          "ZV8yEAIi6AQKBlBsYXllchIQCghuaWNrbmFtZRgBIAIoCRILCgNzdHIYAiAC" + 
          "KAUSCwoDYWdpGAMgAigFEgsKA3BoeRgEIAIoBRILCgNjb24YBSACKAUSCwoD" + 
          "aW50GAYgAigFEi0KCWNoYXJhY3RvchgHIAIoCzIaLndvcmxkLkludGVyZmFj" + 
          "ZS5DaGFyYWN0b3ISIwoDam9iGAggAigOMhYud29ybGQuZGF0YS5QbGF5ZXIu" + 
          "Sm9iEiMKA3NleBgJIAIoDjIWLndvcmxkLmRhdGEuUGxheWVyLlNleBILCgNl" + 
          "eHAYCiACKAUSEgoKdW51c2Vwb2ludBgLIAIoBRITCgtudXBsZXZlbGV4cBgM" + 
          "IAIoBRISCgpleHBfZmFjdG9yGA0gAigFEg0KBXRpdGxlGA4gAigFEg8KB2Jh" + 
          "Z19udW0YDyACKAUSEQoJZGVwb3RfbnVtGBAgAigFEgoKAnBrGBEgAigFEioK" + 
          "B3BrX21vZGUYEiACKA4yGS53b3JsZC5kYXRhLlBsYXllci5QS21vZGUSDAoE" + 
          "c291bBgTIAIoBRIRCgltYWdpY2ZpbmQYFCACKAUSDgoGc2xpZW50GBUgAigF" + 
          "Eg4KBmdvbmdkZRgWIAIoBRIQCghhaXhpbnpoaRgXIAIoBSIxCgNKb2ISCQoF" + 
          "am9iXzAQABIJCgVqb2JfMRABEgkKBWpvYl8yEAISCQoFam9iXzMQAyIyCgZQ" + 
          "S21vZGUSDAoIUEttb2RlXzAQABIMCghQS21vZGVfMRABEgwKCFBLbW9kZV8y" + 
          "EAIiIwoDU2V4EgwKCFNleF9tYWxlEAASDgoKU2V4X0ZlbWFsZRABInkKBEJ1" + 
          "ZmYSEgoKUmVsYXRpb25JRBgBIAIoBRIPCgdTa2lsbElEGAIgAigFEhMKC0J1" + 
          "ZmZlckluZGV4GAMgAigFEg4KBkZhY3RvchgEIAIoBRITCgtCdWZmZXJWYWx1" + 
          "ZRgFIAIoBRISCgpSZW1haW5UaW1lGAYgAigFIqwBCgRNYWlsEg0KBVRpdGxl" + 
          "GAEgAigJEg4KBlNlbmRlchgCIAIoCRIPCgdDb250ZW50GAMgAigJEg0KBU1v" + 
          "bmV5GAQgAigFEg8KB1l1YW5iYW8YBSACKAUSEAoIU2VuZFRpbWUYBiACKAQS" + 
          "EAoIUmVhZEZsYWcYByACKAUSEAoIU2VuZEZsYWcYCCACKAUSHgoKYXR0YWNo" + 
          "bWVudBgJIAMoCzIKLmNvcmUuR1VJRCI1CghRdWVzdGlvbhIKCgJpZBgBIAIo" + 
          "BRIOCgZjb3VudHMYAiADKAUSDQoFdGltZXIYAyACKAUicwoOUmFuZG9tUXVl" + 
          "c3Rpb24SDAoEdXNlZBgBIAIoBRINCgVTY29yZRgCIAIoBRINCgVMZXZlbBgD" + 
          "IAIoBRINCgVsaXN0cxgEIAMoBRImCghxdWVzdGlvbhgFIAIoCzIULndvcmxk" + 
          "LmRhdGEuUXVlc3Rpb24iNgoJVmVuZ2VhbmNlEg0KBXN0YXJ0GAEgAigNEhoK" + 
          "BnBsYXllchgCIAIoCzIKLmNvcmUuR1VJRCK2AQoFVHJhZGUSGgoGdGFyZ2V0" + 
          "GAEgAigLMgouY29yZS5HVUlEEiYKBXN0YXRlGAIgAigOMhcud29ybGQuZGF0" + 
          "YS5UcmFkZS5TdGF0ZRIZCgVpdGVtcxgDIAMoCzIKLmNvcmUuR1VJRBINCgVt" + 
          "b25leRgEIAIoBRIPCgd5dWFuYmFvGAUgAigFIi4KBVN0YXRlEgsKB3N0YXRl" + 
          "XzAQABILCgdzdGF0ZV8xEAESCwoHc3RhdGVfMhACIkQKBFRlYW0SIAoHcGxh" + 
          "eWVycxgBIAIoCzIPLmNvcmUuQ29udGFpbmVyEhoKBmxlYWRlchgCIAIoCzIK" + 
          "LmNvcmUuR1VJRCKiAQoKUmVxdWVzdGlvbhIaCgZ0YXJnZXQYASACKAsyCi5j" + 
          "b3JlLkdVSUQSKQoEdHlwZRgCIAIoDjIbLndvcmxkLmRhdGEuUmVxdWVzdGlv" + 
          "bi5UeXBlIk0KBFR5cGUSCAoEVGVhbRAAEgsKB1RlYWNoZXIQARILCgdTdHVk" + 
          "ZW50EAISCwoHYnJvdGhlchADEgkKBVRyYWRlEAQSCQoFR3VpbGQQBSK6BQoE" + 
          "Um9sZRIiCgZwbGF5ZXIYASACKAsyEi53b3JsZC5kYXRhLlBsYXllchIOCgZz" + 
          "a2lsbHMYAiADKAUSDgoGdGl0bGVzGAMgAygFEhAKCGppbmdsaWFuGAQgAygF" + 
          "Eg4KBnR1dG9ycxgFIAMoBRIdCglzaG9ydGN1dHMYBiADKAsyCi5jb3JlLkJh" + 
          "c2USEQoJYmFnX21vbmV5GAcgAigFEhMKC2RlcG90X21vbmV5GAggAigFEh8K" + 
          "BWJ1ZmZzGAkgAygLMhAud29ybGQuZGF0YS5CdWZmEh8KBW1haWxzGAogAygL" + 
          "MhAud29ybGQuZGF0YS5NYWlsEhYKDnF1ZXN0aW9uX2ZsYWdzGAsgAygFEicK" + 
          "CXF1ZXN0aW9ucxgMIAMoCzIULndvcmxkLmRhdGEuUXVlc3Rpb24SMwoPcXVl" + 
          "c3Rpb25fcmFuZG9tGA0gAygLMhoud29ybGQuZGF0YS5SYW5kb21RdWVzdGlv" + 
          "bhIgCgdzaGllbGRzGA4gAigLMg8uY29yZS5Db250YWluZXISIAoHZnJpZW5k" + 
          "cxgPIAIoCzIPLmNvcmUuQ29udGFpbmVyEiEKCGJyb3RoZXJzGBAgAigLMg8u" + 
          "Y29yZS5Db250YWluZXISIQoIdGVhY2hlcnMYESACKAsyDy5jb3JlLkNvbnRh" + 
          "aW5lchIhCghzdHVkZW50cxgSIAIoCzIPLmNvcmUuQ29udGFpbmVyEikKCnZl" + 
          "bmdlYW5jZXMYEyADKAsyFS53b3JsZC5kYXRhLlZlbmdlYW5jZRIZCgVndWls" + 
          "ZBgUIAIoCzIKLmNvcmUuR1VJRBIgCgV0cmFkZRgVIAIoCzIRLndvcmxkLmRh" + 
          "dGEuVHJhZGUSHgoFaXRlbXMYFiADKAsyDy5jb3JlLkNvbnRhaW5lchIYCgR0" + 
          "ZWFtGBcgAigLMgouY29yZS5HVUlEInYKA05QQxIQCgh0ZW1wbGF0ZRgBIAIo" + 
          "BRItCgljaGFyYWN0b3IYAiACKAsyGi53b3JsZC5JbnRlcmZhY2UuQ2hhcmFj" + 
          "dG9yEhAKCG9mZmVyZXhwGAMgAigFEgwKBHpvb20YBCACKAUSDgoGZm9sbG93" + 
          "GAUgAigFIhcKA01hcBIQCgh0ZW1wbGF0ZRgBIAIoBSJ7CgRNaW5lEhAKCHRl" + 
          "bXBsYXRlGAEgAigFEhEKCWNoYW5saWFuZxgCIAIoBRIcCghndWlsZF9pZBgD" + 
          "IAIoCzIKLmNvcmUuR1VJRBIdCgRucGNzGAQgAigLMg8uY29yZS5Db250YWlu" + 
          "ZXISEQoJQ291bnREb3duGAUgAigFIvEBCg1Ta2lsbEluc3RhbmNlEhAKCHNr" + 
          "aWxsX2lkGAEgAigFEhoKBmNhc3RlchgCIAIoCzIKLmNvcmUuR1VJRBIaCgZ0" + 
          "YXJnZXQYAyACKAsyCi5jb3JlLkdVSUQSGwoDcG9zGAQgAigLMg4uY29yZS5Q" + 
          "b3NpdGlvbhIRCglsYXN0X3RpbWUYBSACKA0SFAoMcmVzdWx0X3RpbWVzGAYg" + 
          "AigNIlAKBVN0YXRlEgkKBVNUQVJUEAASCwoHU0lOR0lORxABEgsKB0NBU1RJ" + 
          "TkcQAhIKCgZGTFlJTkcQAxIKCgZMQVRFTlQQBBIKCgZSRVNVTFQQBSKlAwoJ" + 
          "Q29uc29ydGlhEgwKBG5hbWUYASACKAkSDQoFbGV2ZWwYAiACKAUSDQoFZnVu" + 
          "ZHMYAyACKAUSDwoHY29uc3VtZRgEIAIoBRIQCghidWxsZXRpbhgFIAIoCRIt" + 
          "CgdtZW1iZXJzGAYgAygLMhwud29ybGQuZGF0YS5Db25zb3J0aWEuTWVtYmVy" + 
          "Ei4KBWRlcG90GAcgAygLMh8ud29ybGQuZGF0YS5Db25zb3J0aWEuTWluZVN0" + 
          "b25lGj8KCU1pbmVTdG9uZRIKCgJpZBgBIAIoBRILCgNjbnQYAiACKAUSCwoD" + 
          "bWF4GAMgAigFEgwKBHJhdGUYBCACKAUaqAEKBk1lbWJlchIaCgZwbGF5ZXIY" + 
          "ASACKAsyCi5jb3JlLkdVSUQSLwoEZHV0eRgCIAIoDjIhLndvcmxkLmRhdGEu" + 
          "Q29uc29ydGlhLk1lbWJlci5EdXR5Eg0KBW9mZmVyGAMgAigFIkIKBER1dHkS" + 
          "CgoGTGVhZGVyEAASCgoGU2Vjb25kEAESCwoHTWFuYWdlchACEgkKBU1ham9y" + 
          "EAMSCgoGTm9ybWFsEAQ=");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_world_data_Equip__Descriptor = Descriptor.MessageTypes[0];
        internal__static_world_data_Equip__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Equip, global::world.data.Equip.Builder>(internal__static_world_data_Equip__Descriptor,
                new string[] { "Template", "Class", "BuyPrice", "SellPrice", "Durabilit", "Sockets", "Gems", "Time", "BindFlag", "Effects", });
        internal__static_world_data_Prop__Descriptor = Descriptor.MessageTypes[1];
        internal__static_world_data_Prop__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Prop, global::world.data.Prop.Builder>(internal__static_world_data_Prop__Descriptor,
                new string[] { "Template", "Time", "BindFlag", "OverlapCur", "CurCooldown", });
        internal__static_world_data_Gem__Descriptor = Descriptor.MessageTypes[2];
        internal__static_world_data_Gem__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Gem, global::world.data.Gem.Builder>(internal__static_world_data_Gem__Descriptor,
                new string[] { "Template", "OverlapCur", });
        internal__static_world_data_Talisman__Descriptor = Descriptor.MessageTypes[3];
        internal__static_world_data_Talisman__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Talisman, global::world.data.Talisman.Builder>(internal__static_world_data_Talisman__Descriptor,
                new string[] { "Template", "Prefix1", "Prefix2", "Class", "BuyPrice", "SellPrice", "Level", "Cooldown", "BindFlag", "Effects", });
        internal__static_world_data_User__Descriptor = Descriptor.MessageTypes[4];
        internal__static_world_data_User__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.User, global::world.data.User.Builder>(internal__static_world_data_User__Descriptor,
                new string[] { "RMB", "Wallow", "GmLevel", "GmInvisible", "GmUnbreakable", });
        internal__static_world_data_Player__Descriptor = Descriptor.MessageTypes[5];
        internal__static_world_data_Player__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Player, global::world.data.Player.Builder>(internal__static_world_data_Player__Descriptor,
                new string[] { "Nickname", "Str", "Agi", "Phy", "Con", "Int", "Charactor", "Job", "Sex", "Exp", "Unusepoint", "Nuplevelexp", "ExpFactor", "Title", "BagNum", "DepotNum", "Pk", "PkMode", "Soul", "Magicfind", "Slient", "Gongde", "Aixinzhi", });
        internal__static_world_data_Buff__Descriptor = Descriptor.MessageTypes[6];
        internal__static_world_data_Buff__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Buff, global::world.data.Buff.Builder>(internal__static_world_data_Buff__Descriptor,
                new string[] { "RelationID", "SkillID", "BufferIndex", "Factor", "BufferValue", "RemainTime", });
        internal__static_world_data_Mail__Descriptor = Descriptor.MessageTypes[7];
        internal__static_world_data_Mail__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Mail, global::world.data.Mail.Builder>(internal__static_world_data_Mail__Descriptor,
                new string[] { "Title", "Sender", "Content", "Money", "Yuanbao", "SendTime", "ReadFlag", "SendFlag", "Attachment", });
        internal__static_world_data_Question__Descriptor = Descriptor.MessageTypes[8];
        internal__static_world_data_Question__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Question, global::world.data.Question.Builder>(internal__static_world_data_Question__Descriptor,
                new string[] { "Id", "Counts", "Timer", });
        internal__static_world_data_RandomQuestion__Descriptor = Descriptor.MessageTypes[9];
        internal__static_world_data_RandomQuestion__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.RandomQuestion, global::world.data.RandomQuestion.Builder>(internal__static_world_data_RandomQuestion__Descriptor,
                new string[] { "Used", "Score", "Level", "Lists", "Question", });
        internal__static_world_data_Vengeance__Descriptor = Descriptor.MessageTypes[10];
        internal__static_world_data_Vengeance__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Vengeance, global::world.data.Vengeance.Builder>(internal__static_world_data_Vengeance__Descriptor,
                new string[] { "Start", "Player", });
        internal__static_world_data_Trade__Descriptor = Descriptor.MessageTypes[11];
        internal__static_world_data_Trade__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Trade, global::world.data.Trade.Builder>(internal__static_world_data_Trade__Descriptor,
                new string[] { "Target", "State", "Items", "Money", "Yuanbao", });
        internal__static_world_data_Team__Descriptor = Descriptor.MessageTypes[12];
        internal__static_world_data_Team__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Team, global::world.data.Team.Builder>(internal__static_world_data_Team__Descriptor,
                new string[] { "Players", "Leader", });
        internal__static_world_data_Requestion__Descriptor = Descriptor.MessageTypes[13];
        internal__static_world_data_Requestion__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Requestion, global::world.data.Requestion.Builder>(internal__static_world_data_Requestion__Descriptor,
                new string[] { "Target", "Type", });
        internal__static_world_data_Role__Descriptor = Descriptor.MessageTypes[14];
        internal__static_world_data_Role__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Role, global::world.data.Role.Builder>(internal__static_world_data_Role__Descriptor,
                new string[] { "Player", "Skills", "Titles", "Jinglian", "Tutors", "Shortcuts", "BagMoney", "DepotMoney", "Buffs", "Mails", "QuestionFlags", "Questions", "QuestionRandom", "Shields", "Friends", "Brothers", "Teachers", "Students", "Vengeances", "Guild", "Trade", "Items", "Team", });
        internal__static_world_data_NPC__Descriptor = Descriptor.MessageTypes[15];
        internal__static_world_data_NPC__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.NPC, global::world.data.NPC.Builder>(internal__static_world_data_NPC__Descriptor,
                new string[] { "Template", "Charactor", "Offerexp", "Zoom", "Follow", });
        internal__static_world_data_Map__Descriptor = Descriptor.MessageTypes[16];
        internal__static_world_data_Map__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Map, global::world.data.Map.Builder>(internal__static_world_data_Map__Descriptor,
                new string[] { "Template", });
        internal__static_world_data_Mine__Descriptor = Descriptor.MessageTypes[17];
        internal__static_world_data_Mine__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Mine, global::world.data.Mine.Builder>(internal__static_world_data_Mine__Descriptor,
                new string[] { "Template", "Chanliang", "GuildId", "Npcs", "CountDown", });
        internal__static_world_data_SkillInstance__Descriptor = Descriptor.MessageTypes[18];
        internal__static_world_data_SkillInstance__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.SkillInstance, global::world.data.SkillInstance.Builder>(internal__static_world_data_SkillInstance__Descriptor,
                new string[] { "SkillId", "Caster", "Target", "Pos", "LastTime", "ResultTimes", });
        internal__static_world_data_Consortia__Descriptor = Descriptor.MessageTypes[19];
        internal__static_world_data_Consortia__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Consortia, global::world.data.Consortia.Builder>(internal__static_world_data_Consortia__Descriptor,
                new string[] { "Name", "Level", "Funds", "Consume", "Bulletin", "Members", "Depot", });
        internal__static_world_data_Consortia_MineStone__Descriptor = internal__static_world_data_Consortia__Descriptor.NestedTypes[0];
        internal__static_world_data_Consortia_MineStone__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Consortia.Types.MineStone, global::world.data.Consortia.Types.MineStone.Builder>(internal__static_world_data_Consortia_MineStone__Descriptor,
                new string[] { "Id", "Cnt", "Max", "Rate", });
        internal__static_world_data_Consortia_Member__Descriptor = internal__static_world_data_Consortia__Descriptor.NestedTypes[1];
        internal__static_world_data_Consortia_Member__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.data.Consortia.Types.Member, global::world.data.Consortia.Types.Member.Builder>(internal__static_world_data_Consortia_Member__Descriptor,
                new string[] { "Player", "Duty", "Offer", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::core.System.Descriptor, 
          global::world.Interface.WorldInterface.Descriptor, 
          global::world.template.WorldTemplate.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Equip : pb::GeneratedMessage<Equip, Equip.Builder> {
    private Equip() { }
    private static readonly Equip defaultInstance = new Equip().MakeReadOnly();
    private static readonly string[] _equipFieldNames = new string[] { "bind_flag", "buy_price", "class", "durabilit", "effects", "gems", "sell_price", "sockets", "template", "time" };
    private static readonly uint[] _equipFieldTags = new uint[] { 72, 24, 16, 40, 82, 56, 32, 48, 8, 64 };
    public static Equip DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Equip DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Equip ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Equip__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Equip, Equip.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Equip__FieldAccessorTable; }
    }
    
    public const int TemplateFieldNumber = 1;
    private bool hasTemplate;
    private int template_;
    public bool HasTemplate {
      get { return hasTemplate; }
    }
    public int Template {
      get { return template_; }
    }
    
    public const int ClassFieldNumber = 2;
    private bool hasClass;
    private global::world.Interface.Item.Types.ClassType class_ = global::world.Interface.Item.Types.ClassType.PuTong;
    public bool HasClass {
      get { return hasClass; }
    }
    public global::world.Interface.Item.Types.ClassType Class {
      get { return class_; }
    }
    
    public const int BuyPriceFieldNumber = 3;
    private bool hasBuyPrice;
    private int buyPrice_;
    public bool HasBuyPrice {
      get { return hasBuyPrice; }
    }
    public int BuyPrice {
      get { return buyPrice_; }
    }
    
    public const int SellPriceFieldNumber = 4;
    private bool hasSellPrice;
    private int sellPrice_;
    public bool HasSellPrice {
      get { return hasSellPrice; }
    }
    public int SellPrice {
      get { return sellPrice_; }
    }
    
    public const int DurabilitFieldNumber = 5;
    private bool hasDurabilit;
    private int durabilit_;
    public bool HasDurabilit {
      get { return hasDurabilit; }
    }
    public int Durabilit {
      get { return durabilit_; }
    }
    
    public const int SocketsFieldNumber = 6;
    private bool hasSockets;
    private int sockets_;
    public bool HasSockets {
      get { return hasSockets; }
    }
    public int Sockets {
      get { return sockets_; }
    }
    
    public const int GemsFieldNumber = 7;
    private pbc::PopsicleList<int> gems_ = new pbc::PopsicleList<int>();
    public scg::IList<int> GemsList {
      get { return pbc::Lists.AsReadOnly(gems_); }
    }
    public int GemsCount {
      get { return gems_.Count; }
    }
    public int GetGems(int index) {
      return gems_[index];
    }
    
    public const int TimeFieldNumber = 8;
    private bool hasTime;
    private int time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public int Time {
      get { return time_; }
    }
    
    public const int BindFlagFieldNumber = 9;
    private bool hasBindFlag;
    private bool bindFlag_;
    public bool HasBindFlag {
      get { return hasBindFlag; }
    }
    public bool BindFlag {
      get { return bindFlag_; }
    }
    
    public const int EffectsFieldNumber = 10;
    private pbc::PopsicleList<global::core.EffectValue> effects_ = new pbc::PopsicleList<global::core.EffectValue>();
    public scg::IList<global::core.EffectValue> EffectsList {
      get { return effects_; }
    }
    public int EffectsCount {
      get { return effects_.Count; }
    }
    public global::core.EffectValue GetEffects(int index) {
      return effects_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTemplate) return false;
        if (!hasClass) return false;
        if (!hasBuyPrice) return false;
        if (!hasSellPrice) return false;
        if (!hasDurabilit) return false;
        if (!hasSockets) return false;
        if (!hasTime) return false;
        if (!hasBindFlag) return false;
        foreach (global::core.EffectValue element in EffectsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _equipFieldNames;
      if (hasTemplate) {
        output.WriteInt32(1, field_names[8], Template);
      }
      if (hasClass) {
        output.WriteEnum(2, field_names[2], (int) Class, Class);
      }
      if (hasBuyPrice) {
        output.WriteInt32(3, field_names[1], BuyPrice);
      }
      if (hasSellPrice) {
        output.WriteInt32(4, field_names[6], SellPrice);
      }
      if (hasDurabilit) {
        output.WriteInt32(5, field_names[3], Durabilit);
      }
      if (hasSockets) {
        output.WriteInt32(6, field_names[7], Sockets);
      }
      if (gems_.Count > 0) {
        output.WriteInt32Array(7, field_names[5], gems_);
      }
      if (hasTime) {
        output.WriteInt32(8, field_names[9], Time);
      }
      if (hasBindFlag) {
        output.WriteBool(9, field_names[0], BindFlag);
      }
      if (effects_.Count > 0) {
        output.WriteMessageArray(10, field_names[4], effects_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTemplate) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Template);
        }
        if (hasClass) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Class);
        }
        if (hasBuyPrice) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, BuyPrice);
        }
        if (hasSellPrice) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, SellPrice);
        }
        if (hasDurabilit) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Durabilit);
        }
        if (hasSockets) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Sockets);
        }
        {
          int dataSize = 0;
          foreach (int element in GemsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * gems_.Count;
        }
        if (hasTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Time);
        }
        if (hasBindFlag) {
          size += pb::CodedOutputStream.ComputeBoolSize(9, BindFlag);
        }
        foreach (global::core.EffectValue element in EffectsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Equip ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Equip ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Equip ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Equip ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Equip ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Equip ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Equip ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Equip ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Equip ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Equip ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Equip MakeReadOnly() {
      gems_.MakeReadOnly();
      effects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Equip prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Equip, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Equip cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Equip result;
      
      private Equip PrepareBuilder() {
        if (resultIsReadOnly) {
          Equip original = result;
          result = new Equip();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Equip MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Equip.Descriptor; }
      }
      
      public override Equip DefaultInstanceForType {
        get { return global::world.data.Equip.DefaultInstance; }
      }
      
      public override Equip BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Equip) {
          return MergeFrom((Equip) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Equip other) {
        if (other == global::world.data.Equip.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTemplate) {
          Template = other.Template;
        }
        if (other.HasClass) {
          Class = other.Class;
        }
        if (other.HasBuyPrice) {
          BuyPrice = other.BuyPrice;
        }
        if (other.HasSellPrice) {
          SellPrice = other.SellPrice;
        }
        if (other.HasDurabilit) {
          Durabilit = other.Durabilit;
        }
        if (other.HasSockets) {
          Sockets = other.Sockets;
        }
        if (other.gems_.Count != 0) {
          result.gems_.Add(other.gems_);
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasBindFlag) {
          BindFlag = other.BindFlag;
        }
        if (other.effects_.Count != 0) {
          result.effects_.Add(other.effects_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_equipFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _equipFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTemplate = input.ReadInt32(ref result.template_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.class_, out unknown)) {
                result.hasClass = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              result.hasBuyPrice = input.ReadInt32(ref result.buyPrice_);
              break;
            }
            case 32: {
              result.hasSellPrice = input.ReadInt32(ref result.sellPrice_);
              break;
            }
            case 40: {
              result.hasDurabilit = input.ReadInt32(ref result.durabilit_);
              break;
            }
            case 48: {
              result.hasSockets = input.ReadInt32(ref result.sockets_);
              break;
            }
            case 58:
            case 56: {
              input.ReadInt32Array(tag, field_name, result.gems_);
              break;
            }
            case 64: {
              result.hasTime = input.ReadInt32(ref result.time_);
              break;
            }
            case 72: {
              result.hasBindFlag = input.ReadBool(ref result.bindFlag_);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.effects_, global::core.EffectValue.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTemplate {
        get { return result.hasTemplate; }
      }
      public int Template {
        get { return result.Template; }
        set { SetTemplate(value); }
      }
      public Builder SetTemplate(int value) {
        PrepareBuilder();
        result.hasTemplate = true;
        result.template_ = value;
        return this;
      }
      public Builder ClearTemplate() {
        PrepareBuilder();
        result.hasTemplate = false;
        result.template_ = 0;
        return this;
      }
      
      public bool HasClass {
       get { return result.hasClass; }
      }
      public global::world.Interface.Item.Types.ClassType Class {
        get { return result.Class; }
        set { SetClass(value); }
      }
      public Builder SetClass(global::world.Interface.Item.Types.ClassType value) {
        PrepareBuilder();
        result.hasClass = true;
        result.class_ = value;
        return this;
      }
      public Builder ClearClass() {
        PrepareBuilder();
        result.hasClass = false;
        result.class_ = global::world.Interface.Item.Types.ClassType.PuTong;
        return this;
      }
      
      public bool HasBuyPrice {
        get { return result.hasBuyPrice; }
      }
      public int BuyPrice {
        get { return result.BuyPrice; }
        set { SetBuyPrice(value); }
      }
      public Builder SetBuyPrice(int value) {
        PrepareBuilder();
        result.hasBuyPrice = true;
        result.buyPrice_ = value;
        return this;
      }
      public Builder ClearBuyPrice() {
        PrepareBuilder();
        result.hasBuyPrice = false;
        result.buyPrice_ = 0;
        return this;
      }
      
      public bool HasSellPrice {
        get { return result.hasSellPrice; }
      }
      public int SellPrice {
        get { return result.SellPrice; }
        set { SetSellPrice(value); }
      }
      public Builder SetSellPrice(int value) {
        PrepareBuilder();
        result.hasSellPrice = true;
        result.sellPrice_ = value;
        return this;
      }
      public Builder ClearSellPrice() {
        PrepareBuilder();
        result.hasSellPrice = false;
        result.sellPrice_ = 0;
        return this;
      }
      
      public bool HasDurabilit {
        get { return result.hasDurabilit; }
      }
      public int Durabilit {
        get { return result.Durabilit; }
        set { SetDurabilit(value); }
      }
      public Builder SetDurabilit(int value) {
        PrepareBuilder();
        result.hasDurabilit = true;
        result.durabilit_ = value;
        return this;
      }
      public Builder ClearDurabilit() {
        PrepareBuilder();
        result.hasDurabilit = false;
        result.durabilit_ = 0;
        return this;
      }
      
      public bool HasSockets {
        get { return result.hasSockets; }
      }
      public int Sockets {
        get { return result.Sockets; }
        set { SetSockets(value); }
      }
      public Builder SetSockets(int value) {
        PrepareBuilder();
        result.hasSockets = true;
        result.sockets_ = value;
        return this;
      }
      public Builder ClearSockets() {
        PrepareBuilder();
        result.hasSockets = false;
        result.sockets_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> GemsList {
        get { return PrepareBuilder().gems_; }
      }
      public int GemsCount {
        get { return result.GemsCount; }
      }
      public int GetGems(int index) {
        return result.GetGems(index);
      }
      public Builder SetGems(int index, int value) {
        PrepareBuilder();
        result.gems_[index] = value;
        return this;
      }
      public Builder AddGems(int value) {
        PrepareBuilder();
        result.gems_.Add(value);
        return this;
      }
      public Builder AddRangeGems(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.gems_.Add(values);
        return this;
      }
      public Builder ClearGems() {
        PrepareBuilder();
        result.gems_.Clear();
        return this;
      }
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public int Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(int value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0;
        return this;
      }
      
      public bool HasBindFlag {
        get { return result.hasBindFlag; }
      }
      public bool BindFlag {
        get { return result.BindFlag; }
        set { SetBindFlag(value); }
      }
      public Builder SetBindFlag(bool value) {
        PrepareBuilder();
        result.hasBindFlag = true;
        result.bindFlag_ = value;
        return this;
      }
      public Builder ClearBindFlag() {
        PrepareBuilder();
        result.hasBindFlag = false;
        result.bindFlag_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::core.EffectValue> EffectsList {
        get { return PrepareBuilder().effects_; }
      }
      public int EffectsCount {
        get { return result.EffectsCount; }
      }
      public global::core.EffectValue GetEffects(int index) {
        return result.GetEffects(index);
      }
      public Builder SetEffects(int index, global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_[index] = value;
        return this;
      }
      public Builder SetEffects(int index, global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEffects(global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_.Add(value);
        return this;
      }
      public Builder AddEffects(global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEffects(scg::IEnumerable<global::core.EffectValue> values) {
        PrepareBuilder();
        result.effects_.Add(values);
        return this;
      }
      public Builder ClearEffects() {
        PrepareBuilder();
        result.effects_.Clear();
        return this;
      }
    }
    static Equip() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Prop : pb::GeneratedMessage<Prop, Prop.Builder> {
    private Prop() { }
    private static readonly Prop defaultInstance = new Prop().MakeReadOnly();
    private static readonly string[] _propFieldNames = new string[] { "bind_flag", "cur_cooldown", "overlap_cur", "template", "time" };
    private static readonly uint[] _propFieldTags = new uint[] { 24, 40, 32, 8, 16 };
    public static Prop DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Prop DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Prop ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Prop__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Prop, Prop.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Prop__FieldAccessorTable; }
    }
    
    public const int TemplateFieldNumber = 1;
    private bool hasTemplate;
    private int template_;
    public bool HasTemplate {
      get { return hasTemplate; }
    }
    public int Template {
      get { return template_; }
    }
    
    public const int TimeFieldNumber = 2;
    private bool hasTime;
    private int time_;
    public bool HasTime {
      get { return hasTime; }
    }
    public int Time {
      get { return time_; }
    }
    
    public const int BindFlagFieldNumber = 3;
    private bool hasBindFlag;
    private bool bindFlag_;
    public bool HasBindFlag {
      get { return hasBindFlag; }
    }
    public bool BindFlag {
      get { return bindFlag_; }
    }
    
    public const int OverlapCurFieldNumber = 4;
    private bool hasOverlapCur;
    private int overlapCur_;
    public bool HasOverlapCur {
      get { return hasOverlapCur; }
    }
    public int OverlapCur {
      get { return overlapCur_; }
    }
    
    public const int CurCooldownFieldNumber = 5;
    private bool hasCurCooldown;
    private int curCooldown_;
    public bool HasCurCooldown {
      get { return hasCurCooldown; }
    }
    public int CurCooldown {
      get { return curCooldown_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTemplate) return false;
        if (!hasTime) return false;
        if (!hasBindFlag) return false;
        if (!hasOverlapCur) return false;
        if (!hasCurCooldown) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _propFieldNames;
      if (hasTemplate) {
        output.WriteInt32(1, field_names[3], Template);
      }
      if (hasTime) {
        output.WriteInt32(2, field_names[4], Time);
      }
      if (hasBindFlag) {
        output.WriteBool(3, field_names[0], BindFlag);
      }
      if (hasOverlapCur) {
        output.WriteInt32(4, field_names[2], OverlapCur);
      }
      if (hasCurCooldown) {
        output.WriteInt32(5, field_names[1], CurCooldown);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTemplate) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Template);
        }
        if (hasTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Time);
        }
        if (hasBindFlag) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, BindFlag);
        }
        if (hasOverlapCur) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, OverlapCur);
        }
        if (hasCurCooldown) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, CurCooldown);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Prop ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Prop ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Prop ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Prop ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Prop ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Prop ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Prop ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Prop ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Prop ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Prop ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Prop MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Prop prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Prop, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Prop cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Prop result;
      
      private Prop PrepareBuilder() {
        if (resultIsReadOnly) {
          Prop original = result;
          result = new Prop();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Prop MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Prop.Descriptor; }
      }
      
      public override Prop DefaultInstanceForType {
        get { return global::world.data.Prop.DefaultInstance; }
      }
      
      public override Prop BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Prop) {
          return MergeFrom((Prop) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Prop other) {
        if (other == global::world.data.Prop.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTemplate) {
          Template = other.Template;
        }
        if (other.HasTime) {
          Time = other.Time;
        }
        if (other.HasBindFlag) {
          BindFlag = other.BindFlag;
        }
        if (other.HasOverlapCur) {
          OverlapCur = other.OverlapCur;
        }
        if (other.HasCurCooldown) {
          CurCooldown = other.CurCooldown;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_propFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _propFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTemplate = input.ReadInt32(ref result.template_);
              break;
            }
            case 16: {
              result.hasTime = input.ReadInt32(ref result.time_);
              break;
            }
            case 24: {
              result.hasBindFlag = input.ReadBool(ref result.bindFlag_);
              break;
            }
            case 32: {
              result.hasOverlapCur = input.ReadInt32(ref result.overlapCur_);
              break;
            }
            case 40: {
              result.hasCurCooldown = input.ReadInt32(ref result.curCooldown_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTemplate {
        get { return result.hasTemplate; }
      }
      public int Template {
        get { return result.Template; }
        set { SetTemplate(value); }
      }
      public Builder SetTemplate(int value) {
        PrepareBuilder();
        result.hasTemplate = true;
        result.template_ = value;
        return this;
      }
      public Builder ClearTemplate() {
        PrepareBuilder();
        result.hasTemplate = false;
        result.template_ = 0;
        return this;
      }
      
      public bool HasTime {
        get { return result.hasTime; }
      }
      public int Time {
        get { return result.Time; }
        set { SetTime(value); }
      }
      public Builder SetTime(int value) {
        PrepareBuilder();
        result.hasTime = true;
        result.time_ = value;
        return this;
      }
      public Builder ClearTime() {
        PrepareBuilder();
        result.hasTime = false;
        result.time_ = 0;
        return this;
      }
      
      public bool HasBindFlag {
        get { return result.hasBindFlag; }
      }
      public bool BindFlag {
        get { return result.BindFlag; }
        set { SetBindFlag(value); }
      }
      public Builder SetBindFlag(bool value) {
        PrepareBuilder();
        result.hasBindFlag = true;
        result.bindFlag_ = value;
        return this;
      }
      public Builder ClearBindFlag() {
        PrepareBuilder();
        result.hasBindFlag = false;
        result.bindFlag_ = false;
        return this;
      }
      
      public bool HasOverlapCur {
        get { return result.hasOverlapCur; }
      }
      public int OverlapCur {
        get { return result.OverlapCur; }
        set { SetOverlapCur(value); }
      }
      public Builder SetOverlapCur(int value) {
        PrepareBuilder();
        result.hasOverlapCur = true;
        result.overlapCur_ = value;
        return this;
      }
      public Builder ClearOverlapCur() {
        PrepareBuilder();
        result.hasOverlapCur = false;
        result.overlapCur_ = 0;
        return this;
      }
      
      public bool HasCurCooldown {
        get { return result.hasCurCooldown; }
      }
      public int CurCooldown {
        get { return result.CurCooldown; }
        set { SetCurCooldown(value); }
      }
      public Builder SetCurCooldown(int value) {
        PrepareBuilder();
        result.hasCurCooldown = true;
        result.curCooldown_ = value;
        return this;
      }
      public Builder ClearCurCooldown() {
        PrepareBuilder();
        result.hasCurCooldown = false;
        result.curCooldown_ = 0;
        return this;
      }
    }
    static Prop() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Gem : pb::GeneratedMessage<Gem, Gem.Builder> {
    private Gem() { }
    private static readonly Gem defaultInstance = new Gem().MakeReadOnly();
    private static readonly string[] _gemFieldNames = new string[] { "overlap_cur", "template" };
    private static readonly uint[] _gemFieldTags = new uint[] { 16, 8 };
    public static Gem DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Gem DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Gem ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Gem__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Gem, Gem.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Gem__FieldAccessorTable; }
    }
    
    public const int TemplateFieldNumber = 1;
    private bool hasTemplate;
    private int template_;
    public bool HasTemplate {
      get { return hasTemplate; }
    }
    public int Template {
      get { return template_; }
    }
    
    public const int OverlapCurFieldNumber = 2;
    private bool hasOverlapCur;
    private int overlapCur_;
    public bool HasOverlapCur {
      get { return hasOverlapCur; }
    }
    public int OverlapCur {
      get { return overlapCur_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTemplate) return false;
        if (!hasOverlapCur) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gemFieldNames;
      if (hasTemplate) {
        output.WriteInt32(1, field_names[1], Template);
      }
      if (hasOverlapCur) {
        output.WriteInt32(2, field_names[0], OverlapCur);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTemplate) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Template);
        }
        if (hasOverlapCur) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, OverlapCur);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Gem ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Gem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Gem ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Gem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Gem ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Gem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Gem ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Gem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Gem ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Gem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Gem MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Gem prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Gem, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Gem cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Gem result;
      
      private Gem PrepareBuilder() {
        if (resultIsReadOnly) {
          Gem original = result;
          result = new Gem();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Gem MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Gem.Descriptor; }
      }
      
      public override Gem DefaultInstanceForType {
        get { return global::world.data.Gem.DefaultInstance; }
      }
      
      public override Gem BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Gem) {
          return MergeFrom((Gem) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Gem other) {
        if (other == global::world.data.Gem.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTemplate) {
          Template = other.Template;
        }
        if (other.HasOverlapCur) {
          OverlapCur = other.OverlapCur;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTemplate = input.ReadInt32(ref result.template_);
              break;
            }
            case 16: {
              result.hasOverlapCur = input.ReadInt32(ref result.overlapCur_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTemplate {
        get { return result.hasTemplate; }
      }
      public int Template {
        get { return result.Template; }
        set { SetTemplate(value); }
      }
      public Builder SetTemplate(int value) {
        PrepareBuilder();
        result.hasTemplate = true;
        result.template_ = value;
        return this;
      }
      public Builder ClearTemplate() {
        PrepareBuilder();
        result.hasTemplate = false;
        result.template_ = 0;
        return this;
      }
      
      public bool HasOverlapCur {
        get { return result.hasOverlapCur; }
      }
      public int OverlapCur {
        get { return result.OverlapCur; }
        set { SetOverlapCur(value); }
      }
      public Builder SetOverlapCur(int value) {
        PrepareBuilder();
        result.hasOverlapCur = true;
        result.overlapCur_ = value;
        return this;
      }
      public Builder ClearOverlapCur() {
        PrepareBuilder();
        result.hasOverlapCur = false;
        result.overlapCur_ = 0;
        return this;
      }
    }
    static Gem() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Talisman : pb::GeneratedMessage<Talisman, Talisman.Builder> {
    private Talisman() { }
    private static readonly Talisman defaultInstance = new Talisman().MakeReadOnly();
    private static readonly string[] _talismanFieldNames = new string[] { "bind_flag", "buy_price", "class", "cooldown", "effects", "level", "prefix1", "prefix2", "sell_price", "template" };
    private static readonly uint[] _talismanFieldTags = new uint[] { 72, 40, 32, 64, 82, 56, 16, 24, 48, 8 };
    public static Talisman DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Talisman DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Talisman ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Talisman__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Talisman, Talisman.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Talisman__FieldAccessorTable; }
    }
    
    public const int TemplateFieldNumber = 1;
    private bool hasTemplate;
    private int template_;
    public bool HasTemplate {
      get { return hasTemplate; }
    }
    public int Template {
      get { return template_; }
    }
    
    public const int Prefix1FieldNumber = 2;
    private bool hasPrefix1;
    private int prefix1_;
    public bool HasPrefix1 {
      get { return hasPrefix1; }
    }
    public int Prefix1 {
      get { return prefix1_; }
    }
    
    public const int Prefix2FieldNumber = 3;
    private bool hasPrefix2;
    private int prefix2_;
    public bool HasPrefix2 {
      get { return hasPrefix2; }
    }
    public int Prefix2 {
      get { return prefix2_; }
    }
    
    public const int ClassFieldNumber = 4;
    private bool hasClass;
    private global::world.Interface.Item.Types.ClassType class_ = global::world.Interface.Item.Types.ClassType.PuTong;
    public bool HasClass {
      get { return hasClass; }
    }
    public global::world.Interface.Item.Types.ClassType Class {
      get { return class_; }
    }
    
    public const int BuyPriceFieldNumber = 5;
    private bool hasBuyPrice;
    private int buyPrice_;
    public bool HasBuyPrice {
      get { return hasBuyPrice; }
    }
    public int BuyPrice {
      get { return buyPrice_; }
    }
    
    public const int SellPriceFieldNumber = 6;
    private bool hasSellPrice;
    private int sellPrice_;
    public bool HasSellPrice {
      get { return hasSellPrice; }
    }
    public int SellPrice {
      get { return sellPrice_; }
    }
    
    public const int LevelFieldNumber = 7;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int CooldownFieldNumber = 8;
    private bool hasCooldown;
    private int cooldown_;
    public bool HasCooldown {
      get { return hasCooldown; }
    }
    public int Cooldown {
      get { return cooldown_; }
    }
    
    public const int BindFlagFieldNumber = 9;
    private bool hasBindFlag;
    private bool bindFlag_;
    public bool HasBindFlag {
      get { return hasBindFlag; }
    }
    public bool BindFlag {
      get { return bindFlag_; }
    }
    
    public const int EffectsFieldNumber = 10;
    private pbc::PopsicleList<global::core.EffectValue> effects_ = new pbc::PopsicleList<global::core.EffectValue>();
    public scg::IList<global::core.EffectValue> EffectsList {
      get { return effects_; }
    }
    public int EffectsCount {
      get { return effects_.Count; }
    }
    public global::core.EffectValue GetEffects(int index) {
      return effects_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTemplate) return false;
        if (!hasPrefix1) return false;
        if (!hasPrefix2) return false;
        if (!hasClass) return false;
        if (!hasBuyPrice) return false;
        if (!hasSellPrice) return false;
        if (!hasLevel) return false;
        if (!hasCooldown) return false;
        if (!hasBindFlag) return false;
        foreach (global::core.EffectValue element in EffectsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _talismanFieldNames;
      if (hasTemplate) {
        output.WriteInt32(1, field_names[9], Template);
      }
      if (hasPrefix1) {
        output.WriteInt32(2, field_names[6], Prefix1);
      }
      if (hasPrefix2) {
        output.WriteInt32(3, field_names[7], Prefix2);
      }
      if (hasClass) {
        output.WriteEnum(4, field_names[2], (int) Class, Class);
      }
      if (hasBuyPrice) {
        output.WriteInt32(5, field_names[1], BuyPrice);
      }
      if (hasSellPrice) {
        output.WriteInt32(6, field_names[8], SellPrice);
      }
      if (hasLevel) {
        output.WriteInt32(7, field_names[5], Level);
      }
      if (hasCooldown) {
        output.WriteInt32(8, field_names[3], Cooldown);
      }
      if (hasBindFlag) {
        output.WriteBool(9, field_names[0], BindFlag);
      }
      if (effects_.Count > 0) {
        output.WriteMessageArray(10, field_names[4], effects_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTemplate) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Template);
        }
        if (hasPrefix1) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Prefix1);
        }
        if (hasPrefix2) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Prefix2);
        }
        if (hasClass) {
          size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Class);
        }
        if (hasBuyPrice) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, BuyPrice);
        }
        if (hasSellPrice) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, SellPrice);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, Level);
        }
        if (hasCooldown) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Cooldown);
        }
        if (hasBindFlag) {
          size += pb::CodedOutputStream.ComputeBoolSize(9, BindFlag);
        }
        foreach (global::core.EffectValue element in EffectsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Talisman ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Talisman ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Talisman ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Talisman ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Talisman ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Talisman ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Talisman ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Talisman ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Talisman ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Talisman ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Talisman MakeReadOnly() {
      effects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Talisman prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Talisman, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Talisman cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Talisman result;
      
      private Talisman PrepareBuilder() {
        if (resultIsReadOnly) {
          Talisman original = result;
          result = new Talisman();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Talisman MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Talisman.Descriptor; }
      }
      
      public override Talisman DefaultInstanceForType {
        get { return global::world.data.Talisman.DefaultInstance; }
      }
      
      public override Talisman BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Talisman) {
          return MergeFrom((Talisman) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Talisman other) {
        if (other == global::world.data.Talisman.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTemplate) {
          Template = other.Template;
        }
        if (other.HasPrefix1) {
          Prefix1 = other.Prefix1;
        }
        if (other.HasPrefix2) {
          Prefix2 = other.Prefix2;
        }
        if (other.HasClass) {
          Class = other.Class;
        }
        if (other.HasBuyPrice) {
          BuyPrice = other.BuyPrice;
        }
        if (other.HasSellPrice) {
          SellPrice = other.SellPrice;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasCooldown) {
          Cooldown = other.Cooldown;
        }
        if (other.HasBindFlag) {
          BindFlag = other.BindFlag;
        }
        if (other.effects_.Count != 0) {
          result.effects_.Add(other.effects_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_talismanFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _talismanFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTemplate = input.ReadInt32(ref result.template_);
              break;
            }
            case 16: {
              result.hasPrefix1 = input.ReadInt32(ref result.prefix1_);
              break;
            }
            case 24: {
              result.hasPrefix2 = input.ReadInt32(ref result.prefix2_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.class_, out unknown)) {
                result.hasClass = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 40: {
              result.hasBuyPrice = input.ReadInt32(ref result.buyPrice_);
              break;
            }
            case 48: {
              result.hasSellPrice = input.ReadInt32(ref result.sellPrice_);
              break;
            }
            case 56: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 64: {
              result.hasCooldown = input.ReadInt32(ref result.cooldown_);
              break;
            }
            case 72: {
              result.hasBindFlag = input.ReadBool(ref result.bindFlag_);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.effects_, global::core.EffectValue.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTemplate {
        get { return result.hasTemplate; }
      }
      public int Template {
        get { return result.Template; }
        set { SetTemplate(value); }
      }
      public Builder SetTemplate(int value) {
        PrepareBuilder();
        result.hasTemplate = true;
        result.template_ = value;
        return this;
      }
      public Builder ClearTemplate() {
        PrepareBuilder();
        result.hasTemplate = false;
        result.template_ = 0;
        return this;
      }
      
      public bool HasPrefix1 {
        get { return result.hasPrefix1; }
      }
      public int Prefix1 {
        get { return result.Prefix1; }
        set { SetPrefix1(value); }
      }
      public Builder SetPrefix1(int value) {
        PrepareBuilder();
        result.hasPrefix1 = true;
        result.prefix1_ = value;
        return this;
      }
      public Builder ClearPrefix1() {
        PrepareBuilder();
        result.hasPrefix1 = false;
        result.prefix1_ = 0;
        return this;
      }
      
      public bool HasPrefix2 {
        get { return result.hasPrefix2; }
      }
      public int Prefix2 {
        get { return result.Prefix2; }
        set { SetPrefix2(value); }
      }
      public Builder SetPrefix2(int value) {
        PrepareBuilder();
        result.hasPrefix2 = true;
        result.prefix2_ = value;
        return this;
      }
      public Builder ClearPrefix2() {
        PrepareBuilder();
        result.hasPrefix2 = false;
        result.prefix2_ = 0;
        return this;
      }
      
      public bool HasClass {
       get { return result.hasClass; }
      }
      public global::world.Interface.Item.Types.ClassType Class {
        get { return result.Class; }
        set { SetClass(value); }
      }
      public Builder SetClass(global::world.Interface.Item.Types.ClassType value) {
        PrepareBuilder();
        result.hasClass = true;
        result.class_ = value;
        return this;
      }
      public Builder ClearClass() {
        PrepareBuilder();
        result.hasClass = false;
        result.class_ = global::world.Interface.Item.Types.ClassType.PuTong;
        return this;
      }
      
      public bool HasBuyPrice {
        get { return result.hasBuyPrice; }
      }
      public int BuyPrice {
        get { return result.BuyPrice; }
        set { SetBuyPrice(value); }
      }
      public Builder SetBuyPrice(int value) {
        PrepareBuilder();
        result.hasBuyPrice = true;
        result.buyPrice_ = value;
        return this;
      }
      public Builder ClearBuyPrice() {
        PrepareBuilder();
        result.hasBuyPrice = false;
        result.buyPrice_ = 0;
        return this;
      }
      
      public bool HasSellPrice {
        get { return result.hasSellPrice; }
      }
      public int SellPrice {
        get { return result.SellPrice; }
        set { SetSellPrice(value); }
      }
      public Builder SetSellPrice(int value) {
        PrepareBuilder();
        result.hasSellPrice = true;
        result.sellPrice_ = value;
        return this;
      }
      public Builder ClearSellPrice() {
        PrepareBuilder();
        result.hasSellPrice = false;
        result.sellPrice_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasCooldown {
        get { return result.hasCooldown; }
      }
      public int Cooldown {
        get { return result.Cooldown; }
        set { SetCooldown(value); }
      }
      public Builder SetCooldown(int value) {
        PrepareBuilder();
        result.hasCooldown = true;
        result.cooldown_ = value;
        return this;
      }
      public Builder ClearCooldown() {
        PrepareBuilder();
        result.hasCooldown = false;
        result.cooldown_ = 0;
        return this;
      }
      
      public bool HasBindFlag {
        get { return result.hasBindFlag; }
      }
      public bool BindFlag {
        get { return result.BindFlag; }
        set { SetBindFlag(value); }
      }
      public Builder SetBindFlag(bool value) {
        PrepareBuilder();
        result.hasBindFlag = true;
        result.bindFlag_ = value;
        return this;
      }
      public Builder ClearBindFlag() {
        PrepareBuilder();
        result.hasBindFlag = false;
        result.bindFlag_ = false;
        return this;
      }
      
      public pbc::IPopsicleList<global::core.EffectValue> EffectsList {
        get { return PrepareBuilder().effects_; }
      }
      public int EffectsCount {
        get { return result.EffectsCount; }
      }
      public global::core.EffectValue GetEffects(int index) {
        return result.GetEffects(index);
      }
      public Builder SetEffects(int index, global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_[index] = value;
        return this;
      }
      public Builder SetEffects(int index, global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEffects(global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_.Add(value);
        return this;
      }
      public Builder AddEffects(global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEffects(scg::IEnumerable<global::core.EffectValue> values) {
        PrepareBuilder();
        result.effects_.Add(values);
        return this;
      }
      public Builder ClearEffects() {
        PrepareBuilder();
        result.effects_.Clear();
        return this;
      }
    }
    static Talisman() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class User : pb::GeneratedMessage<User, User.Builder> {
    private User() { }
    private static readonly User defaultInstance = new User().MakeReadOnly();
    private static readonly string[] _userFieldNames = new string[] { "RMB", "gm_invisible", "gm_level", "gm_unbreakable", "wallow" };
    private static readonly uint[] _userFieldTags = new uint[] { 8, 32, 24, 40, 16 };
    public static User DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override User DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override User ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_User__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<User, User.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_User__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Wallow {
        wallowstate_0 = 0,
        wallowstate_1 = 1,
        wallowstate_2 = 2,
      }
      
    }
    #endregion
    
    public const int RMBFieldNumber = 1;
    private bool hasRMB;
    private int rMB_;
    public bool HasRMB {
      get { return hasRMB; }
    }
    public int RMB {
      get { return rMB_; }
    }
    
    public const int WallowFieldNumber = 2;
    private bool hasWallow;
    private global::world.data.User.Types.Wallow wallow_ = global::world.data.User.Types.Wallow.wallowstate_0;
    public bool HasWallow {
      get { return hasWallow; }
    }
    public global::world.data.User.Types.Wallow Wallow {
      get { return wallow_; }
    }
    
    public const int GmLevelFieldNumber = 3;
    private bool hasGmLevel;
    private int gmLevel_;
    public bool HasGmLevel {
      get { return hasGmLevel; }
    }
    public int GmLevel {
      get { return gmLevel_; }
    }
    
    public const int GmInvisibleFieldNumber = 4;
    private bool hasGmInvisible;
    private bool gmInvisible_;
    public bool HasGmInvisible {
      get { return hasGmInvisible; }
    }
    public bool GmInvisible {
      get { return gmInvisible_; }
    }
    
    public const int GmUnbreakableFieldNumber = 5;
    private bool hasGmUnbreakable;
    private bool gmUnbreakable_;
    public bool HasGmUnbreakable {
      get { return hasGmUnbreakable; }
    }
    public bool GmUnbreakable {
      get { return gmUnbreakable_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRMB) return false;
        if (!hasWallow) return false;
        if (!hasGmLevel) return false;
        if (!hasGmInvisible) return false;
        if (!hasGmUnbreakable) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _userFieldNames;
      if (hasRMB) {
        output.WriteInt32(1, field_names[0], RMB);
      }
      if (hasWallow) {
        output.WriteEnum(2, field_names[4], (int) Wallow, Wallow);
      }
      if (hasGmLevel) {
        output.WriteInt32(3, field_names[2], GmLevel);
      }
      if (hasGmInvisible) {
        output.WriteBool(4, field_names[1], GmInvisible);
      }
      if (hasGmUnbreakable) {
        output.WriteBool(5, field_names[3], GmUnbreakable);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRMB) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, RMB);
        }
        if (hasWallow) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Wallow);
        }
        if (hasGmLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, GmLevel);
        }
        if (hasGmInvisible) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, GmInvisible);
        }
        if (hasGmUnbreakable) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, GmUnbreakable);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static User ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static User ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static User ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static User ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static User ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static User ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static User ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static User ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static User ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static User ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private User MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(User prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<User, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(User cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private User result;
      
      private User PrepareBuilder() {
        if (resultIsReadOnly) {
          User original = result;
          result = new User();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override User MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.User.Descriptor; }
      }
      
      public override User DefaultInstanceForType {
        get { return global::world.data.User.DefaultInstance; }
      }
      
      public override User BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is User) {
          return MergeFrom((User) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(User other) {
        if (other == global::world.data.User.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRMB) {
          RMB = other.RMB;
        }
        if (other.HasWallow) {
          Wallow = other.Wallow;
        }
        if (other.HasGmLevel) {
          GmLevel = other.GmLevel;
        }
        if (other.HasGmInvisible) {
          GmInvisible = other.GmInvisible;
        }
        if (other.HasGmUnbreakable) {
          GmUnbreakable = other.GmUnbreakable;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_userFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _userFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRMB = input.ReadInt32(ref result.rMB_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.wallow_, out unknown)) {
                result.hasWallow = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              result.hasGmLevel = input.ReadInt32(ref result.gmLevel_);
              break;
            }
            case 32: {
              result.hasGmInvisible = input.ReadBool(ref result.gmInvisible_);
              break;
            }
            case 40: {
              result.hasGmUnbreakable = input.ReadBool(ref result.gmUnbreakable_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRMB {
        get { return result.hasRMB; }
      }
      public int RMB {
        get { return result.RMB; }
        set { SetRMB(value); }
      }
      public Builder SetRMB(int value) {
        PrepareBuilder();
        result.hasRMB = true;
        result.rMB_ = value;
        return this;
      }
      public Builder ClearRMB() {
        PrepareBuilder();
        result.hasRMB = false;
        result.rMB_ = 0;
        return this;
      }
      
      public bool HasWallow {
       get { return result.hasWallow; }
      }
      public global::world.data.User.Types.Wallow Wallow {
        get { return result.Wallow; }
        set { SetWallow(value); }
      }
      public Builder SetWallow(global::world.data.User.Types.Wallow value) {
        PrepareBuilder();
        result.hasWallow = true;
        result.wallow_ = value;
        return this;
      }
      public Builder ClearWallow() {
        PrepareBuilder();
        result.hasWallow = false;
        result.wallow_ = global::world.data.User.Types.Wallow.wallowstate_0;
        return this;
      }
      
      public bool HasGmLevel {
        get { return result.hasGmLevel; }
      }
      public int GmLevel {
        get { return result.GmLevel; }
        set { SetGmLevel(value); }
      }
      public Builder SetGmLevel(int value) {
        PrepareBuilder();
        result.hasGmLevel = true;
        result.gmLevel_ = value;
        return this;
      }
      public Builder ClearGmLevel() {
        PrepareBuilder();
        result.hasGmLevel = false;
        result.gmLevel_ = 0;
        return this;
      }
      
      public bool HasGmInvisible {
        get { return result.hasGmInvisible; }
      }
      public bool GmInvisible {
        get { return result.GmInvisible; }
        set { SetGmInvisible(value); }
      }
      public Builder SetGmInvisible(bool value) {
        PrepareBuilder();
        result.hasGmInvisible = true;
        result.gmInvisible_ = value;
        return this;
      }
      public Builder ClearGmInvisible() {
        PrepareBuilder();
        result.hasGmInvisible = false;
        result.gmInvisible_ = false;
        return this;
      }
      
      public bool HasGmUnbreakable {
        get { return result.hasGmUnbreakable; }
      }
      public bool GmUnbreakable {
        get { return result.GmUnbreakable; }
        set { SetGmUnbreakable(value); }
      }
      public Builder SetGmUnbreakable(bool value) {
        PrepareBuilder();
        result.hasGmUnbreakable = true;
        result.gmUnbreakable_ = value;
        return this;
      }
      public Builder ClearGmUnbreakable() {
        PrepareBuilder();
        result.hasGmUnbreakable = false;
        result.gmUnbreakable_ = false;
        return this;
      }
    }
    static User() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Player : pb::GeneratedMessage<Player, Player.Builder> {
    private Player() { }
    private static readonly Player defaultInstance = new Player().MakeReadOnly();
    private static readonly string[] _playerFieldNames = new string[] { "agi", "aixinzhi", "bag_num", "charactor", "con", "depot_num", "exp", "exp_factor", "gongde", "int", "job", "magicfind", "nickname", "nuplevelexp", "phy", "pk", "pk_mode", "sex", "slient", "soul", "str", "title", "unusepoint" };
    private static readonly uint[] _playerFieldTags = new uint[] { 24, 184, 120, 58, 40, 128, 80, 104, 176, 48, 64, 160, 10, 96, 32, 136, 144, 72, 168, 152, 16, 112, 88 };
    public static Player DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Player DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Player ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Player__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Player, Player.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Player__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Job {
        job_0 = 0,
        job_1 = 1,
        job_2 = 2,
        job_3 = 3,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum PKmode {
        PKmode_0 = 0,
        PKmode_1 = 1,
        PKmode_2 = 2,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Sex {
        Sex_male = 0,
        Sex_Female = 1,
      }
      
    }
    #endregion
    
    public const int NicknameFieldNumber = 1;
    private bool hasNickname;
    private string nickname_ = "";
    public bool HasNickname {
      get { return hasNickname; }
    }
    public string Nickname {
      get { return nickname_; }
    }
    
    public const int StrFieldNumber = 2;
    private bool hasStr;
    private int str_;
    public bool HasStr {
      get { return hasStr; }
    }
    public int Str {
      get { return str_; }
    }
    
    public const int AgiFieldNumber = 3;
    private bool hasAgi;
    private int agi_;
    public bool HasAgi {
      get { return hasAgi; }
    }
    public int Agi {
      get { return agi_; }
    }
    
    public const int PhyFieldNumber = 4;
    private bool hasPhy;
    private int phy_;
    public bool HasPhy {
      get { return hasPhy; }
    }
    public int Phy {
      get { return phy_; }
    }
    
    public const int ConFieldNumber = 5;
    private bool hasCon;
    private int con_;
    public bool HasCon {
      get { return hasCon; }
    }
    public int Con {
      get { return con_; }
    }
    
    public const int IntFieldNumber = 6;
    private bool hasInt;
    private int int_;
    public bool HasInt {
      get { return hasInt; }
    }
    public int Int {
      get { return int_; }
    }
    
    public const int CharactorFieldNumber = 7;
    private bool hasCharactor;
    private global::world.Interface.Charactor charactor_;
    public bool HasCharactor {
      get { return hasCharactor; }
    }
    public global::world.Interface.Charactor Charactor {
      get { return charactor_ ?? global::world.Interface.Charactor.DefaultInstance; }
    }
    
    public const int JobFieldNumber = 8;
    private bool hasJob;
    private global::world.data.Player.Types.Job job_ = global::world.data.Player.Types.Job.job_0;
    public bool HasJob {
      get { return hasJob; }
    }
    public global::world.data.Player.Types.Job Job {
      get { return job_; }
    }
    
    public const int SexFieldNumber = 9;
    private bool hasSex;
    private global::world.data.Player.Types.Sex sex_ = global::world.data.Player.Types.Sex.Sex_male;
    public bool HasSex {
      get { return hasSex; }
    }
    public global::world.data.Player.Types.Sex Sex {
      get { return sex_; }
    }
    
    public const int ExpFieldNumber = 10;
    private bool hasExp;
    private int exp_;
    public bool HasExp {
      get { return hasExp; }
    }
    public int Exp {
      get { return exp_; }
    }
    
    public const int UnusepointFieldNumber = 11;
    private bool hasUnusepoint;
    private int unusepoint_;
    public bool HasUnusepoint {
      get { return hasUnusepoint; }
    }
    public int Unusepoint {
      get { return unusepoint_; }
    }
    
    public const int NuplevelexpFieldNumber = 12;
    private bool hasNuplevelexp;
    private int nuplevelexp_;
    public bool HasNuplevelexp {
      get { return hasNuplevelexp; }
    }
    public int Nuplevelexp {
      get { return nuplevelexp_; }
    }
    
    public const int ExpFactorFieldNumber = 13;
    private bool hasExpFactor;
    private int expFactor_;
    public bool HasExpFactor {
      get { return hasExpFactor; }
    }
    public int ExpFactor {
      get { return expFactor_; }
    }
    
    public const int TitleFieldNumber = 14;
    private bool hasTitle;
    private int title_;
    public bool HasTitle {
      get { return hasTitle; }
    }
    public int Title {
      get { return title_; }
    }
    
    public const int BagNumFieldNumber = 15;
    private bool hasBagNum;
    private int bagNum_;
    public bool HasBagNum {
      get { return hasBagNum; }
    }
    public int BagNum {
      get { return bagNum_; }
    }
    
    public const int DepotNumFieldNumber = 16;
    private bool hasDepotNum;
    private int depotNum_;
    public bool HasDepotNum {
      get { return hasDepotNum; }
    }
    public int DepotNum {
      get { return depotNum_; }
    }
    
    public const int PkFieldNumber = 17;
    private bool hasPk;
    private int pk_;
    public bool HasPk {
      get { return hasPk; }
    }
    public int Pk {
      get { return pk_; }
    }
    
    public const int PkModeFieldNumber = 18;
    private bool hasPkMode;
    private global::world.data.Player.Types.PKmode pkMode_ = global::world.data.Player.Types.PKmode.PKmode_0;
    public bool HasPkMode {
      get { return hasPkMode; }
    }
    public global::world.data.Player.Types.PKmode PkMode {
      get { return pkMode_; }
    }
    
    public const int SoulFieldNumber = 19;
    private bool hasSoul;
    private int soul_;
    public bool HasSoul {
      get { return hasSoul; }
    }
    public int Soul {
      get { return soul_; }
    }
    
    public const int MagicfindFieldNumber = 20;
    private bool hasMagicfind;
    private int magicfind_;
    public bool HasMagicfind {
      get { return hasMagicfind; }
    }
    public int Magicfind {
      get { return magicfind_; }
    }
    
    public const int SlientFieldNumber = 21;
    private bool hasSlient;
    private int slient_;
    public bool HasSlient {
      get { return hasSlient; }
    }
    public int Slient {
      get { return slient_; }
    }
    
    public const int GongdeFieldNumber = 22;
    private bool hasGongde;
    private int gongde_;
    public bool HasGongde {
      get { return hasGongde; }
    }
    public int Gongde {
      get { return gongde_; }
    }
    
    public const int AixinzhiFieldNumber = 23;
    private bool hasAixinzhi;
    private int aixinzhi_;
    public bool HasAixinzhi {
      get { return hasAixinzhi; }
    }
    public int Aixinzhi {
      get { return aixinzhi_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNickname) return false;
        if (!hasStr) return false;
        if (!hasAgi) return false;
        if (!hasPhy) return false;
        if (!hasCon) return false;
        if (!hasInt) return false;
        if (!hasCharactor) return false;
        if (!hasJob) return false;
        if (!hasSex) return false;
        if (!hasExp) return false;
        if (!hasUnusepoint) return false;
        if (!hasNuplevelexp) return false;
        if (!hasExpFactor) return false;
        if (!hasTitle) return false;
        if (!hasBagNum) return false;
        if (!hasDepotNum) return false;
        if (!hasPk) return false;
        if (!hasPkMode) return false;
        if (!hasSoul) return false;
        if (!hasMagicfind) return false;
        if (!hasSlient) return false;
        if (!hasGongde) return false;
        if (!hasAixinzhi) return false;
        if (!Charactor.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _playerFieldNames;
      if (hasNickname) {
        output.WriteString(1, field_names[12], Nickname);
      }
      if (hasStr) {
        output.WriteInt32(2, field_names[20], Str);
      }
      if (hasAgi) {
        output.WriteInt32(3, field_names[0], Agi);
      }
      if (hasPhy) {
        output.WriteInt32(4, field_names[14], Phy);
      }
      if (hasCon) {
        output.WriteInt32(5, field_names[4], Con);
      }
      if (hasInt) {
        output.WriteInt32(6, field_names[9], Int);
      }
      if (hasCharactor) {
        output.WriteMessage(7, field_names[3], Charactor);
      }
      if (hasJob) {
        output.WriteEnum(8, field_names[10], (int) Job, Job);
      }
      if (hasSex) {
        output.WriteEnum(9, field_names[17], (int) Sex, Sex);
      }
      if (hasExp) {
        output.WriteInt32(10, field_names[6], Exp);
      }
      if (hasUnusepoint) {
        output.WriteInt32(11, field_names[22], Unusepoint);
      }
      if (hasNuplevelexp) {
        output.WriteInt32(12, field_names[13], Nuplevelexp);
      }
      if (hasExpFactor) {
        output.WriteInt32(13, field_names[7], ExpFactor);
      }
      if (hasTitle) {
        output.WriteInt32(14, field_names[21], Title);
      }
      if (hasBagNum) {
        output.WriteInt32(15, field_names[2], BagNum);
      }
      if (hasDepotNum) {
        output.WriteInt32(16, field_names[5], DepotNum);
      }
      if (hasPk) {
        output.WriteInt32(17, field_names[15], Pk);
      }
      if (hasPkMode) {
        output.WriteEnum(18, field_names[16], (int) PkMode, PkMode);
      }
      if (hasSoul) {
        output.WriteInt32(19, field_names[19], Soul);
      }
      if (hasMagicfind) {
        output.WriteInt32(20, field_names[11], Magicfind);
      }
      if (hasSlient) {
        output.WriteInt32(21, field_names[18], Slient);
      }
      if (hasGongde) {
        output.WriteInt32(22, field_names[8], Gongde);
      }
      if (hasAixinzhi) {
        output.WriteInt32(23, field_names[1], Aixinzhi);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasNickname) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Nickname);
        }
        if (hasStr) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Str);
        }
        if (hasAgi) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Agi);
        }
        if (hasPhy) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Phy);
        }
        if (hasCon) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Con);
        }
        if (hasInt) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Int);
        }
        if (hasCharactor) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, Charactor);
        }
        if (hasJob) {
          size += pb::CodedOutputStream.ComputeEnumSize(8, (int) Job);
        }
        if (hasSex) {
          size += pb::CodedOutputStream.ComputeEnumSize(9, (int) Sex);
        }
        if (hasExp) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, Exp);
        }
        if (hasUnusepoint) {
          size += pb::CodedOutputStream.ComputeInt32Size(11, Unusepoint);
        }
        if (hasNuplevelexp) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, Nuplevelexp);
        }
        if (hasExpFactor) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, ExpFactor);
        }
        if (hasTitle) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, Title);
        }
        if (hasBagNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, BagNum);
        }
        if (hasDepotNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, DepotNum);
        }
        if (hasPk) {
          size += pb::CodedOutputStream.ComputeInt32Size(17, Pk);
        }
        if (hasPkMode) {
          size += pb::CodedOutputStream.ComputeEnumSize(18, (int) PkMode);
        }
        if (hasSoul) {
          size += pb::CodedOutputStream.ComputeInt32Size(19, Soul);
        }
        if (hasMagicfind) {
          size += pb::CodedOutputStream.ComputeInt32Size(20, Magicfind);
        }
        if (hasSlient) {
          size += pb::CodedOutputStream.ComputeInt32Size(21, Slient);
        }
        if (hasGongde) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, Gongde);
        }
        if (hasAixinzhi) {
          size += pb::CodedOutputStream.ComputeInt32Size(23, Aixinzhi);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Player ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Player ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Player ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Player ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Player ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Player ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Player ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Player ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Player ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Player ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Player MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Player prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Player, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Player cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Player result;
      
      private Player PrepareBuilder() {
        if (resultIsReadOnly) {
          Player original = result;
          result = new Player();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Player MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Player.Descriptor; }
      }
      
      public override Player DefaultInstanceForType {
        get { return global::world.data.Player.DefaultInstance; }
      }
      
      public override Player BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Player) {
          return MergeFrom((Player) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Player other) {
        if (other == global::world.data.Player.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasNickname) {
          Nickname = other.Nickname;
        }
        if (other.HasStr) {
          Str = other.Str;
        }
        if (other.HasAgi) {
          Agi = other.Agi;
        }
        if (other.HasPhy) {
          Phy = other.Phy;
        }
        if (other.HasCon) {
          Con = other.Con;
        }
        if (other.HasInt) {
          Int = other.Int;
        }
        if (other.HasCharactor) {
          MergeCharactor(other.Charactor);
        }
        if (other.HasJob) {
          Job = other.Job;
        }
        if (other.HasSex) {
          Sex = other.Sex;
        }
        if (other.HasExp) {
          Exp = other.Exp;
        }
        if (other.HasUnusepoint) {
          Unusepoint = other.Unusepoint;
        }
        if (other.HasNuplevelexp) {
          Nuplevelexp = other.Nuplevelexp;
        }
        if (other.HasExpFactor) {
          ExpFactor = other.ExpFactor;
        }
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasBagNum) {
          BagNum = other.BagNum;
        }
        if (other.HasDepotNum) {
          DepotNum = other.DepotNum;
        }
        if (other.HasPk) {
          Pk = other.Pk;
        }
        if (other.HasPkMode) {
          PkMode = other.PkMode;
        }
        if (other.HasSoul) {
          Soul = other.Soul;
        }
        if (other.HasMagicfind) {
          Magicfind = other.Magicfind;
        }
        if (other.HasSlient) {
          Slient = other.Slient;
        }
        if (other.HasGongde) {
          Gongde = other.Gongde;
        }
        if (other.HasAixinzhi) {
          Aixinzhi = other.Aixinzhi;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_playerFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _playerFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasNickname = input.ReadString(ref result.nickname_);
              break;
            }
            case 16: {
              result.hasStr = input.ReadInt32(ref result.str_);
              break;
            }
            case 24: {
              result.hasAgi = input.ReadInt32(ref result.agi_);
              break;
            }
            case 32: {
              result.hasPhy = input.ReadInt32(ref result.phy_);
              break;
            }
            case 40: {
              result.hasCon = input.ReadInt32(ref result.con_);
              break;
            }
            case 48: {
              result.hasInt = input.ReadInt32(ref result.int_);
              break;
            }
            case 58: {
              global::world.Interface.Charactor.Builder subBuilder = global::world.Interface.Charactor.CreateBuilder();
              if (result.hasCharactor) {
                subBuilder.MergeFrom(Charactor);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Charactor = subBuilder.BuildPartial();
              break;
            }
            case 64: {
              object unknown;
              if(input.ReadEnum(ref result.job_, out unknown)) {
                result.hasJob = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(8, (ulong)(int)unknown);
              }
              break;
            }
            case 72: {
              object unknown;
              if(input.ReadEnum(ref result.sex_, out unknown)) {
                result.hasSex = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(9, (ulong)(int)unknown);
              }
              break;
            }
            case 80: {
              result.hasExp = input.ReadInt32(ref result.exp_);
              break;
            }
            case 88: {
              result.hasUnusepoint = input.ReadInt32(ref result.unusepoint_);
              break;
            }
            case 96: {
              result.hasNuplevelexp = input.ReadInt32(ref result.nuplevelexp_);
              break;
            }
            case 104: {
              result.hasExpFactor = input.ReadInt32(ref result.expFactor_);
              break;
            }
            case 112: {
              result.hasTitle = input.ReadInt32(ref result.title_);
              break;
            }
            case 120: {
              result.hasBagNum = input.ReadInt32(ref result.bagNum_);
              break;
            }
            case 128: {
              result.hasDepotNum = input.ReadInt32(ref result.depotNum_);
              break;
            }
            case 136: {
              result.hasPk = input.ReadInt32(ref result.pk_);
              break;
            }
            case 144: {
              object unknown;
              if(input.ReadEnum(ref result.pkMode_, out unknown)) {
                result.hasPkMode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(18, (ulong)(int)unknown);
              }
              break;
            }
            case 152: {
              result.hasSoul = input.ReadInt32(ref result.soul_);
              break;
            }
            case 160: {
              result.hasMagicfind = input.ReadInt32(ref result.magicfind_);
              break;
            }
            case 168: {
              result.hasSlient = input.ReadInt32(ref result.slient_);
              break;
            }
            case 176: {
              result.hasGongde = input.ReadInt32(ref result.gongde_);
              break;
            }
            case 184: {
              result.hasAixinzhi = input.ReadInt32(ref result.aixinzhi_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasNickname {
        get { return result.hasNickname; }
      }
      public string Nickname {
        get { return result.Nickname; }
        set { SetNickname(value); }
      }
      public Builder SetNickname(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNickname = true;
        result.nickname_ = value;
        return this;
      }
      public Builder ClearNickname() {
        PrepareBuilder();
        result.hasNickname = false;
        result.nickname_ = "";
        return this;
      }
      
      public bool HasStr {
        get { return result.hasStr; }
      }
      public int Str {
        get { return result.Str; }
        set { SetStr(value); }
      }
      public Builder SetStr(int value) {
        PrepareBuilder();
        result.hasStr = true;
        result.str_ = value;
        return this;
      }
      public Builder ClearStr() {
        PrepareBuilder();
        result.hasStr = false;
        result.str_ = 0;
        return this;
      }
      
      public bool HasAgi {
        get { return result.hasAgi; }
      }
      public int Agi {
        get { return result.Agi; }
        set { SetAgi(value); }
      }
      public Builder SetAgi(int value) {
        PrepareBuilder();
        result.hasAgi = true;
        result.agi_ = value;
        return this;
      }
      public Builder ClearAgi() {
        PrepareBuilder();
        result.hasAgi = false;
        result.agi_ = 0;
        return this;
      }
      
      public bool HasPhy {
        get { return result.hasPhy; }
      }
      public int Phy {
        get { return result.Phy; }
        set { SetPhy(value); }
      }
      public Builder SetPhy(int value) {
        PrepareBuilder();
        result.hasPhy = true;
        result.phy_ = value;
        return this;
      }
      public Builder ClearPhy() {
        PrepareBuilder();
        result.hasPhy = false;
        result.phy_ = 0;
        return this;
      }
      
      public bool HasCon {
        get { return result.hasCon; }
      }
      public int Con {
        get { return result.Con; }
        set { SetCon(value); }
      }
      public Builder SetCon(int value) {
        PrepareBuilder();
        result.hasCon = true;
        result.con_ = value;
        return this;
      }
      public Builder ClearCon() {
        PrepareBuilder();
        result.hasCon = false;
        result.con_ = 0;
        return this;
      }
      
      public bool HasInt {
        get { return result.hasInt; }
      }
      public int Int {
        get { return result.Int; }
        set { SetInt(value); }
      }
      public Builder SetInt(int value) {
        PrepareBuilder();
        result.hasInt = true;
        result.int_ = value;
        return this;
      }
      public Builder ClearInt() {
        PrepareBuilder();
        result.hasInt = false;
        result.int_ = 0;
        return this;
      }
      
      public bool HasCharactor {
       get { return result.hasCharactor; }
      }
      public global::world.Interface.Charactor Charactor {
        get { return result.Charactor; }
        set { SetCharactor(value); }
      }
      public Builder SetCharactor(global::world.Interface.Charactor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCharactor = true;
        result.charactor_ = value;
        return this;
      }
      public Builder SetCharactor(global::world.Interface.Charactor.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCharactor = true;
        result.charactor_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCharactor(global::world.Interface.Charactor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCharactor &&
            result.charactor_ != global::world.Interface.Charactor.DefaultInstance) {
            result.charactor_ = global::world.Interface.Charactor.CreateBuilder(result.charactor_).MergeFrom(value).BuildPartial();
        } else {
          result.charactor_ = value;
        }
        result.hasCharactor = true;
        return this;
      }
      public Builder ClearCharactor() {
        PrepareBuilder();
        result.hasCharactor = false;
        result.charactor_ = null;
        return this;
      }
      
      public bool HasJob {
       get { return result.hasJob; }
      }
      public global::world.data.Player.Types.Job Job {
        get { return result.Job; }
        set { SetJob(value); }
      }
      public Builder SetJob(global::world.data.Player.Types.Job value) {
        PrepareBuilder();
        result.hasJob = true;
        result.job_ = value;
        return this;
      }
      public Builder ClearJob() {
        PrepareBuilder();
        result.hasJob = false;
        result.job_ = global::world.data.Player.Types.Job.job_0;
        return this;
      }
      
      public bool HasSex {
       get { return result.hasSex; }
      }
      public global::world.data.Player.Types.Sex Sex {
        get { return result.Sex; }
        set { SetSex(value); }
      }
      public Builder SetSex(global::world.data.Player.Types.Sex value) {
        PrepareBuilder();
        result.hasSex = true;
        result.sex_ = value;
        return this;
      }
      public Builder ClearSex() {
        PrepareBuilder();
        result.hasSex = false;
        result.sex_ = global::world.data.Player.Types.Sex.Sex_male;
        return this;
      }
      
      public bool HasExp {
        get { return result.hasExp; }
      }
      public int Exp {
        get { return result.Exp; }
        set { SetExp(value); }
      }
      public Builder SetExp(int value) {
        PrepareBuilder();
        result.hasExp = true;
        result.exp_ = value;
        return this;
      }
      public Builder ClearExp() {
        PrepareBuilder();
        result.hasExp = false;
        result.exp_ = 0;
        return this;
      }
      
      public bool HasUnusepoint {
        get { return result.hasUnusepoint; }
      }
      public int Unusepoint {
        get { return result.Unusepoint; }
        set { SetUnusepoint(value); }
      }
      public Builder SetUnusepoint(int value) {
        PrepareBuilder();
        result.hasUnusepoint = true;
        result.unusepoint_ = value;
        return this;
      }
      public Builder ClearUnusepoint() {
        PrepareBuilder();
        result.hasUnusepoint = false;
        result.unusepoint_ = 0;
        return this;
      }
      
      public bool HasNuplevelexp {
        get { return result.hasNuplevelexp; }
      }
      public int Nuplevelexp {
        get { return result.Nuplevelexp; }
        set { SetNuplevelexp(value); }
      }
      public Builder SetNuplevelexp(int value) {
        PrepareBuilder();
        result.hasNuplevelexp = true;
        result.nuplevelexp_ = value;
        return this;
      }
      public Builder ClearNuplevelexp() {
        PrepareBuilder();
        result.hasNuplevelexp = false;
        result.nuplevelexp_ = 0;
        return this;
      }
      
      public bool HasExpFactor {
        get { return result.hasExpFactor; }
      }
      public int ExpFactor {
        get { return result.ExpFactor; }
        set { SetExpFactor(value); }
      }
      public Builder SetExpFactor(int value) {
        PrepareBuilder();
        result.hasExpFactor = true;
        result.expFactor_ = value;
        return this;
      }
      public Builder ClearExpFactor() {
        PrepareBuilder();
        result.hasExpFactor = false;
        result.expFactor_ = 0;
        return this;
      }
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public int Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(int value) {
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = 0;
        return this;
      }
      
      public bool HasBagNum {
        get { return result.hasBagNum; }
      }
      public int BagNum {
        get { return result.BagNum; }
        set { SetBagNum(value); }
      }
      public Builder SetBagNum(int value) {
        PrepareBuilder();
        result.hasBagNum = true;
        result.bagNum_ = value;
        return this;
      }
      public Builder ClearBagNum() {
        PrepareBuilder();
        result.hasBagNum = false;
        result.bagNum_ = 0;
        return this;
      }
      
      public bool HasDepotNum {
        get { return result.hasDepotNum; }
      }
      public int DepotNum {
        get { return result.DepotNum; }
        set { SetDepotNum(value); }
      }
      public Builder SetDepotNum(int value) {
        PrepareBuilder();
        result.hasDepotNum = true;
        result.depotNum_ = value;
        return this;
      }
      public Builder ClearDepotNum() {
        PrepareBuilder();
        result.hasDepotNum = false;
        result.depotNum_ = 0;
        return this;
      }
      
      public bool HasPk {
        get { return result.hasPk; }
      }
      public int Pk {
        get { return result.Pk; }
        set { SetPk(value); }
      }
      public Builder SetPk(int value) {
        PrepareBuilder();
        result.hasPk = true;
        result.pk_ = value;
        return this;
      }
      public Builder ClearPk() {
        PrepareBuilder();
        result.hasPk = false;
        result.pk_ = 0;
        return this;
      }
      
      public bool HasPkMode {
       get { return result.hasPkMode; }
      }
      public global::world.data.Player.Types.PKmode PkMode {
        get { return result.PkMode; }
        set { SetPkMode(value); }
      }
      public Builder SetPkMode(global::world.data.Player.Types.PKmode value) {
        PrepareBuilder();
        result.hasPkMode = true;
        result.pkMode_ = value;
        return this;
      }
      public Builder ClearPkMode() {
        PrepareBuilder();
        result.hasPkMode = false;
        result.pkMode_ = global::world.data.Player.Types.PKmode.PKmode_0;
        return this;
      }
      
      public bool HasSoul {
        get { return result.hasSoul; }
      }
      public int Soul {
        get { return result.Soul; }
        set { SetSoul(value); }
      }
      public Builder SetSoul(int value) {
        PrepareBuilder();
        result.hasSoul = true;
        result.soul_ = value;
        return this;
      }
      public Builder ClearSoul() {
        PrepareBuilder();
        result.hasSoul = false;
        result.soul_ = 0;
        return this;
      }
      
      public bool HasMagicfind {
        get { return result.hasMagicfind; }
      }
      public int Magicfind {
        get { return result.Magicfind; }
        set { SetMagicfind(value); }
      }
      public Builder SetMagicfind(int value) {
        PrepareBuilder();
        result.hasMagicfind = true;
        result.magicfind_ = value;
        return this;
      }
      public Builder ClearMagicfind() {
        PrepareBuilder();
        result.hasMagicfind = false;
        result.magicfind_ = 0;
        return this;
      }
      
      public bool HasSlient {
        get { return result.hasSlient; }
      }
      public int Slient {
        get { return result.Slient; }
        set { SetSlient(value); }
      }
      public Builder SetSlient(int value) {
        PrepareBuilder();
        result.hasSlient = true;
        result.slient_ = value;
        return this;
      }
      public Builder ClearSlient() {
        PrepareBuilder();
        result.hasSlient = false;
        result.slient_ = 0;
        return this;
      }
      
      public bool HasGongde {
        get { return result.hasGongde; }
      }
      public int Gongde {
        get { return result.Gongde; }
        set { SetGongde(value); }
      }
      public Builder SetGongde(int value) {
        PrepareBuilder();
        result.hasGongde = true;
        result.gongde_ = value;
        return this;
      }
      public Builder ClearGongde() {
        PrepareBuilder();
        result.hasGongde = false;
        result.gongde_ = 0;
        return this;
      }
      
      public bool HasAixinzhi {
        get { return result.hasAixinzhi; }
      }
      public int Aixinzhi {
        get { return result.Aixinzhi; }
        set { SetAixinzhi(value); }
      }
      public Builder SetAixinzhi(int value) {
        PrepareBuilder();
        result.hasAixinzhi = true;
        result.aixinzhi_ = value;
        return this;
      }
      public Builder ClearAixinzhi() {
        PrepareBuilder();
        result.hasAixinzhi = false;
        result.aixinzhi_ = 0;
        return this;
      }
    }
    static Player() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Buff : pb::GeneratedMessage<Buff, Buff.Builder> {
    private Buff() { }
    private static readonly Buff defaultInstance = new Buff().MakeReadOnly();
    private static readonly string[] _buffFieldNames = new string[] { "BufferIndex", "BufferValue", "Factor", "RelationID", "RemainTime", "SkillID" };
    private static readonly uint[] _buffFieldTags = new uint[] { 24, 40, 32, 8, 48, 16 };
    public static Buff DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Buff DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Buff ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Buff__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Buff, Buff.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Buff__FieldAccessorTable; }
    }
    
    public const int RelationIDFieldNumber = 1;
    private bool hasRelationID;
    private int relationID_;
    public bool HasRelationID {
      get { return hasRelationID; }
    }
    public int RelationID {
      get { return relationID_; }
    }
    
    public const int SkillIDFieldNumber = 2;
    private bool hasSkillID;
    private int skillID_;
    public bool HasSkillID {
      get { return hasSkillID; }
    }
    public int SkillID {
      get { return skillID_; }
    }
    
    public const int BufferIndexFieldNumber = 3;
    private bool hasBufferIndex;
    private int bufferIndex_;
    public bool HasBufferIndex {
      get { return hasBufferIndex; }
    }
    public int BufferIndex {
      get { return bufferIndex_; }
    }
    
    public const int FactorFieldNumber = 4;
    private bool hasFactor;
    private int factor_;
    public bool HasFactor {
      get { return hasFactor; }
    }
    public int Factor {
      get { return factor_; }
    }
    
    public const int BufferValueFieldNumber = 5;
    private bool hasBufferValue;
    private int bufferValue_;
    public bool HasBufferValue {
      get { return hasBufferValue; }
    }
    public int BufferValue {
      get { return bufferValue_; }
    }
    
    public const int RemainTimeFieldNumber = 6;
    private bool hasRemainTime;
    private int remainTime_;
    public bool HasRemainTime {
      get { return hasRemainTime; }
    }
    public int RemainTime {
      get { return remainTime_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasRelationID) return false;
        if (!hasSkillID) return false;
        if (!hasBufferIndex) return false;
        if (!hasFactor) return false;
        if (!hasBufferValue) return false;
        if (!hasRemainTime) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _buffFieldNames;
      if (hasRelationID) {
        output.WriteInt32(1, field_names[3], RelationID);
      }
      if (hasSkillID) {
        output.WriteInt32(2, field_names[5], SkillID);
      }
      if (hasBufferIndex) {
        output.WriteInt32(3, field_names[0], BufferIndex);
      }
      if (hasFactor) {
        output.WriteInt32(4, field_names[2], Factor);
      }
      if (hasBufferValue) {
        output.WriteInt32(5, field_names[1], BufferValue);
      }
      if (hasRemainTime) {
        output.WriteInt32(6, field_names[4], RemainTime);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasRelationID) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, RelationID);
        }
        if (hasSkillID) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, SkillID);
        }
        if (hasBufferIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, BufferIndex);
        }
        if (hasFactor) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Factor);
        }
        if (hasBufferValue) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, BufferValue);
        }
        if (hasRemainTime) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, RemainTime);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Buff ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Buff ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Buff ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Buff ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Buff ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Buff ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Buff ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Buff ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Buff ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Buff ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Buff MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Buff prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Buff, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Buff cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Buff result;
      
      private Buff PrepareBuilder() {
        if (resultIsReadOnly) {
          Buff original = result;
          result = new Buff();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Buff MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Buff.Descriptor; }
      }
      
      public override Buff DefaultInstanceForType {
        get { return global::world.data.Buff.DefaultInstance; }
      }
      
      public override Buff BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Buff) {
          return MergeFrom((Buff) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Buff other) {
        if (other == global::world.data.Buff.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasRelationID) {
          RelationID = other.RelationID;
        }
        if (other.HasSkillID) {
          SkillID = other.SkillID;
        }
        if (other.HasBufferIndex) {
          BufferIndex = other.BufferIndex;
        }
        if (other.HasFactor) {
          Factor = other.Factor;
        }
        if (other.HasBufferValue) {
          BufferValue = other.BufferValue;
        }
        if (other.HasRemainTime) {
          RemainTime = other.RemainTime;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_buffFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _buffFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasRelationID = input.ReadInt32(ref result.relationID_);
              break;
            }
            case 16: {
              result.hasSkillID = input.ReadInt32(ref result.skillID_);
              break;
            }
            case 24: {
              result.hasBufferIndex = input.ReadInt32(ref result.bufferIndex_);
              break;
            }
            case 32: {
              result.hasFactor = input.ReadInt32(ref result.factor_);
              break;
            }
            case 40: {
              result.hasBufferValue = input.ReadInt32(ref result.bufferValue_);
              break;
            }
            case 48: {
              result.hasRemainTime = input.ReadInt32(ref result.remainTime_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasRelationID {
        get { return result.hasRelationID; }
      }
      public int RelationID {
        get { return result.RelationID; }
        set { SetRelationID(value); }
      }
      public Builder SetRelationID(int value) {
        PrepareBuilder();
        result.hasRelationID = true;
        result.relationID_ = value;
        return this;
      }
      public Builder ClearRelationID() {
        PrepareBuilder();
        result.hasRelationID = false;
        result.relationID_ = 0;
        return this;
      }
      
      public bool HasSkillID {
        get { return result.hasSkillID; }
      }
      public int SkillID {
        get { return result.SkillID; }
        set { SetSkillID(value); }
      }
      public Builder SetSkillID(int value) {
        PrepareBuilder();
        result.hasSkillID = true;
        result.skillID_ = value;
        return this;
      }
      public Builder ClearSkillID() {
        PrepareBuilder();
        result.hasSkillID = false;
        result.skillID_ = 0;
        return this;
      }
      
      public bool HasBufferIndex {
        get { return result.hasBufferIndex; }
      }
      public int BufferIndex {
        get { return result.BufferIndex; }
        set { SetBufferIndex(value); }
      }
      public Builder SetBufferIndex(int value) {
        PrepareBuilder();
        result.hasBufferIndex = true;
        result.bufferIndex_ = value;
        return this;
      }
      public Builder ClearBufferIndex() {
        PrepareBuilder();
        result.hasBufferIndex = false;
        result.bufferIndex_ = 0;
        return this;
      }
      
      public bool HasFactor {
        get { return result.hasFactor; }
      }
      public int Factor {
        get { return result.Factor; }
        set { SetFactor(value); }
      }
      public Builder SetFactor(int value) {
        PrepareBuilder();
        result.hasFactor = true;
        result.factor_ = value;
        return this;
      }
      public Builder ClearFactor() {
        PrepareBuilder();
        result.hasFactor = false;
        result.factor_ = 0;
        return this;
      }
      
      public bool HasBufferValue {
        get { return result.hasBufferValue; }
      }
      public int BufferValue {
        get { return result.BufferValue; }
        set { SetBufferValue(value); }
      }
      public Builder SetBufferValue(int value) {
        PrepareBuilder();
        result.hasBufferValue = true;
        result.bufferValue_ = value;
        return this;
      }
      public Builder ClearBufferValue() {
        PrepareBuilder();
        result.hasBufferValue = false;
        result.bufferValue_ = 0;
        return this;
      }
      
      public bool HasRemainTime {
        get { return result.hasRemainTime; }
      }
      public int RemainTime {
        get { return result.RemainTime; }
        set { SetRemainTime(value); }
      }
      public Builder SetRemainTime(int value) {
        PrepareBuilder();
        result.hasRemainTime = true;
        result.remainTime_ = value;
        return this;
      }
      public Builder ClearRemainTime() {
        PrepareBuilder();
        result.hasRemainTime = false;
        result.remainTime_ = 0;
        return this;
      }
    }
    static Buff() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Mail : pb::GeneratedMessage<Mail, Mail.Builder> {
    private Mail() { }
    private static readonly Mail defaultInstance = new Mail().MakeReadOnly();
    private static readonly string[] _mailFieldNames = new string[] { "Content", "Money", "ReadFlag", "SendFlag", "SendTime", "Sender", "Title", "Yuanbao", "attachment" };
    private static readonly uint[] _mailFieldTags = new uint[] { 26, 32, 56, 64, 48, 18, 10, 40, 74 };
    public static Mail DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Mail DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Mail ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Mail__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Mail, Mail.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Mail__FieldAccessorTable; }
    }
    
    public const int TitleFieldNumber = 1;
    private bool hasTitle;
    private string title_ = "";
    public bool HasTitle {
      get { return hasTitle; }
    }
    public string Title {
      get { return title_; }
    }
    
    public const int SenderFieldNumber = 2;
    private bool hasSender;
    private string sender_ = "";
    public bool HasSender {
      get { return hasSender; }
    }
    public string Sender {
      get { return sender_; }
    }
    
    public const int ContentFieldNumber = 3;
    private bool hasContent;
    private string content_ = "";
    public bool HasContent {
      get { return hasContent; }
    }
    public string Content {
      get { return content_; }
    }
    
    public const int MoneyFieldNumber = 4;
    private bool hasMoney;
    private int money_;
    public bool HasMoney {
      get { return hasMoney; }
    }
    public int Money {
      get { return money_; }
    }
    
    public const int YuanbaoFieldNumber = 5;
    private bool hasYuanbao;
    private int yuanbao_;
    public bool HasYuanbao {
      get { return hasYuanbao; }
    }
    public int Yuanbao {
      get { return yuanbao_; }
    }
    
    public const int SendTimeFieldNumber = 6;
    private bool hasSendTime;
    private ulong sendTime_;
    public bool HasSendTime {
      get { return hasSendTime; }
    }
    [global::System.CLSCompliant(false)]
    public ulong SendTime {
      get { return sendTime_; }
    }
    
    public const int ReadFlagFieldNumber = 7;
    private bool hasReadFlag;
    private int readFlag_;
    public bool HasReadFlag {
      get { return hasReadFlag; }
    }
    public int ReadFlag {
      get { return readFlag_; }
    }
    
    public const int SendFlagFieldNumber = 8;
    private bool hasSendFlag;
    private int sendFlag_;
    public bool HasSendFlag {
      get { return hasSendFlag; }
    }
    public int SendFlag {
      get { return sendFlag_; }
    }
    
    public const int AttachmentFieldNumber = 9;
    private pbc::PopsicleList<global::core.GUID> attachment_ = new pbc::PopsicleList<global::core.GUID>();
    public scg::IList<global::core.GUID> AttachmentList {
      get { return attachment_; }
    }
    public int AttachmentCount {
      get { return attachment_.Count; }
    }
    public global::core.GUID GetAttachment(int index) {
      return attachment_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTitle) return false;
        if (!hasSender) return false;
        if (!hasContent) return false;
        if (!hasMoney) return false;
        if (!hasYuanbao) return false;
        if (!hasSendTime) return false;
        if (!hasReadFlag) return false;
        if (!hasSendFlag) return false;
        foreach (global::core.GUID element in AttachmentList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mailFieldNames;
      if (hasTitle) {
        output.WriteString(1, field_names[6], Title);
      }
      if (hasSender) {
        output.WriteString(2, field_names[5], Sender);
      }
      if (hasContent) {
        output.WriteString(3, field_names[0], Content);
      }
      if (hasMoney) {
        output.WriteInt32(4, field_names[1], Money);
      }
      if (hasYuanbao) {
        output.WriteInt32(5, field_names[7], Yuanbao);
      }
      if (hasSendTime) {
        output.WriteUInt64(6, field_names[4], SendTime);
      }
      if (hasReadFlag) {
        output.WriteInt32(7, field_names[2], ReadFlag);
      }
      if (hasSendFlag) {
        output.WriteInt32(8, field_names[3], SendFlag);
      }
      if (attachment_.Count > 0) {
        output.WriteMessageArray(9, field_names[8], attachment_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTitle) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Title);
        }
        if (hasSender) {
          size += pb::CodedOutputStream.ComputeStringSize(2, Sender);
        }
        if (hasContent) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Content);
        }
        if (hasMoney) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Money);
        }
        if (hasYuanbao) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Yuanbao);
        }
        if (hasSendTime) {
          size += pb::CodedOutputStream.ComputeUInt64Size(6, SendTime);
        }
        if (hasReadFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, ReadFlag);
        }
        if (hasSendFlag) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, SendFlag);
        }
        foreach (global::core.GUID element in AttachmentList) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Mail ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Mail ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Mail ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Mail ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Mail ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Mail ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Mail ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Mail ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Mail ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Mail ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Mail MakeReadOnly() {
      attachment_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Mail prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Mail, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Mail cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Mail result;
      
      private Mail PrepareBuilder() {
        if (resultIsReadOnly) {
          Mail original = result;
          result = new Mail();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Mail MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Mail.Descriptor; }
      }
      
      public override Mail DefaultInstanceForType {
        get { return global::world.data.Mail.DefaultInstance; }
      }
      
      public override Mail BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Mail) {
          return MergeFrom((Mail) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Mail other) {
        if (other == global::world.data.Mail.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTitle) {
          Title = other.Title;
        }
        if (other.HasSender) {
          Sender = other.Sender;
        }
        if (other.HasContent) {
          Content = other.Content;
        }
        if (other.HasMoney) {
          Money = other.Money;
        }
        if (other.HasYuanbao) {
          Yuanbao = other.Yuanbao;
        }
        if (other.HasSendTime) {
          SendTime = other.SendTime;
        }
        if (other.HasReadFlag) {
          ReadFlag = other.ReadFlag;
        }
        if (other.HasSendFlag) {
          SendFlag = other.SendFlag;
        }
        if (other.attachment_.Count != 0) {
          result.attachment_.Add(other.attachment_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mailFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mailFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasTitle = input.ReadString(ref result.title_);
              break;
            }
            case 18: {
              result.hasSender = input.ReadString(ref result.sender_);
              break;
            }
            case 26: {
              result.hasContent = input.ReadString(ref result.content_);
              break;
            }
            case 32: {
              result.hasMoney = input.ReadInt32(ref result.money_);
              break;
            }
            case 40: {
              result.hasYuanbao = input.ReadInt32(ref result.yuanbao_);
              break;
            }
            case 48: {
              result.hasSendTime = input.ReadUInt64(ref result.sendTime_);
              break;
            }
            case 56: {
              result.hasReadFlag = input.ReadInt32(ref result.readFlag_);
              break;
            }
            case 64: {
              result.hasSendFlag = input.ReadInt32(ref result.sendFlag_);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.attachment_, global::core.GUID.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTitle {
        get { return result.hasTitle; }
      }
      public string Title {
        get { return result.Title; }
        set { SetTitle(value); }
      }
      public Builder SetTitle(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTitle = true;
        result.title_ = value;
        return this;
      }
      public Builder ClearTitle() {
        PrepareBuilder();
        result.hasTitle = false;
        result.title_ = "";
        return this;
      }
      
      public bool HasSender {
        get { return result.hasSender; }
      }
      public string Sender {
        get { return result.Sender; }
        set { SetSender(value); }
      }
      public Builder SetSender(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSender = true;
        result.sender_ = value;
        return this;
      }
      public Builder ClearSender() {
        PrepareBuilder();
        result.hasSender = false;
        result.sender_ = "";
        return this;
      }
      
      public bool HasContent {
        get { return result.hasContent; }
      }
      public string Content {
        get { return result.Content; }
        set { SetContent(value); }
      }
      public Builder SetContent(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasContent = true;
        result.content_ = value;
        return this;
      }
      public Builder ClearContent() {
        PrepareBuilder();
        result.hasContent = false;
        result.content_ = "";
        return this;
      }
      
      public bool HasMoney {
        get { return result.hasMoney; }
      }
      public int Money {
        get { return result.Money; }
        set { SetMoney(value); }
      }
      public Builder SetMoney(int value) {
        PrepareBuilder();
        result.hasMoney = true;
        result.money_ = value;
        return this;
      }
      public Builder ClearMoney() {
        PrepareBuilder();
        result.hasMoney = false;
        result.money_ = 0;
        return this;
      }
      
      public bool HasYuanbao {
        get { return result.hasYuanbao; }
      }
      public int Yuanbao {
        get { return result.Yuanbao; }
        set { SetYuanbao(value); }
      }
      public Builder SetYuanbao(int value) {
        PrepareBuilder();
        result.hasYuanbao = true;
        result.yuanbao_ = value;
        return this;
      }
      public Builder ClearYuanbao() {
        PrepareBuilder();
        result.hasYuanbao = false;
        result.yuanbao_ = 0;
        return this;
      }
      
      public bool HasSendTime {
        get { return result.hasSendTime; }
      }
      [global::System.CLSCompliant(false)]
      public ulong SendTime {
        get { return result.SendTime; }
        set { SetSendTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetSendTime(ulong value) {
        PrepareBuilder();
        result.hasSendTime = true;
        result.sendTime_ = value;
        return this;
      }
      public Builder ClearSendTime() {
        PrepareBuilder();
        result.hasSendTime = false;
        result.sendTime_ = 0UL;
        return this;
      }
      
      public bool HasReadFlag {
        get { return result.hasReadFlag; }
      }
      public int ReadFlag {
        get { return result.ReadFlag; }
        set { SetReadFlag(value); }
      }
      public Builder SetReadFlag(int value) {
        PrepareBuilder();
        result.hasReadFlag = true;
        result.readFlag_ = value;
        return this;
      }
      public Builder ClearReadFlag() {
        PrepareBuilder();
        result.hasReadFlag = false;
        result.readFlag_ = 0;
        return this;
      }
      
      public bool HasSendFlag {
        get { return result.hasSendFlag; }
      }
      public int SendFlag {
        get { return result.SendFlag; }
        set { SetSendFlag(value); }
      }
      public Builder SetSendFlag(int value) {
        PrepareBuilder();
        result.hasSendFlag = true;
        result.sendFlag_ = value;
        return this;
      }
      public Builder ClearSendFlag() {
        PrepareBuilder();
        result.hasSendFlag = false;
        result.sendFlag_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::core.GUID> AttachmentList {
        get { return PrepareBuilder().attachment_; }
      }
      public int AttachmentCount {
        get { return result.AttachmentCount; }
      }
      public global::core.GUID GetAttachment(int index) {
        return result.GetAttachment(index);
      }
      public Builder SetAttachment(int index, global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachment_[index] = value;
        return this;
      }
      public Builder SetAttachment(int index, global::core.GUID.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachment_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddAttachment(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.attachment_.Add(value);
        return this;
      }
      public Builder AddAttachment(global::core.GUID.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.attachment_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeAttachment(scg::IEnumerable<global::core.GUID> values) {
        PrepareBuilder();
        result.attachment_.Add(values);
        return this;
      }
      public Builder ClearAttachment() {
        PrepareBuilder();
        result.attachment_.Clear();
        return this;
      }
    }
    static Mail() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Question : pb::GeneratedMessage<Question, Question.Builder> {
    private Question() { }
    private static readonly Question defaultInstance = new Question().MakeReadOnly();
    private static readonly string[] _questionFieldNames = new string[] { "counts", "id", "timer" };
    private static readonly uint[] _questionFieldTags = new uint[] { 16, 8, 24 };
    public static Question DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Question DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Question ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Question__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Question, Question.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Question__FieldAccessorTable; }
    }
    
    public const int IdFieldNumber = 1;
    private bool hasId;
    private int id_;
    public bool HasId {
      get { return hasId; }
    }
    public int Id {
      get { return id_; }
    }
    
    public const int CountsFieldNumber = 2;
    private pbc::PopsicleList<int> counts_ = new pbc::PopsicleList<int>();
    public scg::IList<int> CountsList {
      get { return pbc::Lists.AsReadOnly(counts_); }
    }
    public int CountsCount {
      get { return counts_.Count; }
    }
    public int GetCounts(int index) {
      return counts_[index];
    }
    
    public const int TimerFieldNumber = 3;
    private bool hasTimer;
    private int timer_;
    public bool HasTimer {
      get { return hasTimer; }
    }
    public int Timer {
      get { return timer_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasId) return false;
        if (!hasTimer) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _questionFieldNames;
      if (hasId) {
        output.WriteInt32(1, field_names[1], Id);
      }
      if (counts_.Count > 0) {
        output.WriteInt32Array(2, field_names[0], counts_);
      }
      if (hasTimer) {
        output.WriteInt32(3, field_names[2], Timer);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
        }
        {
          int dataSize = 0;
          foreach (int element in CountsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * counts_.Count;
        }
        if (hasTimer) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Timer);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Question ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Question ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Question ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Question ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Question ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Question ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Question ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Question ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Question ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Question ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Question MakeReadOnly() {
      counts_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Question prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Question, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Question cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Question result;
      
      private Question PrepareBuilder() {
        if (resultIsReadOnly) {
          Question original = result;
          result = new Question();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Question MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Question.Descriptor; }
      }
      
      public override Question DefaultInstanceForType {
        get { return global::world.data.Question.DefaultInstance; }
      }
      
      public override Question BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Question) {
          return MergeFrom((Question) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Question other) {
        if (other == global::world.data.Question.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.counts_.Count != 0) {
          result.counts_.Add(other.counts_);
        }
        if (other.HasTimer) {
          Timer = other.Timer;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_questionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _questionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasId = input.ReadInt32(ref result.id_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.counts_);
              break;
            }
            case 24: {
              result.hasTimer = input.ReadInt32(ref result.timer_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasId {
        get { return result.hasId; }
      }
      public int Id {
        get { return result.Id; }
        set { SetId(value); }
      }
      public Builder SetId(int value) {
        PrepareBuilder();
        result.hasId = true;
        result.id_ = value;
        return this;
      }
      public Builder ClearId() {
        PrepareBuilder();
        result.hasId = false;
        result.id_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> CountsList {
        get { return PrepareBuilder().counts_; }
      }
      public int CountsCount {
        get { return result.CountsCount; }
      }
      public int GetCounts(int index) {
        return result.GetCounts(index);
      }
      public Builder SetCounts(int index, int value) {
        PrepareBuilder();
        result.counts_[index] = value;
        return this;
      }
      public Builder AddCounts(int value) {
        PrepareBuilder();
        result.counts_.Add(value);
        return this;
      }
      public Builder AddRangeCounts(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.counts_.Add(values);
        return this;
      }
      public Builder ClearCounts() {
        PrepareBuilder();
        result.counts_.Clear();
        return this;
      }
      
      public bool HasTimer {
        get { return result.hasTimer; }
      }
      public int Timer {
        get { return result.Timer; }
        set { SetTimer(value); }
      }
      public Builder SetTimer(int value) {
        PrepareBuilder();
        result.hasTimer = true;
        result.timer_ = value;
        return this;
      }
      public Builder ClearTimer() {
        PrepareBuilder();
        result.hasTimer = false;
        result.timer_ = 0;
        return this;
      }
    }
    static Question() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class RandomQuestion : pb::GeneratedMessage<RandomQuestion, RandomQuestion.Builder> {
    private RandomQuestion() { }
    private static readonly RandomQuestion defaultInstance = new RandomQuestion().MakeReadOnly();
    private static readonly string[] _randomQuestionFieldNames = new string[] { "Level", "Score", "lists", "question", "used" };
    private static readonly uint[] _randomQuestionFieldTags = new uint[] { 24, 16, 32, 42, 8 };
    public static RandomQuestion DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RandomQuestion DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RandomQuestion ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_RandomQuestion__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RandomQuestion, RandomQuestion.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_RandomQuestion__FieldAccessorTable; }
    }
    
    public const int UsedFieldNumber = 1;
    private bool hasUsed;
    private int used_;
    public bool HasUsed {
      get { return hasUsed; }
    }
    public int Used {
      get { return used_; }
    }
    
    public const int ScoreFieldNumber = 2;
    private bool hasScore;
    private int score_;
    public bool HasScore {
      get { return hasScore; }
    }
    public int Score {
      get { return score_; }
    }
    
    public const int LevelFieldNumber = 3;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int ListsFieldNumber = 4;
    private pbc::PopsicleList<int> lists_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ListsList {
      get { return pbc::Lists.AsReadOnly(lists_); }
    }
    public int ListsCount {
      get { return lists_.Count; }
    }
    public int GetLists(int index) {
      return lists_[index];
    }
    
    public const int QuestionFieldNumber = 5;
    private bool hasQuestion;
    private global::world.data.Question question_;
    public bool HasQuestion {
      get { return hasQuestion; }
    }
    public global::world.data.Question Question {
      get { return question_ ?? global::world.data.Question.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUsed) return false;
        if (!hasScore) return false;
        if (!hasLevel) return false;
        if (!hasQuestion) return false;
        if (!Question.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _randomQuestionFieldNames;
      if (hasUsed) {
        output.WriteInt32(1, field_names[4], Used);
      }
      if (hasScore) {
        output.WriteInt32(2, field_names[1], Score);
      }
      if (hasLevel) {
        output.WriteInt32(3, field_names[0], Level);
      }
      if (lists_.Count > 0) {
        output.WriteInt32Array(4, field_names[2], lists_);
      }
      if (hasQuestion) {
        output.WriteMessage(5, field_names[3], Question);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUsed) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Used);
        }
        if (hasScore) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Score);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Level);
        }
        {
          int dataSize = 0;
          foreach (int element in ListsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * lists_.Count;
        }
        if (hasQuestion) {
          size += pb::CodedOutputStream.ComputeMessageSize(5, Question);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static RandomQuestion ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RandomQuestion ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RandomQuestion ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RandomQuestion ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RandomQuestion ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RandomQuestion ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RandomQuestion ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RandomQuestion ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RandomQuestion ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RandomQuestion ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RandomQuestion MakeReadOnly() {
      lists_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RandomQuestion prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<RandomQuestion, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RandomQuestion cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RandomQuestion result;
      
      private RandomQuestion PrepareBuilder() {
        if (resultIsReadOnly) {
          RandomQuestion original = result;
          result = new RandomQuestion();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RandomQuestion MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.RandomQuestion.Descriptor; }
      }
      
      public override RandomQuestion DefaultInstanceForType {
        get { return global::world.data.RandomQuestion.DefaultInstance; }
      }
      
      public override RandomQuestion BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RandomQuestion) {
          return MergeFrom((RandomQuestion) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RandomQuestion other) {
        if (other == global::world.data.RandomQuestion.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUsed) {
          Used = other.Used;
        }
        if (other.HasScore) {
          Score = other.Score;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.lists_.Count != 0) {
          result.lists_.Add(other.lists_);
        }
        if (other.HasQuestion) {
          MergeQuestion(other.Question);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_randomQuestionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _randomQuestionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUsed = input.ReadInt32(ref result.used_);
              break;
            }
            case 16: {
              result.hasScore = input.ReadInt32(ref result.score_);
              break;
            }
            case 24: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 34:
            case 32: {
              input.ReadInt32Array(tag, field_name, result.lists_);
              break;
            }
            case 42: {
              global::world.data.Question.Builder subBuilder = global::world.data.Question.CreateBuilder();
              if (result.hasQuestion) {
                subBuilder.MergeFrom(Question);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Question = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUsed {
        get { return result.hasUsed; }
      }
      public int Used {
        get { return result.Used; }
        set { SetUsed(value); }
      }
      public Builder SetUsed(int value) {
        PrepareBuilder();
        result.hasUsed = true;
        result.used_ = value;
        return this;
      }
      public Builder ClearUsed() {
        PrepareBuilder();
        result.hasUsed = false;
        result.used_ = 0;
        return this;
      }
      
      public bool HasScore {
        get { return result.hasScore; }
      }
      public int Score {
        get { return result.Score; }
        set { SetScore(value); }
      }
      public Builder SetScore(int value) {
        PrepareBuilder();
        result.hasScore = true;
        result.score_ = value;
        return this;
      }
      public Builder ClearScore() {
        PrepareBuilder();
        result.hasScore = false;
        result.score_ = 0;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> ListsList {
        get { return PrepareBuilder().lists_; }
      }
      public int ListsCount {
        get { return result.ListsCount; }
      }
      public int GetLists(int index) {
        return result.GetLists(index);
      }
      public Builder SetLists(int index, int value) {
        PrepareBuilder();
        result.lists_[index] = value;
        return this;
      }
      public Builder AddLists(int value) {
        PrepareBuilder();
        result.lists_.Add(value);
        return this;
      }
      public Builder AddRangeLists(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.lists_.Add(values);
        return this;
      }
      public Builder ClearLists() {
        PrepareBuilder();
        result.lists_.Clear();
        return this;
      }
      
      public bool HasQuestion {
       get { return result.hasQuestion; }
      }
      public global::world.data.Question Question {
        get { return result.Question; }
        set { SetQuestion(value); }
      }
      public Builder SetQuestion(global::world.data.Question value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasQuestion = true;
        result.question_ = value;
        return this;
      }
      public Builder SetQuestion(global::world.data.Question.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasQuestion = true;
        result.question_ = builderForValue.Build();
        return this;
      }
      public Builder MergeQuestion(global::world.data.Question value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasQuestion &&
            result.question_ != global::world.data.Question.DefaultInstance) {
            result.question_ = global::world.data.Question.CreateBuilder(result.question_).MergeFrom(value).BuildPartial();
        } else {
          result.question_ = value;
        }
        result.hasQuestion = true;
        return this;
      }
      public Builder ClearQuestion() {
        PrepareBuilder();
        result.hasQuestion = false;
        result.question_ = null;
        return this;
      }
    }
    static RandomQuestion() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Vengeance : pb::GeneratedMessage<Vengeance, Vengeance.Builder> {
    private Vengeance() { }
    private static readonly Vengeance defaultInstance = new Vengeance().MakeReadOnly();
    private static readonly string[] _vengeanceFieldNames = new string[] { "player", "start" };
    private static readonly uint[] _vengeanceFieldTags = new uint[] { 18, 8 };
    public static Vengeance DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Vengeance DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Vengeance ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Vengeance__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Vengeance, Vengeance.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Vengeance__FieldAccessorTable; }
    }
    
    public const int StartFieldNumber = 1;
    private bool hasStart;
    private uint start_;
    public bool HasStart {
      get { return hasStart; }
    }
    [global::System.CLSCompliant(false)]
    public uint Start {
      get { return start_; }
    }
    
    public const int PlayerFieldNumber = 2;
    private bool hasPlayer;
    private global::core.GUID player_;
    public bool HasPlayer {
      get { return hasPlayer; }
    }
    public global::core.GUID Player {
      get { return player_ ?? global::core.GUID.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasStart) return false;
        if (!hasPlayer) return false;
        if (!Player.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _vengeanceFieldNames;
      if (hasStart) {
        output.WriteUInt32(1, field_names[1], Start);
      }
      if (hasPlayer) {
        output.WriteMessage(2, field_names[0], Player);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasStart) {
          size += pb::CodedOutputStream.ComputeUInt32Size(1, Start);
        }
        if (hasPlayer) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Player);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Vengeance ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Vengeance ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Vengeance ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Vengeance ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Vengeance ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Vengeance ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Vengeance ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Vengeance ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Vengeance ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Vengeance ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Vengeance MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Vengeance prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Vengeance, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Vengeance cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Vengeance result;
      
      private Vengeance PrepareBuilder() {
        if (resultIsReadOnly) {
          Vengeance original = result;
          result = new Vengeance();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Vengeance MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Vengeance.Descriptor; }
      }
      
      public override Vengeance DefaultInstanceForType {
        get { return global::world.data.Vengeance.DefaultInstance; }
      }
      
      public override Vengeance BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Vengeance) {
          return MergeFrom((Vengeance) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Vengeance other) {
        if (other == global::world.data.Vengeance.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasStart) {
          Start = other.Start;
        }
        if (other.HasPlayer) {
          MergePlayer(other.Player);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_vengeanceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _vengeanceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasStart = input.ReadUInt32(ref result.start_);
              break;
            }
            case 18: {
              global::core.GUID.Builder subBuilder = global::core.GUID.CreateBuilder();
              if (result.hasPlayer) {
                subBuilder.MergeFrom(Player);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Player = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasStart {
        get { return result.hasStart; }
      }
      [global::System.CLSCompliant(false)]
      public uint Start {
        get { return result.Start; }
        set { SetStart(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetStart(uint value) {
        PrepareBuilder();
        result.hasStart = true;
        result.start_ = value;
        return this;
      }
      public Builder ClearStart() {
        PrepareBuilder();
        result.hasStart = false;
        result.start_ = 0;
        return this;
      }
      
      public bool HasPlayer {
       get { return result.hasPlayer; }
      }
      public global::core.GUID Player {
        get { return result.Player; }
        set { SetPlayer(value); }
      }
      public Builder SetPlayer(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayer = true;
        result.player_ = value;
        return this;
      }
      public Builder SetPlayer(global::core.GUID.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayer = true;
        result.player_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayer(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayer &&
            result.player_ != global::core.GUID.DefaultInstance) {
            result.player_ = global::core.GUID.CreateBuilder(result.player_).MergeFrom(value).BuildPartial();
        } else {
          result.player_ = value;
        }
        result.hasPlayer = true;
        return this;
      }
      public Builder ClearPlayer() {
        PrepareBuilder();
        result.hasPlayer = false;
        result.player_ = null;
        return this;
      }
    }
    static Vengeance() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Trade : pb::GeneratedMessage<Trade, Trade.Builder> {
    private Trade() { }
    private static readonly Trade defaultInstance = new Trade().MakeReadOnly();
    private static readonly string[] _tradeFieldNames = new string[] { "items", "money", "state", "target", "yuanbao" };
    private static readonly uint[] _tradeFieldTags = new uint[] { 26, 32, 16, 10, 40 };
    public static Trade DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Trade DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Trade ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Trade__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Trade, Trade.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Trade__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum State {
        state_0 = 0,
        state_1 = 1,
        state_2 = 2,
      }
      
    }
    #endregion
    
    public const int TargetFieldNumber = 1;
    private bool hasTarget;
    private global::core.GUID target_;
    public bool HasTarget {
      get { return hasTarget; }
    }
    public global::core.GUID Target {
      get { return target_ ?? global::core.GUID.DefaultInstance; }
    }
    
    public const int StateFieldNumber = 2;
    private bool hasState;
    private global::world.data.Trade.Types.State state_ = global::world.data.Trade.Types.State.state_0;
    public bool HasState {
      get { return hasState; }
    }
    public global::world.data.Trade.Types.State State {
      get { return state_; }
    }
    
    public const int ItemsFieldNumber = 3;
    private pbc::PopsicleList<global::core.GUID> items_ = new pbc::PopsicleList<global::core.GUID>();
    public scg::IList<global::core.GUID> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::core.GUID GetItems(int index) {
      return items_[index];
    }
    
    public const int MoneyFieldNumber = 4;
    private bool hasMoney;
    private int money_;
    public bool HasMoney {
      get { return hasMoney; }
    }
    public int Money {
      get { return money_; }
    }
    
    public const int YuanbaoFieldNumber = 5;
    private bool hasYuanbao;
    private int yuanbao_;
    public bool HasYuanbao {
      get { return hasYuanbao; }
    }
    public int Yuanbao {
      get { return yuanbao_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTarget) return false;
        if (!hasState) return false;
        if (!hasMoney) return false;
        if (!hasYuanbao) return false;
        if (!Target.IsInitialized) return false;
        foreach (global::core.GUID element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _tradeFieldNames;
      if (hasTarget) {
        output.WriteMessage(1, field_names[3], Target);
      }
      if (hasState) {
        output.WriteEnum(2, field_names[2], (int) State, State);
      }
      if (items_.Count > 0) {
        output.WriteMessageArray(3, field_names[0], items_);
      }
      if (hasMoney) {
        output.WriteInt32(4, field_names[1], Money);
      }
      if (hasYuanbao) {
        output.WriteInt32(5, field_names[4], Yuanbao);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTarget) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Target);
        }
        if (hasState) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) State);
        }
        foreach (global::core.GUID element in ItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasMoney) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Money);
        }
        if (hasYuanbao) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Yuanbao);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Trade ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Trade ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Trade ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Trade ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Trade ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Trade ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Trade ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Trade ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Trade ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Trade ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Trade MakeReadOnly() {
      items_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Trade prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Trade, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Trade cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Trade result;
      
      private Trade PrepareBuilder() {
        if (resultIsReadOnly) {
          Trade original = result;
          result = new Trade();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Trade MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Trade.Descriptor; }
      }
      
      public override Trade DefaultInstanceForType {
        get { return global::world.data.Trade.DefaultInstance; }
      }
      
      public override Trade BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Trade) {
          return MergeFrom((Trade) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Trade other) {
        if (other == global::world.data.Trade.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTarget) {
          MergeTarget(other.Target);
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        if (other.HasMoney) {
          Money = other.Money;
        }
        if (other.HasYuanbao) {
          Yuanbao = other.Yuanbao;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tradeFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tradeFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::core.GUID.Builder subBuilder = global::core.GUID.CreateBuilder();
              if (result.hasTarget) {
                subBuilder.MergeFrom(Target);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Target = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.state_, out unknown)) {
                result.hasState = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.items_, global::core.GUID.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasMoney = input.ReadInt32(ref result.money_);
              break;
            }
            case 40: {
              result.hasYuanbao = input.ReadInt32(ref result.yuanbao_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTarget {
       get { return result.hasTarget; }
      }
      public global::core.GUID Target {
        get { return result.Target; }
        set { SetTarget(value); }
      }
      public Builder SetTarget(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = value;
        return this;
      }
      public Builder SetTarget(global::core.GUID.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTarget(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTarget &&
            result.target_ != global::core.GUID.DefaultInstance) {
            result.target_ = global::core.GUID.CreateBuilder(result.target_).MergeFrom(value).BuildPartial();
        } else {
          result.target_ = value;
        }
        result.hasTarget = true;
        return this;
      }
      public Builder ClearTarget() {
        PrepareBuilder();
        result.hasTarget = false;
        result.target_ = null;
        return this;
      }
      
      public bool HasState {
       get { return result.hasState; }
      }
      public global::world.data.Trade.Types.State State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::world.data.Trade.Types.State value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = global::world.data.Trade.Types.State.state_0;
        return this;
      }
      
      public pbc::IPopsicleList<global::core.GUID> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::core.GUID GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::core.GUID.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::core.GUID.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::core.GUID> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
      
      public bool HasMoney {
        get { return result.hasMoney; }
      }
      public int Money {
        get { return result.Money; }
        set { SetMoney(value); }
      }
      public Builder SetMoney(int value) {
        PrepareBuilder();
        result.hasMoney = true;
        result.money_ = value;
        return this;
      }
      public Builder ClearMoney() {
        PrepareBuilder();
        result.hasMoney = false;
        result.money_ = 0;
        return this;
      }
      
      public bool HasYuanbao {
        get { return result.hasYuanbao; }
      }
      public int Yuanbao {
        get { return result.Yuanbao; }
        set { SetYuanbao(value); }
      }
      public Builder SetYuanbao(int value) {
        PrepareBuilder();
        result.hasYuanbao = true;
        result.yuanbao_ = value;
        return this;
      }
      public Builder ClearYuanbao() {
        PrepareBuilder();
        result.hasYuanbao = false;
        result.yuanbao_ = 0;
        return this;
      }
    }
    static Trade() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Team : pb::GeneratedMessage<Team, Team.Builder> {
    private Team() { }
    private static readonly Team defaultInstance = new Team().MakeReadOnly();
    private static readonly string[] _teamFieldNames = new string[] { "leader", "players" };
    private static readonly uint[] _teamFieldTags = new uint[] { 18, 10 };
    public static Team DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Team DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Team ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Team__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Team, Team.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Team__FieldAccessorTable; }
    }
    
    public const int PlayersFieldNumber = 1;
    private bool hasPlayers;
    private global::core.Container players_;
    public bool HasPlayers {
      get { return hasPlayers; }
    }
    public global::core.Container Players {
      get { return players_ ?? global::core.Container.DefaultInstance; }
    }
    
    public const int LeaderFieldNumber = 2;
    private bool hasLeader;
    private global::core.GUID leader_;
    public bool HasLeader {
      get { return hasLeader; }
    }
    public global::core.GUID Leader {
      get { return leader_ ?? global::core.GUID.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayers) return false;
        if (!hasLeader) return false;
        if (!Players.IsInitialized) return false;
        if (!Leader.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _teamFieldNames;
      if (hasPlayers) {
        output.WriteMessage(1, field_names[1], Players);
      }
      if (hasLeader) {
        output.WriteMessage(2, field_names[0], Leader);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayers) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Players);
        }
        if (hasLeader) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Leader);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Team ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Team ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Team ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Team ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Team ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Team ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Team ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Team ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Team ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Team ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Team MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Team prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Team, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Team cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Team result;
      
      private Team PrepareBuilder() {
        if (resultIsReadOnly) {
          Team original = result;
          result = new Team();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Team MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Team.Descriptor; }
      }
      
      public override Team DefaultInstanceForType {
        get { return global::world.data.Team.DefaultInstance; }
      }
      
      public override Team BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Team) {
          return MergeFrom((Team) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Team other) {
        if (other == global::world.data.Team.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayers) {
          MergePlayers(other.Players);
        }
        if (other.HasLeader) {
          MergeLeader(other.Leader);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_teamFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _teamFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::core.Container.Builder subBuilder = global::core.Container.CreateBuilder();
              if (result.hasPlayers) {
                subBuilder.MergeFrom(Players);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Players = subBuilder.BuildPartial();
              break;
            }
            case 18: {
              global::core.GUID.Builder subBuilder = global::core.GUID.CreateBuilder();
              if (result.hasLeader) {
                subBuilder.MergeFrom(Leader);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Leader = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayers {
       get { return result.hasPlayers; }
      }
      public global::core.Container Players {
        get { return result.Players; }
        set { SetPlayers(value); }
      }
      public Builder SetPlayers(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayers = true;
        result.players_ = value;
        return this;
      }
      public Builder SetPlayers(global::core.Container.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayers = true;
        result.players_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayers(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayers &&
            result.players_ != global::core.Container.DefaultInstance) {
            result.players_ = global::core.Container.CreateBuilder(result.players_).MergeFrom(value).BuildPartial();
        } else {
          result.players_ = value;
        }
        result.hasPlayers = true;
        return this;
      }
      public Builder ClearPlayers() {
        PrepareBuilder();
        result.hasPlayers = false;
        result.players_ = null;
        return this;
      }
      
      public bool HasLeader {
       get { return result.hasLeader; }
      }
      public global::core.GUID Leader {
        get { return result.Leader; }
        set { SetLeader(value); }
      }
      public Builder SetLeader(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLeader = true;
        result.leader_ = value;
        return this;
      }
      public Builder SetLeader(global::core.GUID.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLeader = true;
        result.leader_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLeader(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLeader &&
            result.leader_ != global::core.GUID.DefaultInstance) {
            result.leader_ = global::core.GUID.CreateBuilder(result.leader_).MergeFrom(value).BuildPartial();
        } else {
          result.leader_ = value;
        }
        result.hasLeader = true;
        return this;
      }
      public Builder ClearLeader() {
        PrepareBuilder();
        result.hasLeader = false;
        result.leader_ = null;
        return this;
      }
    }
    static Team() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Requestion : pb::GeneratedMessage<Requestion, Requestion.Builder> {
    private Requestion() { }
    private static readonly Requestion defaultInstance = new Requestion().MakeReadOnly();
    private static readonly string[] _requestionFieldNames = new string[] { "target", "type" };
    private static readonly uint[] _requestionFieldTags = new uint[] { 10, 16 };
    public static Requestion DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Requestion DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Requestion ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Requestion__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Requestion, Requestion.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Requestion__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum Type {
        Team = 0,
        Teacher = 1,
        Student = 2,
        brother = 3,
        Trade = 4,
        Guild = 5,
      }
      
    }
    #endregion
    
    public const int TargetFieldNumber = 1;
    private bool hasTarget;
    private global::core.GUID target_;
    public bool HasTarget {
      get { return hasTarget; }
    }
    public global::core.GUID Target {
      get { return target_ ?? global::core.GUID.DefaultInstance; }
    }
    
    public const int TypeFieldNumber = 2;
    private bool hasType;
    private global::world.data.Requestion.Types.Type type_ = global::world.data.Requestion.Types.Type.Team;
    public bool HasType {
      get { return hasType; }
    }
    public global::world.data.Requestion.Types.Type Type {
      get { return type_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTarget) return false;
        if (!hasType) return false;
        if (!Target.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _requestionFieldNames;
      if (hasTarget) {
        output.WriteMessage(1, field_names[0], Target);
      }
      if (hasType) {
        output.WriteEnum(2, field_names[1], (int) Type, Type);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTarget) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Target);
        }
        if (hasType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Type);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Requestion ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Requestion ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Requestion ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Requestion ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Requestion ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Requestion ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Requestion ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Requestion ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Requestion ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Requestion ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Requestion MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Requestion prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Requestion, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Requestion cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Requestion result;
      
      private Requestion PrepareBuilder() {
        if (resultIsReadOnly) {
          Requestion original = result;
          result = new Requestion();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Requestion MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Requestion.Descriptor; }
      }
      
      public override Requestion DefaultInstanceForType {
        get { return global::world.data.Requestion.DefaultInstance; }
      }
      
      public override Requestion BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Requestion) {
          return MergeFrom((Requestion) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Requestion other) {
        if (other == global::world.data.Requestion.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTarget) {
          MergeTarget(other.Target);
        }
        if (other.HasType) {
          Type = other.Type;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_requestionFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _requestionFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::core.GUID.Builder subBuilder = global::core.GUID.CreateBuilder();
              if (result.hasTarget) {
                subBuilder.MergeFrom(Target);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Target = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.type_, out unknown)) {
                result.hasType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTarget {
       get { return result.hasTarget; }
      }
      public global::core.GUID Target {
        get { return result.Target; }
        set { SetTarget(value); }
      }
      public Builder SetTarget(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = value;
        return this;
      }
      public Builder SetTarget(global::core.GUID.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTarget(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTarget &&
            result.target_ != global::core.GUID.DefaultInstance) {
            result.target_ = global::core.GUID.CreateBuilder(result.target_).MergeFrom(value).BuildPartial();
        } else {
          result.target_ = value;
        }
        result.hasTarget = true;
        return this;
      }
      public Builder ClearTarget() {
        PrepareBuilder();
        result.hasTarget = false;
        result.target_ = null;
        return this;
      }
      
      public bool HasType {
       get { return result.hasType; }
      }
      public global::world.data.Requestion.Types.Type Type {
        get { return result.Type; }
        set { SetType(value); }
      }
      public Builder SetType(global::world.data.Requestion.Types.Type value) {
        PrepareBuilder();
        result.hasType = true;
        result.type_ = value;
        return this;
      }
      public Builder ClearType() {
        PrepareBuilder();
        result.hasType = false;
        result.type_ = global::world.data.Requestion.Types.Type.Team;
        return this;
      }
    }
    static Requestion() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Role : pb::GeneratedMessage<Role, Role.Builder> {
    private Role() { }
    private static readonly Role defaultInstance = new Role().MakeReadOnly();
    private static readonly string[] _roleFieldNames = new string[] { "bag_money", "brothers", "buffs", "depot_money", "friends", "guild", "items", "jinglian", "mails", "player", "question_flags", "question_random", "questions", "shields", "shortcuts", "skills", "students", "teachers", "team", "titles", "trade", "tutors", "vengeances" };
    private static readonly uint[] _roleFieldTags = new uint[] { 56, 130, 74, 64, 122, 162, 178, 32, 82, 10, 88, 106, 98, 114, 50, 16, 146, 138, 186, 24, 170, 40, 154 };
    public static Role DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Role DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Role ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Role__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Role, Role.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Role__FieldAccessorTable; }
    }
    
    public const int PlayerFieldNumber = 1;
    private bool hasPlayer;
    private global::world.data.Player player_;
    public bool HasPlayer {
      get { return hasPlayer; }
    }
    public global::world.data.Player Player {
      get { return player_ ?? global::world.data.Player.DefaultInstance; }
    }
    
    public const int SkillsFieldNumber = 2;
    private pbc::PopsicleList<int> skills_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SkillsList {
      get { return pbc::Lists.AsReadOnly(skills_); }
    }
    public int SkillsCount {
      get { return skills_.Count; }
    }
    public int GetSkills(int index) {
      return skills_[index];
    }
    
    public const int TitlesFieldNumber = 3;
    private pbc::PopsicleList<int> titles_ = new pbc::PopsicleList<int>();
    public scg::IList<int> TitlesList {
      get { return pbc::Lists.AsReadOnly(titles_); }
    }
    public int TitlesCount {
      get { return titles_.Count; }
    }
    public int GetTitles(int index) {
      return titles_[index];
    }
    
    public const int JinglianFieldNumber = 4;
    private pbc::PopsicleList<int> jinglian_ = new pbc::PopsicleList<int>();
    public scg::IList<int> JinglianList {
      get { return pbc::Lists.AsReadOnly(jinglian_); }
    }
    public int JinglianCount {
      get { return jinglian_.Count; }
    }
    public int GetJinglian(int index) {
      return jinglian_[index];
    }
    
    public const int TutorsFieldNumber = 5;
    private pbc::PopsicleList<int> tutors_ = new pbc::PopsicleList<int>();
    public scg::IList<int> TutorsList {
      get { return pbc::Lists.AsReadOnly(tutors_); }
    }
    public int TutorsCount {
      get { return tutors_.Count; }
    }
    public int GetTutors(int index) {
      return tutors_[index];
    }
    
    public const int ShortcutsFieldNumber = 6;
    private pbc::PopsicleList<global::core.Base> shortcuts_ = new pbc::PopsicleList<global::core.Base>();
    public scg::IList<global::core.Base> ShortcutsList {
      get { return shortcuts_; }
    }
    public int ShortcutsCount {
      get { return shortcuts_.Count; }
    }
    public global::core.Base GetShortcuts(int index) {
      return shortcuts_[index];
    }
    
    public const int BagMoneyFieldNumber = 7;
    private bool hasBagMoney;
    private int bagMoney_;
    public bool HasBagMoney {
      get { return hasBagMoney; }
    }
    public int BagMoney {
      get { return bagMoney_; }
    }
    
    public const int DepotMoneyFieldNumber = 8;
    private bool hasDepotMoney;
    private int depotMoney_;
    public bool HasDepotMoney {
      get { return hasDepotMoney; }
    }
    public int DepotMoney {
      get { return depotMoney_; }
    }
    
    public const int BuffsFieldNumber = 9;
    private pbc::PopsicleList<global::world.data.Buff> buffs_ = new pbc::PopsicleList<global::world.data.Buff>();
    public scg::IList<global::world.data.Buff> BuffsList {
      get { return buffs_; }
    }
    public int BuffsCount {
      get { return buffs_.Count; }
    }
    public global::world.data.Buff GetBuffs(int index) {
      return buffs_[index];
    }
    
    public const int MailsFieldNumber = 10;
    private pbc::PopsicleList<global::world.data.Mail> mails_ = new pbc::PopsicleList<global::world.data.Mail>();
    public scg::IList<global::world.data.Mail> MailsList {
      get { return mails_; }
    }
    public int MailsCount {
      get { return mails_.Count; }
    }
    public global::world.data.Mail GetMails(int index) {
      return mails_[index];
    }
    
    public const int QuestionFlagsFieldNumber = 11;
    private pbc::PopsicleList<int> questionFlags_ = new pbc::PopsicleList<int>();
    public scg::IList<int> QuestionFlagsList {
      get { return pbc::Lists.AsReadOnly(questionFlags_); }
    }
    public int QuestionFlagsCount {
      get { return questionFlags_.Count; }
    }
    public int GetQuestionFlags(int index) {
      return questionFlags_[index];
    }
    
    public const int QuestionsFieldNumber = 12;
    private pbc::PopsicleList<global::world.data.Question> questions_ = new pbc::PopsicleList<global::world.data.Question>();
    public scg::IList<global::world.data.Question> QuestionsList {
      get { return questions_; }
    }
    public int QuestionsCount {
      get { return questions_.Count; }
    }
    public global::world.data.Question GetQuestions(int index) {
      return questions_[index];
    }
    
    public const int QuestionRandomFieldNumber = 13;
    private pbc::PopsicleList<global::world.data.RandomQuestion> questionRandom_ = new pbc::PopsicleList<global::world.data.RandomQuestion>();
    public scg::IList<global::world.data.RandomQuestion> QuestionRandomList {
      get { return questionRandom_; }
    }
    public int QuestionRandomCount {
      get { return questionRandom_.Count; }
    }
    public global::world.data.RandomQuestion GetQuestionRandom(int index) {
      return questionRandom_[index];
    }
    
    public const int ShieldsFieldNumber = 14;
    private bool hasShields;
    private global::core.Container shields_;
    public bool HasShields {
      get { return hasShields; }
    }
    public global::core.Container Shields {
      get { return shields_ ?? global::core.Container.DefaultInstance; }
    }
    
    public const int FriendsFieldNumber = 15;
    private bool hasFriends;
    private global::core.Container friends_;
    public bool HasFriends {
      get { return hasFriends; }
    }
    public global::core.Container Friends {
      get { return friends_ ?? global::core.Container.DefaultInstance; }
    }
    
    public const int BrothersFieldNumber = 16;
    private bool hasBrothers;
    private global::core.Container brothers_;
    public bool HasBrothers {
      get { return hasBrothers; }
    }
    public global::core.Container Brothers {
      get { return brothers_ ?? global::core.Container.DefaultInstance; }
    }
    
    public const int TeachersFieldNumber = 17;
    private bool hasTeachers;
    private global::core.Container teachers_;
    public bool HasTeachers {
      get { return hasTeachers; }
    }
    public global::core.Container Teachers {
      get { return teachers_ ?? global::core.Container.DefaultInstance; }
    }
    
    public const int StudentsFieldNumber = 18;
    private bool hasStudents;
    private global::core.Container students_;
    public bool HasStudents {
      get { return hasStudents; }
    }
    public global::core.Container Students {
      get { return students_ ?? global::core.Container.DefaultInstance; }
    }
    
    public const int VengeancesFieldNumber = 19;
    private pbc::PopsicleList<global::world.data.Vengeance> vengeances_ = new pbc::PopsicleList<global::world.data.Vengeance>();
    public scg::IList<global::world.data.Vengeance> VengeancesList {
      get { return vengeances_; }
    }
    public int VengeancesCount {
      get { return vengeances_.Count; }
    }
    public global::world.data.Vengeance GetVengeances(int index) {
      return vengeances_[index];
    }
    
    public const int GuildFieldNumber = 20;
    private bool hasGuild;
    private global::core.GUID guild_;
    public bool HasGuild {
      get { return hasGuild; }
    }
    public global::core.GUID Guild {
      get { return guild_ ?? global::core.GUID.DefaultInstance; }
    }
    
    public const int TradeFieldNumber = 21;
    private bool hasTrade;
    private global::world.data.Trade trade_;
    public bool HasTrade {
      get { return hasTrade; }
    }
    public global::world.data.Trade Trade {
      get { return trade_ ?? global::world.data.Trade.DefaultInstance; }
    }
    
    public const int ItemsFieldNumber = 22;
    private pbc::PopsicleList<global::core.Container> items_ = new pbc::PopsicleList<global::core.Container>();
    public scg::IList<global::core.Container> ItemsList {
      get { return items_; }
    }
    public int ItemsCount {
      get { return items_.Count; }
    }
    public global::core.Container GetItems(int index) {
      return items_[index];
    }
    
    public const int TeamFieldNumber = 23;
    private bool hasTeam;
    private global::core.GUID team_;
    public bool HasTeam {
      get { return hasTeam; }
    }
    public global::core.GUID Team {
      get { return team_ ?? global::core.GUID.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasPlayer) return false;
        if (!hasBagMoney) return false;
        if (!hasDepotMoney) return false;
        if (!hasShields) return false;
        if (!hasFriends) return false;
        if (!hasBrothers) return false;
        if (!hasTeachers) return false;
        if (!hasStudents) return false;
        if (!hasGuild) return false;
        if (!hasTrade) return false;
        if (!hasTeam) return false;
        if (!Player.IsInitialized) return false;
        foreach (global::core.Base element in ShortcutsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::world.data.Buff element in BuffsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::world.data.Mail element in MailsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::world.data.Question element in QuestionsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::world.data.RandomQuestion element in QuestionRandomList) {
          if (!element.IsInitialized) return false;
        }
        if (!Shields.IsInitialized) return false;
        if (!Friends.IsInitialized) return false;
        if (!Brothers.IsInitialized) return false;
        if (!Teachers.IsInitialized) return false;
        if (!Students.IsInitialized) return false;
        foreach (global::world.data.Vengeance element in VengeancesList) {
          if (!element.IsInitialized) return false;
        }
        if (!Guild.IsInitialized) return false;
        if (!Trade.IsInitialized) return false;
        foreach (global::core.Container element in ItemsList) {
          if (!element.IsInitialized) return false;
        }
        if (!Team.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _roleFieldNames;
      if (hasPlayer) {
        output.WriteMessage(1, field_names[9], Player);
      }
      if (skills_.Count > 0) {
        output.WriteInt32Array(2, field_names[15], skills_);
      }
      if (titles_.Count > 0) {
        output.WriteInt32Array(3, field_names[19], titles_);
      }
      if (jinglian_.Count > 0) {
        output.WriteInt32Array(4, field_names[7], jinglian_);
      }
      if (tutors_.Count > 0) {
        output.WriteInt32Array(5, field_names[21], tutors_);
      }
      if (shortcuts_.Count > 0) {
        output.WriteMessageArray(6, field_names[14], shortcuts_);
      }
      if (hasBagMoney) {
        output.WriteInt32(7, field_names[0], BagMoney);
      }
      if (hasDepotMoney) {
        output.WriteInt32(8, field_names[3], DepotMoney);
      }
      if (buffs_.Count > 0) {
        output.WriteMessageArray(9, field_names[2], buffs_);
      }
      if (mails_.Count > 0) {
        output.WriteMessageArray(10, field_names[8], mails_);
      }
      if (questionFlags_.Count > 0) {
        output.WriteInt32Array(11, field_names[10], questionFlags_);
      }
      if (questions_.Count > 0) {
        output.WriteMessageArray(12, field_names[12], questions_);
      }
      if (questionRandom_.Count > 0) {
        output.WriteMessageArray(13, field_names[11], questionRandom_);
      }
      if (hasShields) {
        output.WriteMessage(14, field_names[13], Shields);
      }
      if (hasFriends) {
        output.WriteMessage(15, field_names[4], Friends);
      }
      if (hasBrothers) {
        output.WriteMessage(16, field_names[1], Brothers);
      }
      if (hasTeachers) {
        output.WriteMessage(17, field_names[17], Teachers);
      }
      if (hasStudents) {
        output.WriteMessage(18, field_names[16], Students);
      }
      if (vengeances_.Count > 0) {
        output.WriteMessageArray(19, field_names[22], vengeances_);
      }
      if (hasGuild) {
        output.WriteMessage(20, field_names[5], Guild);
      }
      if (hasTrade) {
        output.WriteMessage(21, field_names[20], Trade);
      }
      if (items_.Count > 0) {
        output.WriteMessageArray(22, field_names[6], items_);
      }
      if (hasTeam) {
        output.WriteMessage(23, field_names[18], Team);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasPlayer) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, Player);
        }
        {
          int dataSize = 0;
          foreach (int element in SkillsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * skills_.Count;
        }
        {
          int dataSize = 0;
          foreach (int element in TitlesList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * titles_.Count;
        }
        {
          int dataSize = 0;
          foreach (int element in JinglianList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * jinglian_.Count;
        }
        {
          int dataSize = 0;
          foreach (int element in TutorsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * tutors_.Count;
        }
        foreach (global::core.Base element in ShortcutsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        if (hasBagMoney) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, BagMoney);
        }
        if (hasDepotMoney) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, DepotMoney);
        }
        foreach (global::world.data.Buff element in BuffsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, element);
        }
        foreach (global::world.data.Mail element in MailsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(10, element);
        }
        {
          int dataSize = 0;
          foreach (int element in QuestionFlagsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * questionFlags_.Count;
        }
        foreach (global::world.data.Question element in QuestionsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(12, element);
        }
        foreach (global::world.data.RandomQuestion element in QuestionRandomList) {
          size += pb::CodedOutputStream.ComputeMessageSize(13, element);
        }
        if (hasShields) {
          size += pb::CodedOutputStream.ComputeMessageSize(14, Shields);
        }
        if (hasFriends) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, Friends);
        }
        if (hasBrothers) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, Brothers);
        }
        if (hasTeachers) {
          size += pb::CodedOutputStream.ComputeMessageSize(17, Teachers);
        }
        if (hasStudents) {
          size += pb::CodedOutputStream.ComputeMessageSize(18, Students);
        }
        foreach (global::world.data.Vengeance element in VengeancesList) {
          size += pb::CodedOutputStream.ComputeMessageSize(19, element);
        }
        if (hasGuild) {
          size += pb::CodedOutputStream.ComputeMessageSize(20, Guild);
        }
        if (hasTrade) {
          size += pb::CodedOutputStream.ComputeMessageSize(21, Trade);
        }
        foreach (global::core.Container element in ItemsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(22, element);
        }
        if (hasTeam) {
          size += pb::CodedOutputStream.ComputeMessageSize(23, Team);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Role ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Role ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Role ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Role ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Role ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Role ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Role ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Role ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Role ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Role ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Role MakeReadOnly() {
      skills_.MakeReadOnly();
      titles_.MakeReadOnly();
      jinglian_.MakeReadOnly();
      tutors_.MakeReadOnly();
      shortcuts_.MakeReadOnly();
      buffs_.MakeReadOnly();
      mails_.MakeReadOnly();
      questionFlags_.MakeReadOnly();
      questions_.MakeReadOnly();
      questionRandom_.MakeReadOnly();
      vengeances_.MakeReadOnly();
      items_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Role prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Role, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Role cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Role result;
      
      private Role PrepareBuilder() {
        if (resultIsReadOnly) {
          Role original = result;
          result = new Role();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Role MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Role.Descriptor; }
      }
      
      public override Role DefaultInstanceForType {
        get { return global::world.data.Role.DefaultInstance; }
      }
      
      public override Role BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Role) {
          return MergeFrom((Role) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Role other) {
        if (other == global::world.data.Role.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasPlayer) {
          MergePlayer(other.Player);
        }
        if (other.skills_.Count != 0) {
          result.skills_.Add(other.skills_);
        }
        if (other.titles_.Count != 0) {
          result.titles_.Add(other.titles_);
        }
        if (other.jinglian_.Count != 0) {
          result.jinglian_.Add(other.jinglian_);
        }
        if (other.tutors_.Count != 0) {
          result.tutors_.Add(other.tutors_);
        }
        if (other.shortcuts_.Count != 0) {
          result.shortcuts_.Add(other.shortcuts_);
        }
        if (other.HasBagMoney) {
          BagMoney = other.BagMoney;
        }
        if (other.HasDepotMoney) {
          DepotMoney = other.DepotMoney;
        }
        if (other.buffs_.Count != 0) {
          result.buffs_.Add(other.buffs_);
        }
        if (other.mails_.Count != 0) {
          result.mails_.Add(other.mails_);
        }
        if (other.questionFlags_.Count != 0) {
          result.questionFlags_.Add(other.questionFlags_);
        }
        if (other.questions_.Count != 0) {
          result.questions_.Add(other.questions_);
        }
        if (other.questionRandom_.Count != 0) {
          result.questionRandom_.Add(other.questionRandom_);
        }
        if (other.HasShields) {
          MergeShields(other.Shields);
        }
        if (other.HasFriends) {
          MergeFriends(other.Friends);
        }
        if (other.HasBrothers) {
          MergeBrothers(other.Brothers);
        }
        if (other.HasTeachers) {
          MergeTeachers(other.Teachers);
        }
        if (other.HasStudents) {
          MergeStudents(other.Students);
        }
        if (other.vengeances_.Count != 0) {
          result.vengeances_.Add(other.vengeances_);
        }
        if (other.HasGuild) {
          MergeGuild(other.Guild);
        }
        if (other.HasTrade) {
          MergeTrade(other.Trade);
        }
        if (other.items_.Count != 0) {
          result.items_.Add(other.items_);
        }
        if (other.HasTeam) {
          MergeTeam(other.Team);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_roleFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _roleFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::world.data.Player.Builder subBuilder = global::world.data.Player.CreateBuilder();
              if (result.hasPlayer) {
                subBuilder.MergeFrom(Player);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Player = subBuilder.BuildPartial();
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.skills_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.titles_);
              break;
            }
            case 34:
            case 32: {
              input.ReadInt32Array(tag, field_name, result.jinglian_);
              break;
            }
            case 42:
            case 40: {
              input.ReadInt32Array(tag, field_name, result.tutors_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.shortcuts_, global::core.Base.DefaultInstance, extensionRegistry);
              break;
            }
            case 56: {
              result.hasBagMoney = input.ReadInt32(ref result.bagMoney_);
              break;
            }
            case 64: {
              result.hasDepotMoney = input.ReadInt32(ref result.depotMoney_);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.buffs_, global::world.data.Buff.DefaultInstance, extensionRegistry);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.mails_, global::world.data.Mail.DefaultInstance, extensionRegistry);
              break;
            }
            case 90:
            case 88: {
              input.ReadInt32Array(tag, field_name, result.questionFlags_);
              break;
            }
            case 98: {
              input.ReadMessageArray(tag, field_name, result.questions_, global::world.data.Question.DefaultInstance, extensionRegistry);
              break;
            }
            case 106: {
              input.ReadMessageArray(tag, field_name, result.questionRandom_, global::world.data.RandomQuestion.DefaultInstance, extensionRegistry);
              break;
            }
            case 114: {
              global::core.Container.Builder subBuilder = global::core.Container.CreateBuilder();
              if (result.hasShields) {
                subBuilder.MergeFrom(Shields);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Shields = subBuilder.BuildPartial();
              break;
            }
            case 122: {
              global::core.Container.Builder subBuilder = global::core.Container.CreateBuilder();
              if (result.hasFriends) {
                subBuilder.MergeFrom(Friends);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Friends = subBuilder.BuildPartial();
              break;
            }
            case 130: {
              global::core.Container.Builder subBuilder = global::core.Container.CreateBuilder();
              if (result.hasBrothers) {
                subBuilder.MergeFrom(Brothers);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Brothers = subBuilder.BuildPartial();
              break;
            }
            case 138: {
              global::core.Container.Builder subBuilder = global::core.Container.CreateBuilder();
              if (result.hasTeachers) {
                subBuilder.MergeFrom(Teachers);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Teachers = subBuilder.BuildPartial();
              break;
            }
            case 146: {
              global::core.Container.Builder subBuilder = global::core.Container.CreateBuilder();
              if (result.hasStudents) {
                subBuilder.MergeFrom(Students);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Students = subBuilder.BuildPartial();
              break;
            }
            case 154: {
              input.ReadMessageArray(tag, field_name, result.vengeances_, global::world.data.Vengeance.DefaultInstance, extensionRegistry);
              break;
            }
            case 162: {
              global::core.GUID.Builder subBuilder = global::core.GUID.CreateBuilder();
              if (result.hasGuild) {
                subBuilder.MergeFrom(Guild);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Guild = subBuilder.BuildPartial();
              break;
            }
            case 170: {
              global::world.data.Trade.Builder subBuilder = global::world.data.Trade.CreateBuilder();
              if (result.hasTrade) {
                subBuilder.MergeFrom(Trade);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Trade = subBuilder.BuildPartial();
              break;
            }
            case 178: {
              input.ReadMessageArray(tag, field_name, result.items_, global::core.Container.DefaultInstance, extensionRegistry);
              break;
            }
            case 186: {
              global::core.GUID.Builder subBuilder = global::core.GUID.CreateBuilder();
              if (result.hasTeam) {
                subBuilder.MergeFrom(Team);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Team = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasPlayer {
       get { return result.hasPlayer; }
      }
      public global::world.data.Player Player {
        get { return result.Player; }
        set { SetPlayer(value); }
      }
      public Builder SetPlayer(global::world.data.Player value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlayer = true;
        result.player_ = value;
        return this;
      }
      public Builder SetPlayer(global::world.data.Player.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlayer = true;
        result.player_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlayer(global::world.data.Player value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlayer &&
            result.player_ != global::world.data.Player.DefaultInstance) {
            result.player_ = global::world.data.Player.CreateBuilder(result.player_).MergeFrom(value).BuildPartial();
        } else {
          result.player_ = value;
        }
        result.hasPlayer = true;
        return this;
      }
      public Builder ClearPlayer() {
        PrepareBuilder();
        result.hasPlayer = false;
        result.player_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<int> SkillsList {
        get { return PrepareBuilder().skills_; }
      }
      public int SkillsCount {
        get { return result.SkillsCount; }
      }
      public int GetSkills(int index) {
        return result.GetSkills(index);
      }
      public Builder SetSkills(int index, int value) {
        PrepareBuilder();
        result.skills_[index] = value;
        return this;
      }
      public Builder AddSkills(int value) {
        PrepareBuilder();
        result.skills_.Add(value);
        return this;
      }
      public Builder AddRangeSkills(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.skills_.Add(values);
        return this;
      }
      public Builder ClearSkills() {
        PrepareBuilder();
        result.skills_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> TitlesList {
        get { return PrepareBuilder().titles_; }
      }
      public int TitlesCount {
        get { return result.TitlesCount; }
      }
      public int GetTitles(int index) {
        return result.GetTitles(index);
      }
      public Builder SetTitles(int index, int value) {
        PrepareBuilder();
        result.titles_[index] = value;
        return this;
      }
      public Builder AddTitles(int value) {
        PrepareBuilder();
        result.titles_.Add(value);
        return this;
      }
      public Builder AddRangeTitles(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.titles_.Add(values);
        return this;
      }
      public Builder ClearTitles() {
        PrepareBuilder();
        result.titles_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> JinglianList {
        get { return PrepareBuilder().jinglian_; }
      }
      public int JinglianCount {
        get { return result.JinglianCount; }
      }
      public int GetJinglian(int index) {
        return result.GetJinglian(index);
      }
      public Builder SetJinglian(int index, int value) {
        PrepareBuilder();
        result.jinglian_[index] = value;
        return this;
      }
      public Builder AddJinglian(int value) {
        PrepareBuilder();
        result.jinglian_.Add(value);
        return this;
      }
      public Builder AddRangeJinglian(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.jinglian_.Add(values);
        return this;
      }
      public Builder ClearJinglian() {
        PrepareBuilder();
        result.jinglian_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> TutorsList {
        get { return PrepareBuilder().tutors_; }
      }
      public int TutorsCount {
        get { return result.TutorsCount; }
      }
      public int GetTutors(int index) {
        return result.GetTutors(index);
      }
      public Builder SetTutors(int index, int value) {
        PrepareBuilder();
        result.tutors_[index] = value;
        return this;
      }
      public Builder AddTutors(int value) {
        PrepareBuilder();
        result.tutors_.Add(value);
        return this;
      }
      public Builder AddRangeTutors(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.tutors_.Add(values);
        return this;
      }
      public Builder ClearTutors() {
        PrepareBuilder();
        result.tutors_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::core.Base> ShortcutsList {
        get { return PrepareBuilder().shortcuts_; }
      }
      public int ShortcutsCount {
        get { return result.ShortcutsCount; }
      }
      public global::core.Base GetShortcuts(int index) {
        return result.GetShortcuts(index);
      }
      public Builder SetShortcuts(int index, global::core.Base value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.shortcuts_[index] = value;
        return this;
      }
      public Builder SetShortcuts(int index, global::core.Base.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.shortcuts_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddShortcuts(global::core.Base value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.shortcuts_.Add(value);
        return this;
      }
      public Builder AddShortcuts(global::core.Base.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.shortcuts_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeShortcuts(scg::IEnumerable<global::core.Base> values) {
        PrepareBuilder();
        result.shortcuts_.Add(values);
        return this;
      }
      public Builder ClearShortcuts() {
        PrepareBuilder();
        result.shortcuts_.Clear();
        return this;
      }
      
      public bool HasBagMoney {
        get { return result.hasBagMoney; }
      }
      public int BagMoney {
        get { return result.BagMoney; }
        set { SetBagMoney(value); }
      }
      public Builder SetBagMoney(int value) {
        PrepareBuilder();
        result.hasBagMoney = true;
        result.bagMoney_ = value;
        return this;
      }
      public Builder ClearBagMoney() {
        PrepareBuilder();
        result.hasBagMoney = false;
        result.bagMoney_ = 0;
        return this;
      }
      
      public bool HasDepotMoney {
        get { return result.hasDepotMoney; }
      }
      public int DepotMoney {
        get { return result.DepotMoney; }
        set { SetDepotMoney(value); }
      }
      public Builder SetDepotMoney(int value) {
        PrepareBuilder();
        result.hasDepotMoney = true;
        result.depotMoney_ = value;
        return this;
      }
      public Builder ClearDepotMoney() {
        PrepareBuilder();
        result.hasDepotMoney = false;
        result.depotMoney_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::world.data.Buff> BuffsList {
        get { return PrepareBuilder().buffs_; }
      }
      public int BuffsCount {
        get { return result.BuffsCount; }
      }
      public global::world.data.Buff GetBuffs(int index) {
        return result.GetBuffs(index);
      }
      public Builder SetBuffs(int index, global::world.data.Buff value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.buffs_[index] = value;
        return this;
      }
      public Builder SetBuffs(int index, global::world.data.Buff.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.buffs_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddBuffs(global::world.data.Buff value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.buffs_.Add(value);
        return this;
      }
      public Builder AddBuffs(global::world.data.Buff.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.buffs_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeBuffs(scg::IEnumerable<global::world.data.Buff> values) {
        PrepareBuilder();
        result.buffs_.Add(values);
        return this;
      }
      public Builder ClearBuffs() {
        PrepareBuilder();
        result.buffs_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::world.data.Mail> MailsList {
        get { return PrepareBuilder().mails_; }
      }
      public int MailsCount {
        get { return result.MailsCount; }
      }
      public global::world.data.Mail GetMails(int index) {
        return result.GetMails(index);
      }
      public Builder SetMails(int index, global::world.data.Mail value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mails_[index] = value;
        return this;
      }
      public Builder SetMails(int index, global::world.data.Mail.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mails_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMails(global::world.data.Mail value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.mails_.Add(value);
        return this;
      }
      public Builder AddMails(global::world.data.Mail.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.mails_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMails(scg::IEnumerable<global::world.data.Mail> values) {
        PrepareBuilder();
        result.mails_.Add(values);
        return this;
      }
      public Builder ClearMails() {
        PrepareBuilder();
        result.mails_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> QuestionFlagsList {
        get { return PrepareBuilder().questionFlags_; }
      }
      public int QuestionFlagsCount {
        get { return result.QuestionFlagsCount; }
      }
      public int GetQuestionFlags(int index) {
        return result.GetQuestionFlags(index);
      }
      public Builder SetQuestionFlags(int index, int value) {
        PrepareBuilder();
        result.questionFlags_[index] = value;
        return this;
      }
      public Builder AddQuestionFlags(int value) {
        PrepareBuilder();
        result.questionFlags_.Add(value);
        return this;
      }
      public Builder AddRangeQuestionFlags(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.questionFlags_.Add(values);
        return this;
      }
      public Builder ClearQuestionFlags() {
        PrepareBuilder();
        result.questionFlags_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::world.data.Question> QuestionsList {
        get { return PrepareBuilder().questions_; }
      }
      public int QuestionsCount {
        get { return result.QuestionsCount; }
      }
      public global::world.data.Question GetQuestions(int index) {
        return result.GetQuestions(index);
      }
      public Builder SetQuestions(int index, global::world.data.Question value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.questions_[index] = value;
        return this;
      }
      public Builder SetQuestions(int index, global::world.data.Question.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.questions_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddQuestions(global::world.data.Question value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.questions_.Add(value);
        return this;
      }
      public Builder AddQuestions(global::world.data.Question.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.questions_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeQuestions(scg::IEnumerable<global::world.data.Question> values) {
        PrepareBuilder();
        result.questions_.Add(values);
        return this;
      }
      public Builder ClearQuestions() {
        PrepareBuilder();
        result.questions_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::world.data.RandomQuestion> QuestionRandomList {
        get { return PrepareBuilder().questionRandom_; }
      }
      public int QuestionRandomCount {
        get { return result.QuestionRandomCount; }
      }
      public global::world.data.RandomQuestion GetQuestionRandom(int index) {
        return result.GetQuestionRandom(index);
      }
      public Builder SetQuestionRandom(int index, global::world.data.RandomQuestion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.questionRandom_[index] = value;
        return this;
      }
      public Builder SetQuestionRandom(int index, global::world.data.RandomQuestion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.questionRandom_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddQuestionRandom(global::world.data.RandomQuestion value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.questionRandom_.Add(value);
        return this;
      }
      public Builder AddQuestionRandom(global::world.data.RandomQuestion.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.questionRandom_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeQuestionRandom(scg::IEnumerable<global::world.data.RandomQuestion> values) {
        PrepareBuilder();
        result.questionRandom_.Add(values);
        return this;
      }
      public Builder ClearQuestionRandom() {
        PrepareBuilder();
        result.questionRandom_.Clear();
        return this;
      }
      
      public bool HasShields {
       get { return result.hasShields; }
      }
      public global::core.Container Shields {
        get { return result.Shields; }
        set { SetShields(value); }
      }
      public Builder SetShields(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasShields = true;
        result.shields_ = value;
        return this;
      }
      public Builder SetShields(global::core.Container.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasShields = true;
        result.shields_ = builderForValue.Build();
        return this;
      }
      public Builder MergeShields(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasShields &&
            result.shields_ != global::core.Container.DefaultInstance) {
            result.shields_ = global::core.Container.CreateBuilder(result.shields_).MergeFrom(value).BuildPartial();
        } else {
          result.shields_ = value;
        }
        result.hasShields = true;
        return this;
      }
      public Builder ClearShields() {
        PrepareBuilder();
        result.hasShields = false;
        result.shields_ = null;
        return this;
      }
      
      public bool HasFriends {
       get { return result.hasFriends; }
      }
      public global::core.Container Friends {
        get { return result.Friends; }
        set { SetFriends(value); }
      }
      public Builder SetFriends(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasFriends = true;
        result.friends_ = value;
        return this;
      }
      public Builder SetFriends(global::core.Container.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasFriends = true;
        result.friends_ = builderForValue.Build();
        return this;
      }
      public Builder MergeFriends(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasFriends &&
            result.friends_ != global::core.Container.DefaultInstance) {
            result.friends_ = global::core.Container.CreateBuilder(result.friends_).MergeFrom(value).BuildPartial();
        } else {
          result.friends_ = value;
        }
        result.hasFriends = true;
        return this;
      }
      public Builder ClearFriends() {
        PrepareBuilder();
        result.hasFriends = false;
        result.friends_ = null;
        return this;
      }
      
      public bool HasBrothers {
       get { return result.hasBrothers; }
      }
      public global::core.Container Brothers {
        get { return result.Brothers; }
        set { SetBrothers(value); }
      }
      public Builder SetBrothers(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBrothers = true;
        result.brothers_ = value;
        return this;
      }
      public Builder SetBrothers(global::core.Container.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBrothers = true;
        result.brothers_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBrothers(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBrothers &&
            result.brothers_ != global::core.Container.DefaultInstance) {
            result.brothers_ = global::core.Container.CreateBuilder(result.brothers_).MergeFrom(value).BuildPartial();
        } else {
          result.brothers_ = value;
        }
        result.hasBrothers = true;
        return this;
      }
      public Builder ClearBrothers() {
        PrepareBuilder();
        result.hasBrothers = false;
        result.brothers_ = null;
        return this;
      }
      
      public bool HasTeachers {
       get { return result.hasTeachers; }
      }
      public global::core.Container Teachers {
        get { return result.Teachers; }
        set { SetTeachers(value); }
      }
      public Builder SetTeachers(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTeachers = true;
        result.teachers_ = value;
        return this;
      }
      public Builder SetTeachers(global::core.Container.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTeachers = true;
        result.teachers_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTeachers(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTeachers &&
            result.teachers_ != global::core.Container.DefaultInstance) {
            result.teachers_ = global::core.Container.CreateBuilder(result.teachers_).MergeFrom(value).BuildPartial();
        } else {
          result.teachers_ = value;
        }
        result.hasTeachers = true;
        return this;
      }
      public Builder ClearTeachers() {
        PrepareBuilder();
        result.hasTeachers = false;
        result.teachers_ = null;
        return this;
      }
      
      public bool HasStudents {
       get { return result.hasStudents; }
      }
      public global::core.Container Students {
        get { return result.Students; }
        set { SetStudents(value); }
      }
      public Builder SetStudents(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStudents = true;
        result.students_ = value;
        return this;
      }
      public Builder SetStudents(global::core.Container.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStudents = true;
        result.students_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStudents(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStudents &&
            result.students_ != global::core.Container.DefaultInstance) {
            result.students_ = global::core.Container.CreateBuilder(result.students_).MergeFrom(value).BuildPartial();
        } else {
          result.students_ = value;
        }
        result.hasStudents = true;
        return this;
      }
      public Builder ClearStudents() {
        PrepareBuilder();
        result.hasStudents = false;
        result.students_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::world.data.Vengeance> VengeancesList {
        get { return PrepareBuilder().vengeances_; }
      }
      public int VengeancesCount {
        get { return result.VengeancesCount; }
      }
      public global::world.data.Vengeance GetVengeances(int index) {
        return result.GetVengeances(index);
      }
      public Builder SetVengeances(int index, global::world.data.Vengeance value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.vengeances_[index] = value;
        return this;
      }
      public Builder SetVengeances(int index, global::world.data.Vengeance.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.vengeances_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddVengeances(global::world.data.Vengeance value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.vengeances_.Add(value);
        return this;
      }
      public Builder AddVengeances(global::world.data.Vengeance.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.vengeances_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeVengeances(scg::IEnumerable<global::world.data.Vengeance> values) {
        PrepareBuilder();
        result.vengeances_.Add(values);
        return this;
      }
      public Builder ClearVengeances() {
        PrepareBuilder();
        result.vengeances_.Clear();
        return this;
      }
      
      public bool HasGuild {
       get { return result.hasGuild; }
      }
      public global::core.GUID Guild {
        get { return result.Guild; }
        set { SetGuild(value); }
      }
      public Builder SetGuild(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuild = true;
        result.guild_ = value;
        return this;
      }
      public Builder SetGuild(global::core.GUID.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuild = true;
        result.guild_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuild(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuild &&
            result.guild_ != global::core.GUID.DefaultInstance) {
            result.guild_ = global::core.GUID.CreateBuilder(result.guild_).MergeFrom(value).BuildPartial();
        } else {
          result.guild_ = value;
        }
        result.hasGuild = true;
        return this;
      }
      public Builder ClearGuild() {
        PrepareBuilder();
        result.hasGuild = false;
        result.guild_ = null;
        return this;
      }
      
      public bool HasTrade {
       get { return result.hasTrade; }
      }
      public global::world.data.Trade Trade {
        get { return result.Trade; }
        set { SetTrade(value); }
      }
      public Builder SetTrade(global::world.data.Trade value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTrade = true;
        result.trade_ = value;
        return this;
      }
      public Builder SetTrade(global::world.data.Trade.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTrade = true;
        result.trade_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTrade(global::world.data.Trade value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTrade &&
            result.trade_ != global::world.data.Trade.DefaultInstance) {
            result.trade_ = global::world.data.Trade.CreateBuilder(result.trade_).MergeFrom(value).BuildPartial();
        } else {
          result.trade_ = value;
        }
        result.hasTrade = true;
        return this;
      }
      public Builder ClearTrade() {
        PrepareBuilder();
        result.hasTrade = false;
        result.trade_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::core.Container> ItemsList {
        get { return PrepareBuilder().items_; }
      }
      public int ItemsCount {
        get { return result.ItemsCount; }
      }
      public global::core.Container GetItems(int index) {
        return result.GetItems(index);
      }
      public Builder SetItems(int index, global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_[index] = value;
        return this;
      }
      public Builder SetItems(int index, global::core.Container.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddItems(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.items_.Add(value);
        return this;
      }
      public Builder AddItems(global::core.Container.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.items_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeItems(scg::IEnumerable<global::core.Container> values) {
        PrepareBuilder();
        result.items_.Add(values);
        return this;
      }
      public Builder ClearItems() {
        PrepareBuilder();
        result.items_.Clear();
        return this;
      }
      
      public bool HasTeam {
       get { return result.hasTeam; }
      }
      public global::core.GUID Team {
        get { return result.Team; }
        set { SetTeam(value); }
      }
      public Builder SetTeam(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTeam = true;
        result.team_ = value;
        return this;
      }
      public Builder SetTeam(global::core.GUID.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTeam = true;
        result.team_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTeam(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTeam &&
            result.team_ != global::core.GUID.DefaultInstance) {
            result.team_ = global::core.GUID.CreateBuilder(result.team_).MergeFrom(value).BuildPartial();
        } else {
          result.team_ = value;
        }
        result.hasTeam = true;
        return this;
      }
      public Builder ClearTeam() {
        PrepareBuilder();
        result.hasTeam = false;
        result.team_ = null;
        return this;
      }
    }
    static Role() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class NPC : pb::GeneratedMessage<NPC, NPC.Builder> {
    private NPC() { }
    private static readonly NPC defaultInstance = new NPC().MakeReadOnly();
    private static readonly string[] _nPCFieldNames = new string[] { "charactor", "follow", "offerexp", "template", "zoom" };
    private static readonly uint[] _nPCFieldTags = new uint[] { 18, 40, 24, 8, 32 };
    public static NPC DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override NPC DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NPC ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_NPC__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<NPC, NPC.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_NPC__FieldAccessorTable; }
    }
    
    public const int TemplateFieldNumber = 1;
    private bool hasTemplate;
    private int template_;
    public bool HasTemplate {
      get { return hasTemplate; }
    }
    public int Template {
      get { return template_; }
    }
    
    public const int CharactorFieldNumber = 2;
    private bool hasCharactor;
    private global::world.Interface.Charactor charactor_;
    public bool HasCharactor {
      get { return hasCharactor; }
    }
    public global::world.Interface.Charactor Charactor {
      get { return charactor_ ?? global::world.Interface.Charactor.DefaultInstance; }
    }
    
    public const int OfferexpFieldNumber = 3;
    private bool hasOfferexp;
    private int offerexp_;
    public bool HasOfferexp {
      get { return hasOfferexp; }
    }
    public int Offerexp {
      get { return offerexp_; }
    }
    
    public const int ZoomFieldNumber = 4;
    private bool hasZoom;
    private int zoom_;
    public bool HasZoom {
      get { return hasZoom; }
    }
    public int Zoom {
      get { return zoom_; }
    }
    
    public const int FollowFieldNumber = 5;
    private bool hasFollow;
    private int follow_;
    public bool HasFollow {
      get { return hasFollow; }
    }
    public int Follow {
      get { return follow_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTemplate) return false;
        if (!hasCharactor) return false;
        if (!hasOfferexp) return false;
        if (!hasZoom) return false;
        if (!hasFollow) return false;
        if (!Charactor.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _nPCFieldNames;
      if (hasTemplate) {
        output.WriteInt32(1, field_names[3], Template);
      }
      if (hasCharactor) {
        output.WriteMessage(2, field_names[0], Charactor);
      }
      if (hasOfferexp) {
        output.WriteInt32(3, field_names[2], Offerexp);
      }
      if (hasZoom) {
        output.WriteInt32(4, field_names[4], Zoom);
      }
      if (hasFollow) {
        output.WriteInt32(5, field_names[1], Follow);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTemplate) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Template);
        }
        if (hasCharactor) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Charactor);
        }
        if (hasOfferexp) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Offerexp);
        }
        if (hasZoom) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Zoom);
        }
        if (hasFollow) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Follow);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static NPC ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NPC ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NPC ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static NPC ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static NPC ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NPC ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static NPC ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static NPC ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static NPC ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static NPC ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NPC MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(NPC prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<NPC, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NPC cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NPC result;
      
      private NPC PrepareBuilder() {
        if (resultIsReadOnly) {
          NPC original = result;
          result = new NPC();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NPC MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.NPC.Descriptor; }
      }
      
      public override NPC DefaultInstanceForType {
        get { return global::world.data.NPC.DefaultInstance; }
      }
      
      public override NPC BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is NPC) {
          return MergeFrom((NPC) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NPC other) {
        if (other == global::world.data.NPC.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTemplate) {
          Template = other.Template;
        }
        if (other.HasCharactor) {
          MergeCharactor(other.Charactor);
        }
        if (other.HasOfferexp) {
          Offerexp = other.Offerexp;
        }
        if (other.HasZoom) {
          Zoom = other.Zoom;
        }
        if (other.HasFollow) {
          Follow = other.Follow;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_nPCFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _nPCFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTemplate = input.ReadInt32(ref result.template_);
              break;
            }
            case 18: {
              global::world.Interface.Charactor.Builder subBuilder = global::world.Interface.Charactor.CreateBuilder();
              if (result.hasCharactor) {
                subBuilder.MergeFrom(Charactor);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Charactor = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasOfferexp = input.ReadInt32(ref result.offerexp_);
              break;
            }
            case 32: {
              result.hasZoom = input.ReadInt32(ref result.zoom_);
              break;
            }
            case 40: {
              result.hasFollow = input.ReadInt32(ref result.follow_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTemplate {
        get { return result.hasTemplate; }
      }
      public int Template {
        get { return result.Template; }
        set { SetTemplate(value); }
      }
      public Builder SetTemplate(int value) {
        PrepareBuilder();
        result.hasTemplate = true;
        result.template_ = value;
        return this;
      }
      public Builder ClearTemplate() {
        PrepareBuilder();
        result.hasTemplate = false;
        result.template_ = 0;
        return this;
      }
      
      public bool HasCharactor {
       get { return result.hasCharactor; }
      }
      public global::world.Interface.Charactor Charactor {
        get { return result.Charactor; }
        set { SetCharactor(value); }
      }
      public Builder SetCharactor(global::world.Interface.Charactor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCharactor = true;
        result.charactor_ = value;
        return this;
      }
      public Builder SetCharactor(global::world.Interface.Charactor.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCharactor = true;
        result.charactor_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCharactor(global::world.Interface.Charactor value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCharactor &&
            result.charactor_ != global::world.Interface.Charactor.DefaultInstance) {
            result.charactor_ = global::world.Interface.Charactor.CreateBuilder(result.charactor_).MergeFrom(value).BuildPartial();
        } else {
          result.charactor_ = value;
        }
        result.hasCharactor = true;
        return this;
      }
      public Builder ClearCharactor() {
        PrepareBuilder();
        result.hasCharactor = false;
        result.charactor_ = null;
        return this;
      }
      
      public bool HasOfferexp {
        get { return result.hasOfferexp; }
      }
      public int Offerexp {
        get { return result.Offerexp; }
        set { SetOfferexp(value); }
      }
      public Builder SetOfferexp(int value) {
        PrepareBuilder();
        result.hasOfferexp = true;
        result.offerexp_ = value;
        return this;
      }
      public Builder ClearOfferexp() {
        PrepareBuilder();
        result.hasOfferexp = false;
        result.offerexp_ = 0;
        return this;
      }
      
      public bool HasZoom {
        get { return result.hasZoom; }
      }
      public int Zoom {
        get { return result.Zoom; }
        set { SetZoom(value); }
      }
      public Builder SetZoom(int value) {
        PrepareBuilder();
        result.hasZoom = true;
        result.zoom_ = value;
        return this;
      }
      public Builder ClearZoom() {
        PrepareBuilder();
        result.hasZoom = false;
        result.zoom_ = 0;
        return this;
      }
      
      public bool HasFollow {
        get { return result.hasFollow; }
      }
      public int Follow {
        get { return result.Follow; }
        set { SetFollow(value); }
      }
      public Builder SetFollow(int value) {
        PrepareBuilder();
        result.hasFollow = true;
        result.follow_ = value;
        return this;
      }
      public Builder ClearFollow() {
        PrepareBuilder();
        result.hasFollow = false;
        result.follow_ = 0;
        return this;
      }
    }
    static NPC() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Map : pb::GeneratedMessage<Map, Map.Builder> {
    private Map() { }
    private static readonly Map defaultInstance = new Map().MakeReadOnly();
    private static readonly string[] _mapFieldNames = new string[] { "template" };
    private static readonly uint[] _mapFieldTags = new uint[] { 8 };
    public static Map DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Map DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Map ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Map__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Map, Map.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Map__FieldAccessorTable; }
    }
    
    public const int TemplateFieldNumber = 1;
    private bool hasTemplate;
    private int template_;
    public bool HasTemplate {
      get { return hasTemplate; }
    }
    public int Template {
      get { return template_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTemplate) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mapFieldNames;
      if (hasTemplate) {
        output.WriteInt32(1, field_names[0], Template);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTemplate) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Template);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Map ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Map ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Map ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Map ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Map ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Map ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Map ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Map ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Map ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Map ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Map MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Map prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Map, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Map cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Map result;
      
      private Map PrepareBuilder() {
        if (resultIsReadOnly) {
          Map original = result;
          result = new Map();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Map MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Map.Descriptor; }
      }
      
      public override Map DefaultInstanceForType {
        get { return global::world.data.Map.DefaultInstance; }
      }
      
      public override Map BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Map) {
          return MergeFrom((Map) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Map other) {
        if (other == global::world.data.Map.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTemplate) {
          Template = other.Template;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mapFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mapFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTemplate = input.ReadInt32(ref result.template_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTemplate {
        get { return result.hasTemplate; }
      }
      public int Template {
        get { return result.Template; }
        set { SetTemplate(value); }
      }
      public Builder SetTemplate(int value) {
        PrepareBuilder();
        result.hasTemplate = true;
        result.template_ = value;
        return this;
      }
      public Builder ClearTemplate() {
        PrepareBuilder();
        result.hasTemplate = false;
        result.template_ = 0;
        return this;
      }
    }
    static Map() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Mine : pb::GeneratedMessage<Mine, Mine.Builder> {
    private Mine() { }
    private static readonly Mine defaultInstance = new Mine().MakeReadOnly();
    private static readonly string[] _mineFieldNames = new string[] { "CountDown", "chanliang", "guild_id", "npcs", "template" };
    private static readonly uint[] _mineFieldTags = new uint[] { 40, 16, 26, 34, 8 };
    public static Mine DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Mine DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Mine ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Mine__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Mine, Mine.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Mine__FieldAccessorTable; }
    }
    
    public const int TemplateFieldNumber = 1;
    private bool hasTemplate;
    private int template_;
    public bool HasTemplate {
      get { return hasTemplate; }
    }
    public int Template {
      get { return template_; }
    }
    
    public const int ChanliangFieldNumber = 2;
    private bool hasChanliang;
    private int chanliang_;
    public bool HasChanliang {
      get { return hasChanliang; }
    }
    public int Chanliang {
      get { return chanliang_; }
    }
    
    public const int GuildIdFieldNumber = 3;
    private bool hasGuildId;
    private global::core.GUID guildId_;
    public bool HasGuildId {
      get { return hasGuildId; }
    }
    public global::core.GUID GuildId {
      get { return guildId_ ?? global::core.GUID.DefaultInstance; }
    }
    
    public const int NpcsFieldNumber = 4;
    private bool hasNpcs;
    private global::core.Container npcs_;
    public bool HasNpcs {
      get { return hasNpcs; }
    }
    public global::core.Container Npcs {
      get { return npcs_ ?? global::core.Container.DefaultInstance; }
    }
    
    public const int CountDownFieldNumber = 5;
    private bool hasCountDown;
    private int countDown_;
    public bool HasCountDown {
      get { return hasCountDown; }
    }
    public int CountDown {
      get { return countDown_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTemplate) return false;
        if (!hasChanliang) return false;
        if (!hasGuildId) return false;
        if (!hasNpcs) return false;
        if (!hasCountDown) return false;
        if (!GuildId.IsInitialized) return false;
        if (!Npcs.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _mineFieldNames;
      if (hasTemplate) {
        output.WriteInt32(1, field_names[4], Template);
      }
      if (hasChanliang) {
        output.WriteInt32(2, field_names[1], Chanliang);
      }
      if (hasGuildId) {
        output.WriteMessage(3, field_names[2], GuildId);
      }
      if (hasNpcs) {
        output.WriteMessage(4, field_names[3], Npcs);
      }
      if (hasCountDown) {
        output.WriteInt32(5, field_names[0], CountDown);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTemplate) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Template);
        }
        if (hasChanliang) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Chanliang);
        }
        if (hasGuildId) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, GuildId);
        }
        if (hasNpcs) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Npcs);
        }
        if (hasCountDown) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, CountDown);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Mine ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Mine ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Mine ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Mine ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Mine ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Mine ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Mine ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Mine ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Mine ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Mine ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Mine MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Mine prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Mine, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Mine cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Mine result;
      
      private Mine PrepareBuilder() {
        if (resultIsReadOnly) {
          Mine original = result;
          result = new Mine();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Mine MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Mine.Descriptor; }
      }
      
      public override Mine DefaultInstanceForType {
        get { return global::world.data.Mine.DefaultInstance; }
      }
      
      public override Mine BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Mine) {
          return MergeFrom((Mine) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Mine other) {
        if (other == global::world.data.Mine.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTemplate) {
          Template = other.Template;
        }
        if (other.HasChanliang) {
          Chanliang = other.Chanliang;
        }
        if (other.HasGuildId) {
          MergeGuildId(other.GuildId);
        }
        if (other.HasNpcs) {
          MergeNpcs(other.Npcs);
        }
        if (other.HasCountDown) {
          CountDown = other.CountDown;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_mineFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _mineFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTemplate = input.ReadInt32(ref result.template_);
              break;
            }
            case 16: {
              result.hasChanliang = input.ReadInt32(ref result.chanliang_);
              break;
            }
            case 26: {
              global::core.GUID.Builder subBuilder = global::core.GUID.CreateBuilder();
              if (result.hasGuildId) {
                subBuilder.MergeFrom(GuildId);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GuildId = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::core.Container.Builder subBuilder = global::core.Container.CreateBuilder();
              if (result.hasNpcs) {
                subBuilder.MergeFrom(Npcs);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Npcs = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasCountDown = input.ReadInt32(ref result.countDown_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTemplate {
        get { return result.hasTemplate; }
      }
      public int Template {
        get { return result.Template; }
        set { SetTemplate(value); }
      }
      public Builder SetTemplate(int value) {
        PrepareBuilder();
        result.hasTemplate = true;
        result.template_ = value;
        return this;
      }
      public Builder ClearTemplate() {
        PrepareBuilder();
        result.hasTemplate = false;
        result.template_ = 0;
        return this;
      }
      
      public bool HasChanliang {
        get { return result.hasChanliang; }
      }
      public int Chanliang {
        get { return result.Chanliang; }
        set { SetChanliang(value); }
      }
      public Builder SetChanliang(int value) {
        PrepareBuilder();
        result.hasChanliang = true;
        result.chanliang_ = value;
        return this;
      }
      public Builder ClearChanliang() {
        PrepareBuilder();
        result.hasChanliang = false;
        result.chanliang_ = 0;
        return this;
      }
      
      public bool HasGuildId {
       get { return result.hasGuildId; }
      }
      public global::core.GUID GuildId {
        get { return result.GuildId; }
        set { SetGuildId(value); }
      }
      public Builder SetGuildId(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = value;
        return this;
      }
      public Builder SetGuildId(global::core.GUID.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGuildId = true;
        result.guildId_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGuildId(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGuildId &&
            result.guildId_ != global::core.GUID.DefaultInstance) {
            result.guildId_ = global::core.GUID.CreateBuilder(result.guildId_).MergeFrom(value).BuildPartial();
        } else {
          result.guildId_ = value;
        }
        result.hasGuildId = true;
        return this;
      }
      public Builder ClearGuildId() {
        PrepareBuilder();
        result.hasGuildId = false;
        result.guildId_ = null;
        return this;
      }
      
      public bool HasNpcs {
       get { return result.hasNpcs; }
      }
      public global::core.Container Npcs {
        get { return result.Npcs; }
        set { SetNpcs(value); }
      }
      public Builder SetNpcs(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNpcs = true;
        result.npcs_ = value;
        return this;
      }
      public Builder SetNpcs(global::core.Container.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasNpcs = true;
        result.npcs_ = builderForValue.Build();
        return this;
      }
      public Builder MergeNpcs(global::core.Container value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasNpcs &&
            result.npcs_ != global::core.Container.DefaultInstance) {
            result.npcs_ = global::core.Container.CreateBuilder(result.npcs_).MergeFrom(value).BuildPartial();
        } else {
          result.npcs_ = value;
        }
        result.hasNpcs = true;
        return this;
      }
      public Builder ClearNpcs() {
        PrepareBuilder();
        result.hasNpcs = false;
        result.npcs_ = null;
        return this;
      }
      
      public bool HasCountDown {
        get { return result.hasCountDown; }
      }
      public int CountDown {
        get { return result.CountDown; }
        set { SetCountDown(value); }
      }
      public Builder SetCountDown(int value) {
        PrepareBuilder();
        result.hasCountDown = true;
        result.countDown_ = value;
        return this;
      }
      public Builder ClearCountDown() {
        PrepareBuilder();
        result.hasCountDown = false;
        result.countDown_ = 0;
        return this;
      }
    }
    static Mine() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class SkillInstance : pb::GeneratedMessage<SkillInstance, SkillInstance.Builder> {
    private SkillInstance() { }
    private static readonly SkillInstance defaultInstance = new SkillInstance().MakeReadOnly();
    private static readonly string[] _skillInstanceFieldNames = new string[] { "caster", "last_time", "pos", "result_times", "skill_id", "target" };
    private static readonly uint[] _skillInstanceFieldTags = new uint[] { 18, 40, 34, 48, 8, 26 };
    public static SkillInstance DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override SkillInstance DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override SkillInstance ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_SkillInstance__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<SkillInstance, SkillInstance.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_SkillInstance__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum State {
        START = 0,
        SINGING = 1,
        CASTING = 2,
        FLYING = 3,
        LATENT = 4,
        RESULT = 5,
      }
      
    }
    #endregion
    
    public const int SkillIdFieldNumber = 1;
    private bool hasSkillId;
    private int skillId_;
    public bool HasSkillId {
      get { return hasSkillId; }
    }
    public int SkillId {
      get { return skillId_; }
    }
    
    public const int CasterFieldNumber = 2;
    private bool hasCaster;
    private global::core.GUID caster_;
    public bool HasCaster {
      get { return hasCaster; }
    }
    public global::core.GUID Caster {
      get { return caster_ ?? global::core.GUID.DefaultInstance; }
    }
    
    public const int TargetFieldNumber = 3;
    private bool hasTarget;
    private global::core.GUID target_;
    public bool HasTarget {
      get { return hasTarget; }
    }
    public global::core.GUID Target {
      get { return target_ ?? global::core.GUID.DefaultInstance; }
    }
    
    public const int PosFieldNumber = 4;
    private bool hasPos;
    private global::core.Position pos_;
    public bool HasPos {
      get { return hasPos; }
    }
    public global::core.Position Pos {
      get { return pos_ ?? global::core.Position.DefaultInstance; }
    }
    
    public const int LastTimeFieldNumber = 5;
    private bool hasLastTime;
    private uint lastTime_;
    public bool HasLastTime {
      get { return hasLastTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint LastTime {
      get { return lastTime_; }
    }
    
    public const int ResultTimesFieldNumber = 6;
    private bool hasResultTimes;
    private uint resultTimes_;
    public bool HasResultTimes {
      get { return hasResultTimes; }
    }
    [global::System.CLSCompliant(false)]
    public uint ResultTimes {
      get { return resultTimes_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasSkillId) return false;
        if (!hasCaster) return false;
        if (!hasTarget) return false;
        if (!hasPos) return false;
        if (!hasLastTime) return false;
        if (!hasResultTimes) return false;
        if (!Caster.IsInitialized) return false;
        if (!Target.IsInitialized) return false;
        if (!Pos.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _skillInstanceFieldNames;
      if (hasSkillId) {
        output.WriteInt32(1, field_names[4], SkillId);
      }
      if (hasCaster) {
        output.WriteMessage(2, field_names[0], Caster);
      }
      if (hasTarget) {
        output.WriteMessage(3, field_names[5], Target);
      }
      if (hasPos) {
        output.WriteMessage(4, field_names[2], Pos);
      }
      if (hasLastTime) {
        output.WriteUInt32(5, field_names[1], LastTime);
      }
      if (hasResultTimes) {
        output.WriteUInt32(6, field_names[3], ResultTimes);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSkillId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, SkillId);
        }
        if (hasCaster) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, Caster);
        }
        if (hasTarget) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, Target);
        }
        if (hasPos) {
          size += pb::CodedOutputStream.ComputeMessageSize(4, Pos);
        }
        if (hasLastTime) {
          size += pb::CodedOutputStream.ComputeUInt32Size(5, LastTime);
        }
        if (hasResultTimes) {
          size += pb::CodedOutputStream.ComputeUInt32Size(6, ResultTimes);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static SkillInstance ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillInstance ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillInstance ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static SkillInstance ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static SkillInstance ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillInstance ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static SkillInstance ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static SkillInstance ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static SkillInstance ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static SkillInstance ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private SkillInstance MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(SkillInstance prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<SkillInstance, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(SkillInstance cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private SkillInstance result;
      
      private SkillInstance PrepareBuilder() {
        if (resultIsReadOnly) {
          SkillInstance original = result;
          result = new SkillInstance();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override SkillInstance MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.SkillInstance.Descriptor; }
      }
      
      public override SkillInstance DefaultInstanceForType {
        get { return global::world.data.SkillInstance.DefaultInstance; }
      }
      
      public override SkillInstance BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is SkillInstance) {
          return MergeFrom((SkillInstance) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(SkillInstance other) {
        if (other == global::world.data.SkillInstance.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSkillId) {
          SkillId = other.SkillId;
        }
        if (other.HasCaster) {
          MergeCaster(other.Caster);
        }
        if (other.HasTarget) {
          MergeTarget(other.Target);
        }
        if (other.HasPos) {
          MergePos(other.Pos);
        }
        if (other.HasLastTime) {
          LastTime = other.LastTime;
        }
        if (other.HasResultTimes) {
          ResultTimes = other.ResultTimes;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_skillInstanceFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _skillInstanceFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSkillId = input.ReadInt32(ref result.skillId_);
              break;
            }
            case 18: {
              global::core.GUID.Builder subBuilder = global::core.GUID.CreateBuilder();
              if (result.hasCaster) {
                subBuilder.MergeFrom(Caster);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Caster = subBuilder.BuildPartial();
              break;
            }
            case 26: {
              global::core.GUID.Builder subBuilder = global::core.GUID.CreateBuilder();
              if (result.hasTarget) {
                subBuilder.MergeFrom(Target);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Target = subBuilder.BuildPartial();
              break;
            }
            case 34: {
              global::core.Position.Builder subBuilder = global::core.Position.CreateBuilder();
              if (result.hasPos) {
                subBuilder.MergeFrom(Pos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pos = subBuilder.BuildPartial();
              break;
            }
            case 40: {
              result.hasLastTime = input.ReadUInt32(ref result.lastTime_);
              break;
            }
            case 48: {
              result.hasResultTimes = input.ReadUInt32(ref result.resultTimes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasSkillId {
        get { return result.hasSkillId; }
      }
      public int SkillId {
        get { return result.SkillId; }
        set { SetSkillId(value); }
      }
      public Builder SetSkillId(int value) {
        PrepareBuilder();
        result.hasSkillId = true;
        result.skillId_ = value;
        return this;
      }
      public Builder ClearSkillId() {
        PrepareBuilder();
        result.hasSkillId = false;
        result.skillId_ = 0;
        return this;
      }
      
      public bool HasCaster {
       get { return result.hasCaster; }
      }
      public global::core.GUID Caster {
        get { return result.Caster; }
        set { SetCaster(value); }
      }
      public Builder SetCaster(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCaster = true;
        result.caster_ = value;
        return this;
      }
      public Builder SetCaster(global::core.GUID.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCaster = true;
        result.caster_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCaster(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCaster &&
            result.caster_ != global::core.GUID.DefaultInstance) {
            result.caster_ = global::core.GUID.CreateBuilder(result.caster_).MergeFrom(value).BuildPartial();
        } else {
          result.caster_ = value;
        }
        result.hasCaster = true;
        return this;
      }
      public Builder ClearCaster() {
        PrepareBuilder();
        result.hasCaster = false;
        result.caster_ = null;
        return this;
      }
      
      public bool HasTarget {
       get { return result.hasTarget; }
      }
      public global::core.GUID Target {
        get { return result.Target; }
        set { SetTarget(value); }
      }
      public Builder SetTarget(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = value;
        return this;
      }
      public Builder SetTarget(global::core.GUID.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasTarget = true;
        result.target_ = builderForValue.Build();
        return this;
      }
      public Builder MergeTarget(global::core.GUID value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasTarget &&
            result.target_ != global::core.GUID.DefaultInstance) {
            result.target_ = global::core.GUID.CreateBuilder(result.target_).MergeFrom(value).BuildPartial();
        } else {
          result.target_ = value;
        }
        result.hasTarget = true;
        return this;
      }
      public Builder ClearTarget() {
        PrepareBuilder();
        result.hasTarget = false;
        result.target_ = null;
        return this;
      }
      
      public bool HasPos {
       get { return result.hasPos; }
      }
      public global::core.Position Pos {
        get { return result.Pos; }
        set { SetPos(value); }
      }
      public Builder SetPos(global::core.Position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = value;
        return this;
      }
      public Builder SetPos(global::core.Position.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = builderForValue.Build();
        return this;
      }
      public Builder MergePos(global::core.Position value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPos &&
            result.pos_ != global::core.Position.DefaultInstance) {
            result.pos_ = global::core.Position.CreateBuilder(result.pos_).MergeFrom(value).BuildPartial();
        } else {
          result.pos_ = value;
        }
        result.hasPos = true;
        return this;
      }
      public Builder ClearPos() {
        PrepareBuilder();
        result.hasPos = false;
        result.pos_ = null;
        return this;
      }
      
      public bool HasLastTime {
        get { return result.hasLastTime; }
      }
      [global::System.CLSCompliant(false)]
      public uint LastTime {
        get { return result.LastTime; }
        set { SetLastTime(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetLastTime(uint value) {
        PrepareBuilder();
        result.hasLastTime = true;
        result.lastTime_ = value;
        return this;
      }
      public Builder ClearLastTime() {
        PrepareBuilder();
        result.hasLastTime = false;
        result.lastTime_ = 0;
        return this;
      }
      
      public bool HasResultTimes {
        get { return result.hasResultTimes; }
      }
      [global::System.CLSCompliant(false)]
      public uint ResultTimes {
        get { return result.ResultTimes; }
        set { SetResultTimes(value); }
      }
      [global::System.CLSCompliant(false)]
      public Builder SetResultTimes(uint value) {
        PrepareBuilder();
        result.hasResultTimes = true;
        result.resultTimes_ = value;
        return this;
      }
      public Builder ClearResultTimes() {
        PrepareBuilder();
        result.hasResultTimes = false;
        result.resultTimes_ = 0;
        return this;
      }
    }
    static SkillInstance() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Consortia : pb::GeneratedMessage<Consortia, Consortia.Builder> {
    private Consortia() { }
    private static readonly Consortia defaultInstance = new Consortia().MakeReadOnly();
    private static readonly string[] _consortiaFieldNames = new string[] { "bulletin", "consume", "depot", "funds", "level", "members", "name" };
    private static readonly uint[] _consortiaFieldTags = new uint[] { 42, 32, 58, 24, 16, 50, 10 };
    public static Consortia DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Consortia DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Consortia ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.data.WorldData.internal__static_world_data_Consortia__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Consortia, Consortia.Builder> InternalFieldAccessors {
      get { return global::world.data.WorldData.internal__static_world_data_Consortia__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class MineStone : pb::GeneratedMessage<MineStone, MineStone.Builder> {
        private MineStone() { }
        private static readonly MineStone defaultInstance = new MineStone().MakeReadOnly();
        private static readonly string[] _mineStoneFieldNames = new string[] { "cnt", "id", "max", "rate" };
        private static readonly uint[] _mineStoneFieldTags = new uint[] { 16, 8, 24, 32 };
        public static MineStone DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override MineStone DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override MineStone ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::world.data.WorldData.internal__static_world_data_Consortia_MineStone__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<MineStone, MineStone.Builder> InternalFieldAccessors {
          get { return global::world.data.WorldData.internal__static_world_data_Consortia_MineStone__FieldAccessorTable; }
        }
        
        public const int IdFieldNumber = 1;
        private bool hasId;
        private int id_;
        public bool HasId {
          get { return hasId; }
        }
        public int Id {
          get { return id_; }
        }
        
        public const int CntFieldNumber = 2;
        private bool hasCnt;
        private int cnt_;
        public bool HasCnt {
          get { return hasCnt; }
        }
        public int Cnt {
          get { return cnt_; }
        }
        
        public const int MaxFieldNumber = 3;
        private bool hasMax;
        private int max_;
        public bool HasMax {
          get { return hasMax; }
        }
        public int Max {
          get { return max_; }
        }
        
        public const int RateFieldNumber = 4;
        private bool hasRate;
        private int rate_;
        public bool HasRate {
          get { return hasRate; }
        }
        public int Rate {
          get { return rate_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasId) return false;
            if (!hasCnt) return false;
            if (!hasMax) return false;
            if (!hasRate) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _mineStoneFieldNames;
          if (hasId) {
            output.WriteInt32(1, field_names[1], Id);
          }
          if (hasCnt) {
            output.WriteInt32(2, field_names[0], Cnt);
          }
          if (hasMax) {
            output.WriteInt32(3, field_names[2], Max);
          }
          if (hasRate) {
            output.WriteInt32(4, field_names[3], Rate);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasId) {
              size += pb::CodedOutputStream.ComputeInt32Size(1, Id);
            }
            if (hasCnt) {
              size += pb::CodedOutputStream.ComputeInt32Size(2, Cnt);
            }
            if (hasMax) {
              size += pb::CodedOutputStream.ComputeInt32Size(3, Max);
            }
            if (hasRate) {
              size += pb::CodedOutputStream.ComputeInt32Size(4, Rate);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static MineStone ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MineStone ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MineStone ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static MineStone ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static MineStone ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MineStone ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static MineStone ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static MineStone ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static MineStone ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static MineStone ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private MineStone MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(MineStone prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<MineStone, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(MineStone cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private MineStone result;
          
          private MineStone PrepareBuilder() {
            if (resultIsReadOnly) {
              MineStone original = result;
              result = new MineStone();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override MineStone MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::world.data.Consortia.Types.MineStone.Descriptor; }
          }
          
          public override MineStone DefaultInstanceForType {
            get { return global::world.data.Consortia.Types.MineStone.DefaultInstance; }
          }
          
          public override MineStone BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is MineStone) {
              return MergeFrom((MineStone) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(MineStone other) {
            if (other == global::world.data.Consortia.Types.MineStone.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasCnt) {
              Cnt = other.Cnt;
            }
            if (other.HasMax) {
              Max = other.Max;
            }
            if (other.HasRate) {
              Rate = other.Rate;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_mineStoneFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _mineStoneFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 8: {
                  result.hasId = input.ReadInt32(ref result.id_);
                  break;
                }
                case 16: {
                  result.hasCnt = input.ReadInt32(ref result.cnt_);
                  break;
                }
                case 24: {
                  result.hasMax = input.ReadInt32(ref result.max_);
                  break;
                }
                case 32: {
                  result.hasRate = input.ReadInt32(ref result.rate_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasId {
            get { return result.hasId; }
          }
          public int Id {
            get { return result.Id; }
            set { SetId(value); }
          }
          public Builder SetId(int value) {
            PrepareBuilder();
            result.hasId = true;
            result.id_ = value;
            return this;
          }
          public Builder ClearId() {
            PrepareBuilder();
            result.hasId = false;
            result.id_ = 0;
            return this;
          }
          
          public bool HasCnt {
            get { return result.hasCnt; }
          }
          public int Cnt {
            get { return result.Cnt; }
            set { SetCnt(value); }
          }
          public Builder SetCnt(int value) {
            PrepareBuilder();
            result.hasCnt = true;
            result.cnt_ = value;
            return this;
          }
          public Builder ClearCnt() {
            PrepareBuilder();
            result.hasCnt = false;
            result.cnt_ = 0;
            return this;
          }
          
          public bool HasMax {
            get { return result.hasMax; }
          }
          public int Max {
            get { return result.Max; }
            set { SetMax(value); }
          }
          public Builder SetMax(int value) {
            PrepareBuilder();
            result.hasMax = true;
            result.max_ = value;
            return this;
          }
          public Builder ClearMax() {
            PrepareBuilder();
            result.hasMax = false;
            result.max_ = 0;
            return this;
          }
          
          public bool HasRate {
            get { return result.hasRate; }
          }
          public int Rate {
            get { return result.Rate; }
            set { SetRate(value); }
          }
          public Builder SetRate(int value) {
            PrepareBuilder();
            result.hasRate = true;
            result.rate_ = value;
            return this;
          }
          public Builder ClearRate() {
            PrepareBuilder();
            result.hasRate = false;
            result.rate_ = 0;
            return this;
          }
        }
        static MineStone() {
          object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
        }
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public sealed partial class Member : pb::GeneratedMessage<Member, Member.Builder> {
        private Member() { }
        private static readonly Member defaultInstance = new Member().MakeReadOnly();
        private static readonly string[] _memberFieldNames = new string[] { "duty", "offer", "player" };
        private static readonly uint[] _memberFieldTags = new uint[] { 16, 24, 10 };
        public static Member DefaultInstance {
          get { return defaultInstance; }
        }
        
        public override Member DefaultInstanceForType {
          get { return DefaultInstance; }
        }
        
        protected override Member ThisMessage {
          get { return this; }
        }
        
        public static pbd::MessageDescriptor Descriptor {
          get { return global::world.data.WorldData.internal__static_world_data_Consortia_Member__Descriptor; }
        }
        
        protected override pb::FieldAccess.FieldAccessorTable<Member, Member.Builder> InternalFieldAccessors {
          get { return global::world.data.WorldData.internal__static_world_data_Consortia_Member__FieldAccessorTable; }
        }
        
        #region Nested types
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public static class Types {
          [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
          [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
          public enum Duty {
            Leader = 0,
            Second = 1,
            Manager = 2,
            Major = 3,
            Normal = 4,
          }
          
        }
        #endregion
        
        public const int PlayerFieldNumber = 1;
        private bool hasPlayer;
        private global::core.GUID player_;
        public bool HasPlayer {
          get { return hasPlayer; }
        }
        public global::core.GUID Player {
          get { return player_ ?? global::core.GUID.DefaultInstance; }
        }
        
        public const int DutyFieldNumber = 2;
        private bool hasDuty;
        private global::world.data.Consortia.Types.Member.Types.Duty duty_ = global::world.data.Consortia.Types.Member.Types.Duty.Leader;
        public bool HasDuty {
          get { return hasDuty; }
        }
        public global::world.data.Consortia.Types.Member.Types.Duty Duty {
          get { return duty_; }
        }
        
        public const int OfferFieldNumber = 3;
        private bool hasOffer;
        private int offer_;
        public bool HasOffer {
          get { return hasOffer; }
        }
        public int Offer {
          get { return offer_; }
        }
        
        public override bool IsInitialized {
          get {
            if (!hasPlayer) return false;
            if (!hasDuty) return false;
            if (!hasOffer) return false;
            if (!Player.IsInitialized) return false;
            return true;
          }
        }
        
        public override void WriteTo(pb::ICodedOutputStream output) {
          int size = SerializedSize;
          string[] field_names = _memberFieldNames;
          if (hasPlayer) {
            output.WriteMessage(1, field_names[2], Player);
          }
          if (hasDuty) {
            output.WriteEnum(2, field_names[0], (int) Duty, Duty);
          }
          if (hasOffer) {
            output.WriteInt32(3, field_names[1], Offer);
          }
          UnknownFields.WriteTo(output);
        }
        
        private int memoizedSerializedSize = -1;
        public override int SerializedSize {
          get {
            int size = memoizedSerializedSize;
            if (size != -1) return size;
            
            size = 0;
            if (hasPlayer) {
              size += pb::CodedOutputStream.ComputeMessageSize(1, Player);
            }
            if (hasDuty) {
              size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Duty);
            }
            if (hasOffer) {
              size += pb::CodedOutputStream.ComputeInt32Size(3, Offer);
            }
            size += UnknownFields.SerializedSize;
            memoizedSerializedSize = size;
            return size;
          }
        }
        
        public static Member ParseFrom(pb::ByteString data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Member ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Member ParseFrom(byte[] data) {
          return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
        }
        public static Member ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
        }
        public static Member ParseFrom(global::System.IO.Stream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Member ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        public static Member ParseDelimitedFrom(global::System.IO.Stream input) {
          return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
        }
        public static Member ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
          return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
        }
        public static Member ParseFrom(pb::ICodedInputStream input) {
          return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
        }
        public static Member ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
        }
        private Member MakeReadOnly() {
          return this;
        }
        
        public static Builder CreateBuilder() { return new Builder(); }
        public override Builder ToBuilder() { return CreateBuilder(this); }
        public override Builder CreateBuilderForType() { return new Builder(); }
        public static Builder CreateBuilder(Member prototype) {
          return new Builder(prototype);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
        public sealed partial class Builder : pb::GeneratedBuilder<Member, Builder> {
          protected override Builder ThisBuilder {
            get { return this; }
          }
          public Builder() {
            result = DefaultInstance;
            resultIsReadOnly = true;
          }
          internal Builder(Member cloneFrom) {
            result = cloneFrom;
            resultIsReadOnly = true;
          }
          
          private bool resultIsReadOnly;
          private Member result;
          
          private Member PrepareBuilder() {
            if (resultIsReadOnly) {
              Member original = result;
              result = new Member();
              resultIsReadOnly = false;
              MergeFrom(original);
            }
            return result;
          }
          
          public override bool IsInitialized {
            get { return result.IsInitialized; }
          }
          
          protected override Member MessageBeingBuilt {
            get { return PrepareBuilder(); }
          }
          
          public override Builder Clear() {
            result = DefaultInstance;
            resultIsReadOnly = true;
            return this;
          }
          
          public override Builder Clone() {
            if (resultIsReadOnly) {
              return new Builder(result);
            } else {
              return new Builder().MergeFrom(result);
            }
          }
          
          public override pbd::MessageDescriptor DescriptorForType {
            get { return global::world.data.Consortia.Types.Member.Descriptor; }
          }
          
          public override Member DefaultInstanceForType {
            get { return global::world.data.Consortia.Types.Member.DefaultInstance; }
          }
          
          public override Member BuildPartial() {
            if (resultIsReadOnly) {
              return result;
            }
            resultIsReadOnly = true;
            return result.MakeReadOnly();
          }
          
          public override Builder MergeFrom(pb::IMessage other) {
            if (other is Member) {
              return MergeFrom((Member) other);
            } else {
              base.MergeFrom(other);
              return this;
            }
          }
          
          public override Builder MergeFrom(Member other) {
            if (other == global::world.data.Consortia.Types.Member.DefaultInstance) return this;
            PrepareBuilder();
            if (other.HasPlayer) {
              MergePlayer(other.Player);
            }
            if (other.HasDuty) {
              Duty = other.Duty;
            }
            if (other.HasOffer) {
              Offer = other.Offer;
            }
            this.MergeUnknownFields(other.UnknownFields);
            return this;
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input) {
            return MergeFrom(input, pb::ExtensionRegistry.Empty);
          }
          
          public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            PrepareBuilder();
            pb::UnknownFieldSet.Builder unknownFields = null;
            uint tag;
            string field_name;
            while (input.ReadTag(out tag, out field_name)) {
              if(tag == 0 && field_name != null) {
                int field_ordinal = global::System.Array.BinarySearch(_memberFieldNames, field_name, global::System.StringComparer.Ordinal);
                if(field_ordinal >= 0)
                  tag = _memberFieldTags[field_ordinal];
                else {
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  continue;
                }
              }
              switch (tag) {
                case 0: {
                  throw pb::InvalidProtocolBufferException.InvalidTag();
                }
                default: {
                  if (pb::WireFormat.IsEndGroupTag(tag)) {
                    if (unknownFields != null) {
                      this.UnknownFields = unknownFields.Build();
                    }
                    return this;
                  }
                  if (unknownFields == null) {
                    unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                  }
                  ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                  break;
                }
                case 10: {
                  global::core.GUID.Builder subBuilder = global::core.GUID.CreateBuilder();
                  if (result.hasPlayer) {
                    subBuilder.MergeFrom(Player);
                  }
                  input.ReadMessage(subBuilder, extensionRegistry);
                  Player = subBuilder.BuildPartial();
                  break;
                }
                case 16: {
                  object unknown;
                  if(input.ReadEnum(ref result.duty_, out unknown)) {
                    result.hasDuty = true;
                  } else if(unknown is int) {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    unknownFields.MergeVarintField(2, (ulong)(int)unknown);
                  }
                  break;
                }
                case 24: {
                  result.hasOffer = input.ReadInt32(ref result.offer_);
                  break;
                }
              }
            }
            
            if (unknownFields != null) {
              this.UnknownFields = unknownFields.Build();
            }
            return this;
          }
          
          
          public bool HasPlayer {
           get { return result.hasPlayer; }
          }
          public global::core.GUID Player {
            get { return result.Player; }
            set { SetPlayer(value); }
          }
          public Builder SetPlayer(global::core.GUID value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            result.hasPlayer = true;
            result.player_ = value;
            return this;
          }
          public Builder SetPlayer(global::core.GUID.Builder builderForValue) {
            pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
            PrepareBuilder();
            result.hasPlayer = true;
            result.player_ = builderForValue.Build();
            return this;
          }
          public Builder MergePlayer(global::core.GUID value) {
            pb::ThrowHelper.ThrowIfNull(value, "value");
            PrepareBuilder();
            if (result.hasPlayer &&
                result.player_ != global::core.GUID.DefaultInstance) {
                result.player_ = global::core.GUID.CreateBuilder(result.player_).MergeFrom(value).BuildPartial();
            } else {
              result.player_ = value;
            }
            result.hasPlayer = true;
            return this;
          }
          public Builder ClearPlayer() {
            PrepareBuilder();
            result.hasPlayer = false;
            result.player_ = null;
            return this;
          }
          
          public bool HasDuty {
           get { return result.hasDuty; }
          }
          public global::world.data.Consortia.Types.Member.Types.Duty Duty {
            get { return result.Duty; }
            set { SetDuty(value); }
          }
          public Builder SetDuty(global::world.data.Consortia.Types.Member.Types.Duty value) {
            PrepareBuilder();
            result.hasDuty = true;
            result.duty_ = value;
            return this;
          }
          public Builder ClearDuty() {
            PrepareBuilder();
            result.hasDuty = false;
            result.duty_ = global::world.data.Consortia.Types.Member.Types.Duty.Leader;
            return this;
          }
          
          public bool HasOffer {
            get { return result.hasOffer; }
          }
          public int Offer {
            get { return result.Offer; }
            set { SetOffer(value); }
          }
          public Builder SetOffer(int value) {
            PrepareBuilder();
            result.hasOffer = true;
            result.offer_ = value;
            return this;
          }
          public Builder ClearOffer() {
            PrepareBuilder();
            result.hasOffer = false;
            result.offer_ = 0;
            return this;
          }
        }
        static Member() {
          object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
        }
      }
      
    }
    #endregion
    
    public const int NameFieldNumber = 1;
    private bool hasName;
    private string name_ = "";
    public bool HasName {
      get { return hasName; }
    }
    public string Name {
      get { return name_; }
    }
    
    public const int LevelFieldNumber = 2;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int FundsFieldNumber = 3;
    private bool hasFunds;
    private int funds_;
    public bool HasFunds {
      get { return hasFunds; }
    }
    public int Funds {
      get { return funds_; }
    }
    
    public const int ConsumeFieldNumber = 4;
    private bool hasConsume;
    private int consume_;
    public bool HasConsume {
      get { return hasConsume; }
    }
    public int Consume {
      get { return consume_; }
    }
    
    public const int BulletinFieldNumber = 5;
    private bool hasBulletin;
    private string bulletin_ = "";
    public bool HasBulletin {
      get { return hasBulletin; }
    }
    public string Bulletin {
      get { return bulletin_; }
    }
    
    public const int MembersFieldNumber = 6;
    private pbc::PopsicleList<global::world.data.Consortia.Types.Member> members_ = new pbc::PopsicleList<global::world.data.Consortia.Types.Member>();
    public scg::IList<global::world.data.Consortia.Types.Member> MembersList {
      get { return members_; }
    }
    public int MembersCount {
      get { return members_.Count; }
    }
    public global::world.data.Consortia.Types.Member GetMembers(int index) {
      return members_[index];
    }
    
    public const int DepotFieldNumber = 7;
    private pbc::PopsicleList<global::world.data.Consortia.Types.MineStone> depot_ = new pbc::PopsicleList<global::world.data.Consortia.Types.MineStone>();
    public scg::IList<global::world.data.Consortia.Types.MineStone> DepotList {
      get { return depot_; }
    }
    public int DepotCount {
      get { return depot_.Count; }
    }
    public global::world.data.Consortia.Types.MineStone GetDepot(int index) {
      return depot_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasName) return false;
        if (!hasLevel) return false;
        if (!hasFunds) return false;
        if (!hasConsume) return false;
        if (!hasBulletin) return false;
        foreach (global::world.data.Consortia.Types.Member element in MembersList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::world.data.Consortia.Types.MineStone element in DepotList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _consortiaFieldNames;
      if (hasName) {
        output.WriteString(1, field_names[6], Name);
      }
      if (hasLevel) {
        output.WriteInt32(2, field_names[4], Level);
      }
      if (hasFunds) {
        output.WriteInt32(3, field_names[3], Funds);
      }
      if (hasConsume) {
        output.WriteInt32(4, field_names[1], Consume);
      }
      if (hasBulletin) {
        output.WriteString(5, field_names[0], Bulletin);
      }
      if (members_.Count > 0) {
        output.WriteMessageArray(6, field_names[5], members_);
      }
      if (depot_.Count > 0) {
        output.WriteMessageArray(7, field_names[2], depot_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasName) {
          size += pb::CodedOutputStream.ComputeStringSize(1, Name);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Level);
        }
        if (hasFunds) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Funds);
        }
        if (hasConsume) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Consume);
        }
        if (hasBulletin) {
          size += pb::CodedOutputStream.ComputeStringSize(5, Bulletin);
        }
        foreach (global::world.data.Consortia.Types.Member element in MembersList) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, element);
        }
        foreach (global::world.data.Consortia.Types.MineStone element in DepotList) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Consortia ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Consortia ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Consortia ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Consortia ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Consortia ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Consortia ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Consortia ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Consortia ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Consortia ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Consortia ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Consortia MakeReadOnly() {
      members_.MakeReadOnly();
      depot_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Consortia prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Consortia, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Consortia cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Consortia result;
      
      private Consortia PrepareBuilder() {
        if (resultIsReadOnly) {
          Consortia original = result;
          result = new Consortia();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Consortia MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.data.Consortia.Descriptor; }
      }
      
      public override Consortia DefaultInstanceForType {
        get { return global::world.data.Consortia.DefaultInstance; }
      }
      
      public override Consortia BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Consortia) {
          return MergeFrom((Consortia) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Consortia other) {
        if (other == global::world.data.Consortia.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasName) {
          Name = other.Name;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasFunds) {
          Funds = other.Funds;
        }
        if (other.HasConsume) {
          Consume = other.Consume;
        }
        if (other.HasBulletin) {
          Bulletin = other.Bulletin;
        }
        if (other.members_.Count != 0) {
          result.members_.Add(other.members_);
        }
        if (other.depot_.Count != 0) {
          result.depot_.Add(other.depot_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_consortiaFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _consortiaFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasName = input.ReadString(ref result.name_);
              break;
            }
            case 16: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 24: {
              result.hasFunds = input.ReadInt32(ref result.funds_);
              break;
            }
            case 32: {
              result.hasConsume = input.ReadInt32(ref result.consume_);
              break;
            }
            case 42: {
              result.hasBulletin = input.ReadString(ref result.bulletin_);
              break;
            }
            case 50: {
              input.ReadMessageArray(tag, field_name, result.members_, global::world.data.Consortia.Types.Member.DefaultInstance, extensionRegistry);
              break;
            }
            case 58: {
              input.ReadMessageArray(tag, field_name, result.depot_, global::world.data.Consortia.Types.MineStone.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasName {
        get { return result.hasName; }
      }
      public string Name {
        get { return result.Name; }
        set { SetName(value); }
      }
      public Builder SetName(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasName = true;
        result.name_ = value;
        return this;
      }
      public Builder ClearName() {
        PrepareBuilder();
        result.hasName = false;
        result.name_ = "";
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasFunds {
        get { return result.hasFunds; }
      }
      public int Funds {
        get { return result.Funds; }
        set { SetFunds(value); }
      }
      public Builder SetFunds(int value) {
        PrepareBuilder();
        result.hasFunds = true;
        result.funds_ = value;
        return this;
      }
      public Builder ClearFunds() {
        PrepareBuilder();
        result.hasFunds = false;
        result.funds_ = 0;
        return this;
      }
      
      public bool HasConsume {
        get { return result.hasConsume; }
      }
      public int Consume {
        get { return result.Consume; }
        set { SetConsume(value); }
      }
      public Builder SetConsume(int value) {
        PrepareBuilder();
        result.hasConsume = true;
        result.consume_ = value;
        return this;
      }
      public Builder ClearConsume() {
        PrepareBuilder();
        result.hasConsume = false;
        result.consume_ = 0;
        return this;
      }
      
      public bool HasBulletin {
        get { return result.hasBulletin; }
      }
      public string Bulletin {
        get { return result.Bulletin; }
        set { SetBulletin(value); }
      }
      public Builder SetBulletin(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBulletin = true;
        result.bulletin_ = value;
        return this;
      }
      public Builder ClearBulletin() {
        PrepareBuilder();
        result.hasBulletin = false;
        result.bulletin_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::world.data.Consortia.Types.Member> MembersList {
        get { return PrepareBuilder().members_; }
      }
      public int MembersCount {
        get { return result.MembersCount; }
      }
      public global::world.data.Consortia.Types.Member GetMembers(int index) {
        return result.GetMembers(index);
      }
      public Builder SetMembers(int index, global::world.data.Consortia.Types.Member value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_[index] = value;
        return this;
      }
      public Builder SetMembers(int index, global::world.data.Consortia.Types.Member.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMembers(global::world.data.Consortia.Types.Member value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.members_.Add(value);
        return this;
      }
      public Builder AddMembers(global::world.data.Consortia.Types.Member.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.members_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMembers(scg::IEnumerable<global::world.data.Consortia.Types.Member> values) {
        PrepareBuilder();
        result.members_.Add(values);
        return this;
      }
      public Builder ClearMembers() {
        PrepareBuilder();
        result.members_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::world.data.Consortia.Types.MineStone> DepotList {
        get { return PrepareBuilder().depot_; }
      }
      public int DepotCount {
        get { return result.DepotCount; }
      }
      public global::world.data.Consortia.Types.MineStone GetDepot(int index) {
        return result.GetDepot(index);
      }
      public Builder SetDepot(int index, global::world.data.Consortia.Types.MineStone value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.depot_[index] = value;
        return this;
      }
      public Builder SetDepot(int index, global::world.data.Consortia.Types.MineStone.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.depot_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddDepot(global::world.data.Consortia.Types.MineStone value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.depot_.Add(value);
        return this;
      }
      public Builder AddDepot(global::world.data.Consortia.Types.MineStone.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.depot_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeDepot(scg::IEnumerable<global::world.data.Consortia.Types.MineStone> values) {
        PrepareBuilder();
        result.depot_.Add(values);
        return this;
      }
      public Builder ClearDepot() {
        PrepareBuilder();
        result.depot_.Clear();
        return this;
      }
    }
    static Consortia() {
      object.ReferenceEquals(global::world.data.WorldData.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
