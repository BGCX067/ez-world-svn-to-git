// Generated by ProtoGen, Version=2.4.1.473, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace world.Interface {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public static partial class WorldInterface {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_world_Interface_Item__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.Interface.Item, global::world.Interface.Item.Builder> internal__static_world_Interface_Item__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_world_Interface_Charactor__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::world.Interface.Charactor, global::world.Interface.Charactor.Builder> internal__static_world_Interface_Charactor__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static WorldInterface() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          "ChV3b3JsZF9pbnRlcmZhY2UucHJvdG8SD3dvcmxkLkludGVyZmFjZRoMc3lz" + 
          "dGVtLnByb3RvIrIFCgRJdGVtEiEKCWJhc2VfaXRlbRgBIAIoCzIOLmNvcmUu" + 
          "QmFzZUl0ZW0SEAoIYnV5X2FibGUYAiACKAgSEQoJc2VsbF9hYmxlGAMgAigI" + 
          "EhUKDWV4Y2hhbmdlX2FibGUYBCACKAgSFAoMZGVzdHJveV9hYmxlGAUgAigI" + 
          "EjMKCm1vbmV5X3R5cGUYBiACKA4yHy53b3JsZC5JbnRlcmZhY2UuSXRlbS5N" + 
          "b25leVR5cGUSEQoJYnV5X3ByaWNlGAcgAigFEhIKCnNlbGxfcHJpY2UYCCAC" + 
          "KAUSMQoJYmluZF90eXBlGAkgAigOMh4ud29ybGQuSW50ZXJmYWNlLkl0ZW0u" + 
          "QmluZFR5cGUSEQoJYmluZF9mbGFnGAogAigIEi4KBWNsYXNzGAsgAigOMh8u" + 
          "d29ybGQuSW50ZXJmYWNlLkl0ZW0uQ2xhc3NUeXBlEg8KB2ljb25faWQYDCAC" + 
          "KAUSEAoIdGltZV9jdXIYDSACKAUSEAoIdGltZV9tYXgYDiACKAUSIAoGbGlt" + 
          "aXRzGA8gAygLMhAuY29yZS5MaW1pdFZhbHVlEiIKB2VmZmVjdHMYECADKAsy" + 
          "ES5jb3JlLkVmZmVjdFZhbHVlIjoKCU1vbmV5VHlwZRINCglHYW1lTW9uZXkQ" + 
          "ABIHCgNSTUIQARIJCgVTY29yZRACEgoKBkdvbmdEZRADIiwKCEJpbmRUeXBl" + 
          "EgoKBkNhbm5vdBAAEgoKBk1hbnVhbBABEggKBEF1dG8QAiJ+CglDbGFzc1R5" + 
          "cGUSCgoGUHVUb25nEAASCwoHSmluZ1poaRABEgoKBllvdVhpdRACEgwKCENo" + 
          "dWFuZ1FpEAMSCwoHU2hlbkh1YRAEEgsKB05pVGlhbjEQBRILCgdOaVRpYW4y" + 
          "EAYSCwoHTmlUaWFuMxAHEgoKBlJhbmRvbRAIItMHCglDaGFyYWN0b3ISDwoH" + 
          "bGVhc3RkYxgBIAIoBRINCgVtYXhkYxgCIAIoBRIKCgJhYxgDIAIoBRILCgNt" + 
          "YWMYBCACKAUSDAoEY3JpdBgFIAIoBRIRCglza2lsbGNyaXQYBiACKAUSEQoJ" + 
          "aGl0Y2hhbmNlGAcgAigFEg0KBWhlZGdlGAggAigFEg0KBWhwcmVnGAkgAigF" + 
          "Eg0KBW1wcmVnGAogAigFEhAKCGF0dHNwZWVkGAsgAigCEhEKCW1vdmVzcGVl" + 
          "ZBgMIAIoAhINCgVtYXhocBgNIAIoBRINCgVtYXhtcBgOIAIoBRIKCgJIUBgP" + 
          "IAIoBRIKCgJNUBgQIAIoBRIvCgVzdGF0ZRgRIAIoDjIgLndvcmxkLkludGVy" + 
          "ZmFjZS5DaGFyYWN0b3IuU3RhdGUSDgoGc2lsZW50GBIgAigIEg8KB0NoYW90" + 
          "aWMYEyACKAgSEAoIcnVuc3BlZWQYFCACKAISDQoFbGV2ZWwYFSACKAUSEAoI" + 
          "c2tpbGxlZmYYFiACKAUSEwoLYXR0ZGlzdGFuY2UYFyACKAUSDwoHZG1nd2Vl" + 
          "axgYIAIoBRIRCglkbWdyZXR1cm4YGSACKAUSEwoLZG91YmxlX3JhdGUYGiAC" + 
          "KAUSDQoFY3JhenkYGyACKAUSDQoFZGl6enkYHCACKAUSDQoFRWF0TXAYHSAC" + 
          "KAUSDQoFRWF0SHAYHiACKAUSEAoITXByZXR1cm4YHyACKAUSCgoCcXgYICAC" + 
          "KAUSDQoFc3RhbmQYISACKAUSEgoKY2Ftb3VmbGFnZRgiIAIoBRINCgVzZW5z" + 
          "ZRgjIAIoBRIRCglpc29sYXRpb24YJCACKAgSEAoIaW1tdW5pdHkYJSACKAgS" + 
          "FQoNcHJlZGljdG1hcmtlchgmIAIoBRIWCg5tYW5hYnVybm1hcmtlchgnIAIo" + 
          "BRIOCgZwb3NlSUQYKCACKAUSDgoGbm9tb3ZlGCkgAigFEhsKA3BvcxgqIAIo" + 
          "CzIOLmNvcmUuTW92ZUFibGUi4AEKBVN0YXRlEgkKBVNUQU5EEAASCAoETU9W" + 
          "RRABEggKBEpVTVAQAhIKCgZBVFRBQ0sQAxIOCgpTS0lMTF9TSUdOEAQSDgoK" + 
          "U0tJTExfQ0FTVBAFEgoKBlBJQ0tVUBAGEgoKBkhBTkdVUBAHEgkKBUVNT1RF" + 
          "EAgSCQoFQkVISVQQCRILCgdCRUFURkxZEAoSBgoCVVAQCxIHCgNESUUQDBIK" + 
          "CgZTV0lNTVkQDRIKCgZCRVJVU0gQDhIMCghDQUxMUklERRAPEgsKB1NMVU1C" + 
          "RVIQEBINCglDTE9TRV9PRkYQEQ==");
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_world_Interface_Item__Descriptor = Descriptor.MessageTypes[0];
        internal__static_world_Interface_Item__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.Interface.Item, global::world.Interface.Item.Builder>(internal__static_world_Interface_Item__Descriptor,
                new string[] { "BaseItem", "BuyAble", "SellAble", "ExchangeAble", "DestroyAble", "MoneyType", "BuyPrice", "SellPrice", "BindType", "BindFlag", "Class", "IconId", "TimeCur", "TimeMax", "Limits", "Effects", });
        internal__static_world_Interface_Charactor__Descriptor = Descriptor.MessageTypes[1];
        internal__static_world_Interface_Charactor__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::world.Interface.Charactor, global::world.Interface.Charactor.Builder>(internal__static_world_Interface_Charactor__Descriptor,
                new string[] { "Leastdc", "Maxdc", "Ac", "Mac", "Crit", "Skillcrit", "Hitchance", "Hedge", "Hpreg", "Mpreg", "Attspeed", "Movespeed", "Maxhp", "Maxmp", "HP", "MP", "State", "Silent", "Chaotic", "Runspeed", "Level", "Skilleff", "Attdistance", "Dmgweek", "Dmgreturn", "DoubleRate", "Crazy", "Dizzy", "EatMp", "EatHp", "Mpreturn", "Qx", "Stand", "Camouflage", "Sense", "Isolation", "Immunity", "Predictmarker", "Manaburnmarker", "PoseID", "Nomove", "Pos", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::core.System.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Item : pb::GeneratedMessage<Item, Item.Builder> {
    private Item() { }
    private static readonly Item defaultInstance = new Item().MakeReadOnly();
    private static readonly string[] _itemFieldNames = new string[] { "base_item", "bind_flag", "bind_type", "buy_able", "buy_price", "class", "destroy_able", "effects", "exchange_able", "icon_id", "limits", "money_type", "sell_able", "sell_price", "time_cur", "time_max" };
    private static readonly uint[] _itemFieldTags = new uint[] { 10, 80, 72, 16, 56, 88, 40, 130, 32, 96, 122, 48, 24, 64, 104, 112 };
    public static Item DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Item DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Item ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.Interface.WorldInterface.internal__static_world_Interface_Item__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Item, Item.Builder> InternalFieldAccessors {
      get { return global::world.Interface.WorldInterface.internal__static_world_Interface_Item__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum MoneyType {
        GameMoney = 0,
        RMB = 1,
        Score = 2,
        GongDe = 3,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum BindType {
        Cannot = 0,
        Manual = 1,
        Auto = 2,
      }
      
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum ClassType {
        PuTong = 0,
        JingZhi = 1,
        YouXiu = 2,
        ChuangQi = 3,
        ShenHua = 4,
        NiTian1 = 5,
        NiTian2 = 6,
        NiTian3 = 7,
        Random = 8,
      }
      
    }
    #endregion
    
    public const int BaseItemFieldNumber = 1;
    private bool hasBaseItem;
    private global::core.BaseItem baseItem_;
    public bool HasBaseItem {
      get { return hasBaseItem; }
    }
    public global::core.BaseItem BaseItem {
      get { return baseItem_ ?? global::core.BaseItem.DefaultInstance; }
    }
    
    public const int BuyAbleFieldNumber = 2;
    private bool hasBuyAble;
    private bool buyAble_;
    public bool HasBuyAble {
      get { return hasBuyAble; }
    }
    public bool BuyAble {
      get { return buyAble_; }
    }
    
    public const int SellAbleFieldNumber = 3;
    private bool hasSellAble;
    private bool sellAble_;
    public bool HasSellAble {
      get { return hasSellAble; }
    }
    public bool SellAble {
      get { return sellAble_; }
    }
    
    public const int ExchangeAbleFieldNumber = 4;
    private bool hasExchangeAble;
    private bool exchangeAble_;
    public bool HasExchangeAble {
      get { return hasExchangeAble; }
    }
    public bool ExchangeAble {
      get { return exchangeAble_; }
    }
    
    public const int DestroyAbleFieldNumber = 5;
    private bool hasDestroyAble;
    private bool destroyAble_;
    public bool HasDestroyAble {
      get { return hasDestroyAble; }
    }
    public bool DestroyAble {
      get { return destroyAble_; }
    }
    
    public const int MoneyTypeFieldNumber = 6;
    private bool hasMoneyType;
    private global::world.Interface.Item.Types.MoneyType moneyType_ = global::world.Interface.Item.Types.MoneyType.GameMoney;
    public bool HasMoneyType {
      get { return hasMoneyType; }
    }
    public global::world.Interface.Item.Types.MoneyType MoneyType {
      get { return moneyType_; }
    }
    
    public const int BuyPriceFieldNumber = 7;
    private bool hasBuyPrice;
    private int buyPrice_;
    public bool HasBuyPrice {
      get { return hasBuyPrice; }
    }
    public int BuyPrice {
      get { return buyPrice_; }
    }
    
    public const int SellPriceFieldNumber = 8;
    private bool hasSellPrice;
    private int sellPrice_;
    public bool HasSellPrice {
      get { return hasSellPrice; }
    }
    public int SellPrice {
      get { return sellPrice_; }
    }
    
    public const int BindTypeFieldNumber = 9;
    private bool hasBindType;
    private global::world.Interface.Item.Types.BindType bindType_ = global::world.Interface.Item.Types.BindType.Cannot;
    public bool HasBindType {
      get { return hasBindType; }
    }
    public global::world.Interface.Item.Types.BindType BindType {
      get { return bindType_; }
    }
    
    public const int BindFlagFieldNumber = 10;
    private bool hasBindFlag;
    private bool bindFlag_;
    public bool HasBindFlag {
      get { return hasBindFlag; }
    }
    public bool BindFlag {
      get { return bindFlag_; }
    }
    
    public const int ClassFieldNumber = 11;
    private bool hasClass;
    private global::world.Interface.Item.Types.ClassType class_ = global::world.Interface.Item.Types.ClassType.PuTong;
    public bool HasClass {
      get { return hasClass; }
    }
    public global::world.Interface.Item.Types.ClassType Class {
      get { return class_; }
    }
    
    public const int IconIdFieldNumber = 12;
    private bool hasIconId;
    private int iconId_;
    public bool HasIconId {
      get { return hasIconId; }
    }
    public int IconId {
      get { return iconId_; }
    }
    
    public const int TimeCurFieldNumber = 13;
    private bool hasTimeCur;
    private int timeCur_;
    public bool HasTimeCur {
      get { return hasTimeCur; }
    }
    public int TimeCur {
      get { return timeCur_; }
    }
    
    public const int TimeMaxFieldNumber = 14;
    private bool hasTimeMax;
    private int timeMax_;
    public bool HasTimeMax {
      get { return hasTimeMax; }
    }
    public int TimeMax {
      get { return timeMax_; }
    }
    
    public const int LimitsFieldNumber = 15;
    private pbc::PopsicleList<global::core.LimitValue> limits_ = new pbc::PopsicleList<global::core.LimitValue>();
    public scg::IList<global::core.LimitValue> LimitsList {
      get { return limits_; }
    }
    public int LimitsCount {
      get { return limits_.Count; }
    }
    public global::core.LimitValue GetLimits(int index) {
      return limits_[index];
    }
    
    public const int EffectsFieldNumber = 16;
    private pbc::PopsicleList<global::core.EffectValue> effects_ = new pbc::PopsicleList<global::core.EffectValue>();
    public scg::IList<global::core.EffectValue> EffectsList {
      get { return effects_; }
    }
    public int EffectsCount {
      get { return effects_.Count; }
    }
    public global::core.EffectValue GetEffects(int index) {
      return effects_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasBaseItem) return false;
        if (!hasBuyAble) return false;
        if (!hasSellAble) return false;
        if (!hasExchangeAble) return false;
        if (!hasDestroyAble) return false;
        if (!hasMoneyType) return false;
        if (!hasBuyPrice) return false;
        if (!hasSellPrice) return false;
        if (!hasBindType) return false;
        if (!hasBindFlag) return false;
        if (!hasClass) return false;
        if (!hasIconId) return false;
        if (!hasTimeCur) return false;
        if (!hasTimeMax) return false;
        if (!BaseItem.IsInitialized) return false;
        foreach (global::core.LimitValue element in LimitsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::core.EffectValue element in EffectsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _itemFieldNames;
      if (hasBaseItem) {
        output.WriteMessage(1, field_names[0], BaseItem);
      }
      if (hasBuyAble) {
        output.WriteBool(2, field_names[3], BuyAble);
      }
      if (hasSellAble) {
        output.WriteBool(3, field_names[12], SellAble);
      }
      if (hasExchangeAble) {
        output.WriteBool(4, field_names[8], ExchangeAble);
      }
      if (hasDestroyAble) {
        output.WriteBool(5, field_names[6], DestroyAble);
      }
      if (hasMoneyType) {
        output.WriteEnum(6, field_names[11], (int) MoneyType, MoneyType);
      }
      if (hasBuyPrice) {
        output.WriteInt32(7, field_names[4], BuyPrice);
      }
      if (hasSellPrice) {
        output.WriteInt32(8, field_names[13], SellPrice);
      }
      if (hasBindType) {
        output.WriteEnum(9, field_names[2], (int) BindType, BindType);
      }
      if (hasBindFlag) {
        output.WriteBool(10, field_names[1], BindFlag);
      }
      if (hasClass) {
        output.WriteEnum(11, field_names[5], (int) Class, Class);
      }
      if (hasIconId) {
        output.WriteInt32(12, field_names[9], IconId);
      }
      if (hasTimeCur) {
        output.WriteInt32(13, field_names[14], TimeCur);
      }
      if (hasTimeMax) {
        output.WriteInt32(14, field_names[15], TimeMax);
      }
      if (limits_.Count > 0) {
        output.WriteMessageArray(15, field_names[10], limits_);
      }
      if (effects_.Count > 0) {
        output.WriteMessageArray(16, field_names[7], effects_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBaseItem) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BaseItem);
        }
        if (hasBuyAble) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, BuyAble);
        }
        if (hasSellAble) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, SellAble);
        }
        if (hasExchangeAble) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, ExchangeAble);
        }
        if (hasDestroyAble) {
          size += pb::CodedOutputStream.ComputeBoolSize(5, DestroyAble);
        }
        if (hasMoneyType) {
          size += pb::CodedOutputStream.ComputeEnumSize(6, (int) MoneyType);
        }
        if (hasBuyPrice) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, BuyPrice);
        }
        if (hasSellPrice) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, SellPrice);
        }
        if (hasBindType) {
          size += pb::CodedOutputStream.ComputeEnumSize(9, (int) BindType);
        }
        if (hasBindFlag) {
          size += pb::CodedOutputStream.ComputeBoolSize(10, BindFlag);
        }
        if (hasClass) {
          size += pb::CodedOutputStream.ComputeEnumSize(11, (int) Class);
        }
        if (hasIconId) {
          size += pb::CodedOutputStream.ComputeInt32Size(12, IconId);
        }
        if (hasTimeCur) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, TimeCur);
        }
        if (hasTimeMax) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, TimeMax);
        }
        foreach (global::core.LimitValue element in LimitsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(15, element);
        }
        foreach (global::core.EffectValue element in EffectsList) {
          size += pb::CodedOutputStream.ComputeMessageSize(16, element);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Item ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Item ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Item ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Item ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Item ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Item ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Item ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Item ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Item ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Item ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Item MakeReadOnly() {
      limits_.MakeReadOnly();
      effects_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Item prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Item, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Item cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Item result;
      
      private Item PrepareBuilder() {
        if (resultIsReadOnly) {
          Item original = result;
          result = new Item();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Item MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.Interface.Item.Descriptor; }
      }
      
      public override Item DefaultInstanceForType {
        get { return global::world.Interface.Item.DefaultInstance; }
      }
      
      public override Item BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Item) {
          return MergeFrom((Item) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Item other) {
        if (other == global::world.Interface.Item.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBaseItem) {
          MergeBaseItem(other.BaseItem);
        }
        if (other.HasBuyAble) {
          BuyAble = other.BuyAble;
        }
        if (other.HasSellAble) {
          SellAble = other.SellAble;
        }
        if (other.HasExchangeAble) {
          ExchangeAble = other.ExchangeAble;
        }
        if (other.HasDestroyAble) {
          DestroyAble = other.DestroyAble;
        }
        if (other.HasMoneyType) {
          MoneyType = other.MoneyType;
        }
        if (other.HasBuyPrice) {
          BuyPrice = other.BuyPrice;
        }
        if (other.HasSellPrice) {
          SellPrice = other.SellPrice;
        }
        if (other.HasBindType) {
          BindType = other.BindType;
        }
        if (other.HasBindFlag) {
          BindFlag = other.BindFlag;
        }
        if (other.HasClass) {
          Class = other.Class;
        }
        if (other.HasIconId) {
          IconId = other.IconId;
        }
        if (other.HasTimeCur) {
          TimeCur = other.TimeCur;
        }
        if (other.HasTimeMax) {
          TimeMax = other.TimeMax;
        }
        if (other.limits_.Count != 0) {
          result.limits_.Add(other.limits_);
        }
        if (other.effects_.Count != 0) {
          result.effects_.Add(other.effects_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_itemFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _itemFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::core.BaseItem.Builder subBuilder = global::core.BaseItem.CreateBuilder();
              if (result.hasBaseItem) {
                subBuilder.MergeFrom(BaseItem);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BaseItem = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasBuyAble = input.ReadBool(ref result.buyAble_);
              break;
            }
            case 24: {
              result.hasSellAble = input.ReadBool(ref result.sellAble_);
              break;
            }
            case 32: {
              result.hasExchangeAble = input.ReadBool(ref result.exchangeAble_);
              break;
            }
            case 40: {
              result.hasDestroyAble = input.ReadBool(ref result.destroyAble_);
              break;
            }
            case 48: {
              object unknown;
              if(input.ReadEnum(ref result.moneyType_, out unknown)) {
                result.hasMoneyType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(6, (ulong)(int)unknown);
              }
              break;
            }
            case 56: {
              result.hasBuyPrice = input.ReadInt32(ref result.buyPrice_);
              break;
            }
            case 64: {
              result.hasSellPrice = input.ReadInt32(ref result.sellPrice_);
              break;
            }
            case 72: {
              object unknown;
              if(input.ReadEnum(ref result.bindType_, out unknown)) {
                result.hasBindType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(9, (ulong)(int)unknown);
              }
              break;
            }
            case 80: {
              result.hasBindFlag = input.ReadBool(ref result.bindFlag_);
              break;
            }
            case 88: {
              object unknown;
              if(input.ReadEnum(ref result.class_, out unknown)) {
                result.hasClass = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(11, (ulong)(int)unknown);
              }
              break;
            }
            case 96: {
              result.hasIconId = input.ReadInt32(ref result.iconId_);
              break;
            }
            case 104: {
              result.hasTimeCur = input.ReadInt32(ref result.timeCur_);
              break;
            }
            case 112: {
              result.hasTimeMax = input.ReadInt32(ref result.timeMax_);
              break;
            }
            case 122: {
              input.ReadMessageArray(tag, field_name, result.limits_, global::core.LimitValue.DefaultInstance, extensionRegistry);
              break;
            }
            case 130: {
              input.ReadMessageArray(tag, field_name, result.effects_, global::core.EffectValue.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasBaseItem {
       get { return result.hasBaseItem; }
      }
      public global::core.BaseItem BaseItem {
        get { return result.BaseItem; }
        set { SetBaseItem(value); }
      }
      public Builder SetBaseItem(global::core.BaseItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBaseItem = true;
        result.baseItem_ = value;
        return this;
      }
      public Builder SetBaseItem(global::core.BaseItem.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBaseItem = true;
        result.baseItem_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBaseItem(global::core.BaseItem value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBaseItem &&
            result.baseItem_ != global::core.BaseItem.DefaultInstance) {
            result.baseItem_ = global::core.BaseItem.CreateBuilder(result.baseItem_).MergeFrom(value).BuildPartial();
        } else {
          result.baseItem_ = value;
        }
        result.hasBaseItem = true;
        return this;
      }
      public Builder ClearBaseItem() {
        PrepareBuilder();
        result.hasBaseItem = false;
        result.baseItem_ = null;
        return this;
      }
      
      public bool HasBuyAble {
        get { return result.hasBuyAble; }
      }
      public bool BuyAble {
        get { return result.BuyAble; }
        set { SetBuyAble(value); }
      }
      public Builder SetBuyAble(bool value) {
        PrepareBuilder();
        result.hasBuyAble = true;
        result.buyAble_ = value;
        return this;
      }
      public Builder ClearBuyAble() {
        PrepareBuilder();
        result.hasBuyAble = false;
        result.buyAble_ = false;
        return this;
      }
      
      public bool HasSellAble {
        get { return result.hasSellAble; }
      }
      public bool SellAble {
        get { return result.SellAble; }
        set { SetSellAble(value); }
      }
      public Builder SetSellAble(bool value) {
        PrepareBuilder();
        result.hasSellAble = true;
        result.sellAble_ = value;
        return this;
      }
      public Builder ClearSellAble() {
        PrepareBuilder();
        result.hasSellAble = false;
        result.sellAble_ = false;
        return this;
      }
      
      public bool HasExchangeAble {
        get { return result.hasExchangeAble; }
      }
      public bool ExchangeAble {
        get { return result.ExchangeAble; }
        set { SetExchangeAble(value); }
      }
      public Builder SetExchangeAble(bool value) {
        PrepareBuilder();
        result.hasExchangeAble = true;
        result.exchangeAble_ = value;
        return this;
      }
      public Builder ClearExchangeAble() {
        PrepareBuilder();
        result.hasExchangeAble = false;
        result.exchangeAble_ = false;
        return this;
      }
      
      public bool HasDestroyAble {
        get { return result.hasDestroyAble; }
      }
      public bool DestroyAble {
        get { return result.DestroyAble; }
        set { SetDestroyAble(value); }
      }
      public Builder SetDestroyAble(bool value) {
        PrepareBuilder();
        result.hasDestroyAble = true;
        result.destroyAble_ = value;
        return this;
      }
      public Builder ClearDestroyAble() {
        PrepareBuilder();
        result.hasDestroyAble = false;
        result.destroyAble_ = false;
        return this;
      }
      
      public bool HasMoneyType {
       get { return result.hasMoneyType; }
      }
      public global::world.Interface.Item.Types.MoneyType MoneyType {
        get { return result.MoneyType; }
        set { SetMoneyType(value); }
      }
      public Builder SetMoneyType(global::world.Interface.Item.Types.MoneyType value) {
        PrepareBuilder();
        result.hasMoneyType = true;
        result.moneyType_ = value;
        return this;
      }
      public Builder ClearMoneyType() {
        PrepareBuilder();
        result.hasMoneyType = false;
        result.moneyType_ = global::world.Interface.Item.Types.MoneyType.GameMoney;
        return this;
      }
      
      public bool HasBuyPrice {
        get { return result.hasBuyPrice; }
      }
      public int BuyPrice {
        get { return result.BuyPrice; }
        set { SetBuyPrice(value); }
      }
      public Builder SetBuyPrice(int value) {
        PrepareBuilder();
        result.hasBuyPrice = true;
        result.buyPrice_ = value;
        return this;
      }
      public Builder ClearBuyPrice() {
        PrepareBuilder();
        result.hasBuyPrice = false;
        result.buyPrice_ = 0;
        return this;
      }
      
      public bool HasSellPrice {
        get { return result.hasSellPrice; }
      }
      public int SellPrice {
        get { return result.SellPrice; }
        set { SetSellPrice(value); }
      }
      public Builder SetSellPrice(int value) {
        PrepareBuilder();
        result.hasSellPrice = true;
        result.sellPrice_ = value;
        return this;
      }
      public Builder ClearSellPrice() {
        PrepareBuilder();
        result.hasSellPrice = false;
        result.sellPrice_ = 0;
        return this;
      }
      
      public bool HasBindType {
       get { return result.hasBindType; }
      }
      public global::world.Interface.Item.Types.BindType BindType {
        get { return result.BindType; }
        set { SetBindType(value); }
      }
      public Builder SetBindType(global::world.Interface.Item.Types.BindType value) {
        PrepareBuilder();
        result.hasBindType = true;
        result.bindType_ = value;
        return this;
      }
      public Builder ClearBindType() {
        PrepareBuilder();
        result.hasBindType = false;
        result.bindType_ = global::world.Interface.Item.Types.BindType.Cannot;
        return this;
      }
      
      public bool HasBindFlag {
        get { return result.hasBindFlag; }
      }
      public bool BindFlag {
        get { return result.BindFlag; }
        set { SetBindFlag(value); }
      }
      public Builder SetBindFlag(bool value) {
        PrepareBuilder();
        result.hasBindFlag = true;
        result.bindFlag_ = value;
        return this;
      }
      public Builder ClearBindFlag() {
        PrepareBuilder();
        result.hasBindFlag = false;
        result.bindFlag_ = false;
        return this;
      }
      
      public bool HasClass {
       get { return result.hasClass; }
      }
      public global::world.Interface.Item.Types.ClassType Class {
        get { return result.Class; }
        set { SetClass(value); }
      }
      public Builder SetClass(global::world.Interface.Item.Types.ClassType value) {
        PrepareBuilder();
        result.hasClass = true;
        result.class_ = value;
        return this;
      }
      public Builder ClearClass() {
        PrepareBuilder();
        result.hasClass = false;
        result.class_ = global::world.Interface.Item.Types.ClassType.PuTong;
        return this;
      }
      
      public bool HasIconId {
        get { return result.hasIconId; }
      }
      public int IconId {
        get { return result.IconId; }
        set { SetIconId(value); }
      }
      public Builder SetIconId(int value) {
        PrepareBuilder();
        result.hasIconId = true;
        result.iconId_ = value;
        return this;
      }
      public Builder ClearIconId() {
        PrepareBuilder();
        result.hasIconId = false;
        result.iconId_ = 0;
        return this;
      }
      
      public bool HasTimeCur {
        get { return result.hasTimeCur; }
      }
      public int TimeCur {
        get { return result.TimeCur; }
        set { SetTimeCur(value); }
      }
      public Builder SetTimeCur(int value) {
        PrepareBuilder();
        result.hasTimeCur = true;
        result.timeCur_ = value;
        return this;
      }
      public Builder ClearTimeCur() {
        PrepareBuilder();
        result.hasTimeCur = false;
        result.timeCur_ = 0;
        return this;
      }
      
      public bool HasTimeMax {
        get { return result.hasTimeMax; }
      }
      public int TimeMax {
        get { return result.TimeMax; }
        set { SetTimeMax(value); }
      }
      public Builder SetTimeMax(int value) {
        PrepareBuilder();
        result.hasTimeMax = true;
        result.timeMax_ = value;
        return this;
      }
      public Builder ClearTimeMax() {
        PrepareBuilder();
        result.hasTimeMax = false;
        result.timeMax_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::core.LimitValue> LimitsList {
        get { return PrepareBuilder().limits_; }
      }
      public int LimitsCount {
        get { return result.LimitsCount; }
      }
      public global::core.LimitValue GetLimits(int index) {
        return result.GetLimits(index);
      }
      public Builder SetLimits(int index, global::core.LimitValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.limits_[index] = value;
        return this;
      }
      public Builder SetLimits(int index, global::core.LimitValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.limits_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddLimits(global::core.LimitValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.limits_.Add(value);
        return this;
      }
      public Builder AddLimits(global::core.LimitValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.limits_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeLimits(scg::IEnumerable<global::core.LimitValue> values) {
        PrepareBuilder();
        result.limits_.Add(values);
        return this;
      }
      public Builder ClearLimits() {
        PrepareBuilder();
        result.limits_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::core.EffectValue> EffectsList {
        get { return PrepareBuilder().effects_; }
      }
      public int EffectsCount {
        get { return result.EffectsCount; }
      }
      public global::core.EffectValue GetEffects(int index) {
        return result.GetEffects(index);
      }
      public Builder SetEffects(int index, global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_[index] = value;
        return this;
      }
      public Builder SetEffects(int index, global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddEffects(global::core.EffectValue value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.effects_.Add(value);
        return this;
      }
      public Builder AddEffects(global::core.EffectValue.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.effects_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeEffects(scg::IEnumerable<global::core.EffectValue> values) {
        PrepareBuilder();
        result.effects_.Add(values);
        return this;
      }
      public Builder ClearEffects() {
        PrepareBuilder();
        result.effects_.Clear();
        return this;
      }
    }
    static Item() {
      object.ReferenceEquals(global::world.Interface.WorldInterface.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
  public sealed partial class Charactor : pb::GeneratedMessage<Charactor, Charactor.Builder> {
    private Charactor() { }
    private static readonly Charactor defaultInstance = new Charactor().MakeReadOnly();
    private static readonly string[] _charactorFieldNames = new string[] { "Chaotic", "EatHp", "EatMp", "HP", "MP", "Mpreturn", "ac", "attdistance", "attspeed", "camouflage", "crazy", "crit", "dizzy", "dmgreturn", "dmgweek", "double_rate", "hedge", "hitchance", "hpreg", "immunity", "isolation", "leastdc", "level", "mac", "manaburnmarker", "maxdc", "maxhp", "maxmp", "movespeed", "mpreg", "nomove", "pos", "poseID", "predictmarker", "qx", "runspeed", "sense", "silent", "skillcrit", "skilleff", "stand", "state" };
    private static readonly uint[] _charactorFieldTags = new uint[] { 152, 240, 232, 120, 128, 248, 24, 184, 93, 272, 216, 40, 224, 200, 192, 208, 64, 56, 72, 296, 288, 8, 168, 32, 312, 16, 104, 112, 101, 80, 328, 338, 320, 304, 256, 165, 280, 144, 48, 176, 264, 136 };
    public static Charactor DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override Charactor DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override Charactor ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::world.Interface.WorldInterface.internal__static_world_Interface_Charactor__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<Charactor, Charactor.Builder> InternalFieldAccessors {
      get { return global::world.Interface.WorldInterface.internal__static_world_Interface_Charactor__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public static class Types {
      [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
      [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
      public enum State {
        STAND = 0,
        MOVE = 1,
        JUMP = 2,
        ATTACK = 3,
        SKILL_SIGN = 4,
        SKILL_CAST = 5,
        PICKUP = 6,
        HANGUP = 7,
        EMOTE = 8,
        BEHIT = 9,
        BEATFLY = 10,
        UP = 11,
        DIE = 12,
        SWIMMY = 13,
        BERUSH = 14,
        CALLRIDE = 15,
        SLUMBER = 16,
        CLOSE_OFF = 17,
      }
      
    }
    #endregion
    
    public const int LeastdcFieldNumber = 1;
    private bool hasLeastdc;
    private int leastdc_;
    public bool HasLeastdc {
      get { return hasLeastdc; }
    }
    public int Leastdc {
      get { return leastdc_; }
    }
    
    public const int MaxdcFieldNumber = 2;
    private bool hasMaxdc;
    private int maxdc_;
    public bool HasMaxdc {
      get { return hasMaxdc; }
    }
    public int Maxdc {
      get { return maxdc_; }
    }
    
    public const int AcFieldNumber = 3;
    private bool hasAc;
    private int ac_;
    public bool HasAc {
      get { return hasAc; }
    }
    public int Ac {
      get { return ac_; }
    }
    
    public const int MacFieldNumber = 4;
    private bool hasMac;
    private int mac_;
    public bool HasMac {
      get { return hasMac; }
    }
    public int Mac {
      get { return mac_; }
    }
    
    public const int CritFieldNumber = 5;
    private bool hasCrit;
    private int crit_;
    public bool HasCrit {
      get { return hasCrit; }
    }
    public int Crit {
      get { return crit_; }
    }
    
    public const int SkillcritFieldNumber = 6;
    private bool hasSkillcrit;
    private int skillcrit_;
    public bool HasSkillcrit {
      get { return hasSkillcrit; }
    }
    public int Skillcrit {
      get { return skillcrit_; }
    }
    
    public const int HitchanceFieldNumber = 7;
    private bool hasHitchance;
    private int hitchance_;
    public bool HasHitchance {
      get { return hasHitchance; }
    }
    public int Hitchance {
      get { return hitchance_; }
    }
    
    public const int HedgeFieldNumber = 8;
    private bool hasHedge;
    private int hedge_;
    public bool HasHedge {
      get { return hasHedge; }
    }
    public int Hedge {
      get { return hedge_; }
    }
    
    public const int HpregFieldNumber = 9;
    private bool hasHpreg;
    private int hpreg_;
    public bool HasHpreg {
      get { return hasHpreg; }
    }
    public int Hpreg {
      get { return hpreg_; }
    }
    
    public const int MpregFieldNumber = 10;
    private bool hasMpreg;
    private int mpreg_;
    public bool HasMpreg {
      get { return hasMpreg; }
    }
    public int Mpreg {
      get { return mpreg_; }
    }
    
    public const int AttspeedFieldNumber = 11;
    private bool hasAttspeed;
    private float attspeed_;
    public bool HasAttspeed {
      get { return hasAttspeed; }
    }
    public float Attspeed {
      get { return attspeed_; }
    }
    
    public const int MovespeedFieldNumber = 12;
    private bool hasMovespeed;
    private float movespeed_;
    public bool HasMovespeed {
      get { return hasMovespeed; }
    }
    public float Movespeed {
      get { return movespeed_; }
    }
    
    public const int MaxhpFieldNumber = 13;
    private bool hasMaxhp;
    private int maxhp_;
    public bool HasMaxhp {
      get { return hasMaxhp; }
    }
    public int Maxhp {
      get { return maxhp_; }
    }
    
    public const int MaxmpFieldNumber = 14;
    private bool hasMaxmp;
    private int maxmp_;
    public bool HasMaxmp {
      get { return hasMaxmp; }
    }
    public int Maxmp {
      get { return maxmp_; }
    }
    
    public const int HPFieldNumber = 15;
    private bool hasHP;
    private int hP_;
    public bool HasHP {
      get { return hasHP; }
    }
    public int HP {
      get { return hP_; }
    }
    
    public const int MPFieldNumber = 16;
    private bool hasMP;
    private int mP_;
    public bool HasMP {
      get { return hasMP; }
    }
    public int MP {
      get { return mP_; }
    }
    
    public const int StateFieldNumber = 17;
    private bool hasState;
    private global::world.Interface.Charactor.Types.State state_ = global::world.Interface.Charactor.Types.State.STAND;
    public bool HasState {
      get { return hasState; }
    }
    public global::world.Interface.Charactor.Types.State State {
      get { return state_; }
    }
    
    public const int SilentFieldNumber = 18;
    private bool hasSilent;
    private bool silent_;
    public bool HasSilent {
      get { return hasSilent; }
    }
    public bool Silent {
      get { return silent_; }
    }
    
    public const int ChaoticFieldNumber = 19;
    private bool hasChaotic;
    private bool chaotic_;
    public bool HasChaotic {
      get { return hasChaotic; }
    }
    public bool Chaotic {
      get { return chaotic_; }
    }
    
    public const int RunspeedFieldNumber = 20;
    private bool hasRunspeed;
    private float runspeed_;
    public bool HasRunspeed {
      get { return hasRunspeed; }
    }
    public float Runspeed {
      get { return runspeed_; }
    }
    
    public const int LevelFieldNumber = 21;
    private bool hasLevel;
    private int level_;
    public bool HasLevel {
      get { return hasLevel; }
    }
    public int Level {
      get { return level_; }
    }
    
    public const int SkilleffFieldNumber = 22;
    private bool hasSkilleff;
    private int skilleff_;
    public bool HasSkilleff {
      get { return hasSkilleff; }
    }
    public int Skilleff {
      get { return skilleff_; }
    }
    
    public const int AttdistanceFieldNumber = 23;
    private bool hasAttdistance;
    private int attdistance_;
    public bool HasAttdistance {
      get { return hasAttdistance; }
    }
    public int Attdistance {
      get { return attdistance_; }
    }
    
    public const int DmgweekFieldNumber = 24;
    private bool hasDmgweek;
    private int dmgweek_;
    public bool HasDmgweek {
      get { return hasDmgweek; }
    }
    public int Dmgweek {
      get { return dmgweek_; }
    }
    
    public const int DmgreturnFieldNumber = 25;
    private bool hasDmgreturn;
    private int dmgreturn_;
    public bool HasDmgreturn {
      get { return hasDmgreturn; }
    }
    public int Dmgreturn {
      get { return dmgreturn_; }
    }
    
    public const int DoubleRateFieldNumber = 26;
    private bool hasDoubleRate;
    private int doubleRate_;
    public bool HasDoubleRate {
      get { return hasDoubleRate; }
    }
    public int DoubleRate {
      get { return doubleRate_; }
    }
    
    public const int CrazyFieldNumber = 27;
    private bool hasCrazy;
    private int crazy_;
    public bool HasCrazy {
      get { return hasCrazy; }
    }
    public int Crazy {
      get { return crazy_; }
    }
    
    public const int DizzyFieldNumber = 28;
    private bool hasDizzy;
    private int dizzy_;
    public bool HasDizzy {
      get { return hasDizzy; }
    }
    public int Dizzy {
      get { return dizzy_; }
    }
    
    public const int EatMpFieldNumber = 29;
    private bool hasEatMp;
    private int eatMp_;
    public bool HasEatMp {
      get { return hasEatMp; }
    }
    public int EatMp {
      get { return eatMp_; }
    }
    
    public const int EatHpFieldNumber = 30;
    private bool hasEatHp;
    private int eatHp_;
    public bool HasEatHp {
      get { return hasEatHp; }
    }
    public int EatHp {
      get { return eatHp_; }
    }
    
    public const int MpreturnFieldNumber = 31;
    private bool hasMpreturn;
    private int mpreturn_;
    public bool HasMpreturn {
      get { return hasMpreturn; }
    }
    public int Mpreturn {
      get { return mpreturn_; }
    }
    
    public const int QxFieldNumber = 32;
    private bool hasQx;
    private int qx_;
    public bool HasQx {
      get { return hasQx; }
    }
    public int Qx {
      get { return qx_; }
    }
    
    public const int StandFieldNumber = 33;
    private bool hasStand;
    private int stand_;
    public bool HasStand {
      get { return hasStand; }
    }
    public int Stand {
      get { return stand_; }
    }
    
    public const int CamouflageFieldNumber = 34;
    private bool hasCamouflage;
    private int camouflage_;
    public bool HasCamouflage {
      get { return hasCamouflage; }
    }
    public int Camouflage {
      get { return camouflage_; }
    }
    
    public const int SenseFieldNumber = 35;
    private bool hasSense;
    private int sense_;
    public bool HasSense {
      get { return hasSense; }
    }
    public int Sense {
      get { return sense_; }
    }
    
    public const int IsolationFieldNumber = 36;
    private bool hasIsolation;
    private bool isolation_;
    public bool HasIsolation {
      get { return hasIsolation; }
    }
    public bool Isolation {
      get { return isolation_; }
    }
    
    public const int ImmunityFieldNumber = 37;
    private bool hasImmunity;
    private bool immunity_;
    public bool HasImmunity {
      get { return hasImmunity; }
    }
    public bool Immunity {
      get { return immunity_; }
    }
    
    public const int PredictmarkerFieldNumber = 38;
    private bool hasPredictmarker;
    private int predictmarker_;
    public bool HasPredictmarker {
      get { return hasPredictmarker; }
    }
    public int Predictmarker {
      get { return predictmarker_; }
    }
    
    public const int ManaburnmarkerFieldNumber = 39;
    private bool hasManaburnmarker;
    private int manaburnmarker_;
    public bool HasManaburnmarker {
      get { return hasManaburnmarker; }
    }
    public int Manaburnmarker {
      get { return manaburnmarker_; }
    }
    
    public const int PoseIDFieldNumber = 40;
    private bool hasPoseID;
    private int poseID_;
    public bool HasPoseID {
      get { return hasPoseID; }
    }
    public int PoseID {
      get { return poseID_; }
    }
    
    public const int NomoveFieldNumber = 41;
    private bool hasNomove;
    private int nomove_;
    public bool HasNomove {
      get { return hasNomove; }
    }
    public int Nomove {
      get { return nomove_; }
    }
    
    public const int PosFieldNumber = 42;
    private bool hasPos;
    private global::core.MoveAble pos_;
    public bool HasPos {
      get { return hasPos; }
    }
    public global::core.MoveAble Pos {
      get { return pos_ ?? global::core.MoveAble.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasLeastdc) return false;
        if (!hasMaxdc) return false;
        if (!hasAc) return false;
        if (!hasMac) return false;
        if (!hasCrit) return false;
        if (!hasSkillcrit) return false;
        if (!hasHitchance) return false;
        if (!hasHedge) return false;
        if (!hasHpreg) return false;
        if (!hasMpreg) return false;
        if (!hasAttspeed) return false;
        if (!hasMovespeed) return false;
        if (!hasMaxhp) return false;
        if (!hasMaxmp) return false;
        if (!hasHP) return false;
        if (!hasMP) return false;
        if (!hasState) return false;
        if (!hasSilent) return false;
        if (!hasChaotic) return false;
        if (!hasRunspeed) return false;
        if (!hasLevel) return false;
        if (!hasSkilleff) return false;
        if (!hasAttdistance) return false;
        if (!hasDmgweek) return false;
        if (!hasDmgreturn) return false;
        if (!hasDoubleRate) return false;
        if (!hasCrazy) return false;
        if (!hasDizzy) return false;
        if (!hasEatMp) return false;
        if (!hasEatHp) return false;
        if (!hasMpreturn) return false;
        if (!hasQx) return false;
        if (!hasStand) return false;
        if (!hasCamouflage) return false;
        if (!hasSense) return false;
        if (!hasIsolation) return false;
        if (!hasImmunity) return false;
        if (!hasPredictmarker) return false;
        if (!hasManaburnmarker) return false;
        if (!hasPoseID) return false;
        if (!hasNomove) return false;
        if (!hasPos) return false;
        if (!Pos.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _charactorFieldNames;
      if (hasLeastdc) {
        output.WriteInt32(1, field_names[21], Leastdc);
      }
      if (hasMaxdc) {
        output.WriteInt32(2, field_names[25], Maxdc);
      }
      if (hasAc) {
        output.WriteInt32(3, field_names[6], Ac);
      }
      if (hasMac) {
        output.WriteInt32(4, field_names[23], Mac);
      }
      if (hasCrit) {
        output.WriteInt32(5, field_names[11], Crit);
      }
      if (hasSkillcrit) {
        output.WriteInt32(6, field_names[38], Skillcrit);
      }
      if (hasHitchance) {
        output.WriteInt32(7, field_names[17], Hitchance);
      }
      if (hasHedge) {
        output.WriteInt32(8, field_names[16], Hedge);
      }
      if (hasHpreg) {
        output.WriteInt32(9, field_names[18], Hpreg);
      }
      if (hasMpreg) {
        output.WriteInt32(10, field_names[29], Mpreg);
      }
      if (hasAttspeed) {
        output.WriteFloat(11, field_names[8], Attspeed);
      }
      if (hasMovespeed) {
        output.WriteFloat(12, field_names[28], Movespeed);
      }
      if (hasMaxhp) {
        output.WriteInt32(13, field_names[26], Maxhp);
      }
      if (hasMaxmp) {
        output.WriteInt32(14, field_names[27], Maxmp);
      }
      if (hasHP) {
        output.WriteInt32(15, field_names[3], HP);
      }
      if (hasMP) {
        output.WriteInt32(16, field_names[4], MP);
      }
      if (hasState) {
        output.WriteEnum(17, field_names[41], (int) State, State);
      }
      if (hasSilent) {
        output.WriteBool(18, field_names[37], Silent);
      }
      if (hasChaotic) {
        output.WriteBool(19, field_names[0], Chaotic);
      }
      if (hasRunspeed) {
        output.WriteFloat(20, field_names[35], Runspeed);
      }
      if (hasLevel) {
        output.WriteInt32(21, field_names[22], Level);
      }
      if (hasSkilleff) {
        output.WriteInt32(22, field_names[39], Skilleff);
      }
      if (hasAttdistance) {
        output.WriteInt32(23, field_names[7], Attdistance);
      }
      if (hasDmgweek) {
        output.WriteInt32(24, field_names[14], Dmgweek);
      }
      if (hasDmgreturn) {
        output.WriteInt32(25, field_names[13], Dmgreturn);
      }
      if (hasDoubleRate) {
        output.WriteInt32(26, field_names[15], DoubleRate);
      }
      if (hasCrazy) {
        output.WriteInt32(27, field_names[10], Crazy);
      }
      if (hasDizzy) {
        output.WriteInt32(28, field_names[12], Dizzy);
      }
      if (hasEatMp) {
        output.WriteInt32(29, field_names[2], EatMp);
      }
      if (hasEatHp) {
        output.WriteInt32(30, field_names[1], EatHp);
      }
      if (hasMpreturn) {
        output.WriteInt32(31, field_names[5], Mpreturn);
      }
      if (hasQx) {
        output.WriteInt32(32, field_names[34], Qx);
      }
      if (hasStand) {
        output.WriteInt32(33, field_names[40], Stand);
      }
      if (hasCamouflage) {
        output.WriteInt32(34, field_names[9], Camouflage);
      }
      if (hasSense) {
        output.WriteInt32(35, field_names[36], Sense);
      }
      if (hasIsolation) {
        output.WriteBool(36, field_names[20], Isolation);
      }
      if (hasImmunity) {
        output.WriteBool(37, field_names[19], Immunity);
      }
      if (hasPredictmarker) {
        output.WriteInt32(38, field_names[33], Predictmarker);
      }
      if (hasManaburnmarker) {
        output.WriteInt32(39, field_names[24], Manaburnmarker);
      }
      if (hasPoseID) {
        output.WriteInt32(40, field_names[32], PoseID);
      }
      if (hasNomove) {
        output.WriteInt32(41, field_names[30], Nomove);
      }
      if (hasPos) {
        output.WriteMessage(42, field_names[31], Pos);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLeastdc) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, Leastdc);
        }
        if (hasMaxdc) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Maxdc);
        }
        if (hasAc) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, Ac);
        }
        if (hasMac) {
          size += pb::CodedOutputStream.ComputeInt32Size(4, Mac);
        }
        if (hasCrit) {
          size += pb::CodedOutputStream.ComputeInt32Size(5, Crit);
        }
        if (hasSkillcrit) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, Skillcrit);
        }
        if (hasHitchance) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, Hitchance);
        }
        if (hasHedge) {
          size += pb::CodedOutputStream.ComputeInt32Size(8, Hedge);
        }
        if (hasHpreg) {
          size += pb::CodedOutputStream.ComputeInt32Size(9, Hpreg);
        }
        if (hasMpreg) {
          size += pb::CodedOutputStream.ComputeInt32Size(10, Mpreg);
        }
        if (hasAttspeed) {
          size += pb::CodedOutputStream.ComputeFloatSize(11, Attspeed);
        }
        if (hasMovespeed) {
          size += pb::CodedOutputStream.ComputeFloatSize(12, Movespeed);
        }
        if (hasMaxhp) {
          size += pb::CodedOutputStream.ComputeInt32Size(13, Maxhp);
        }
        if (hasMaxmp) {
          size += pb::CodedOutputStream.ComputeInt32Size(14, Maxmp);
        }
        if (hasHP) {
          size += pb::CodedOutputStream.ComputeInt32Size(15, HP);
        }
        if (hasMP) {
          size += pb::CodedOutputStream.ComputeInt32Size(16, MP);
        }
        if (hasState) {
          size += pb::CodedOutputStream.ComputeEnumSize(17, (int) State);
        }
        if (hasSilent) {
          size += pb::CodedOutputStream.ComputeBoolSize(18, Silent);
        }
        if (hasChaotic) {
          size += pb::CodedOutputStream.ComputeBoolSize(19, Chaotic);
        }
        if (hasRunspeed) {
          size += pb::CodedOutputStream.ComputeFloatSize(20, Runspeed);
        }
        if (hasLevel) {
          size += pb::CodedOutputStream.ComputeInt32Size(21, Level);
        }
        if (hasSkilleff) {
          size += pb::CodedOutputStream.ComputeInt32Size(22, Skilleff);
        }
        if (hasAttdistance) {
          size += pb::CodedOutputStream.ComputeInt32Size(23, Attdistance);
        }
        if (hasDmgweek) {
          size += pb::CodedOutputStream.ComputeInt32Size(24, Dmgweek);
        }
        if (hasDmgreturn) {
          size += pb::CodedOutputStream.ComputeInt32Size(25, Dmgreturn);
        }
        if (hasDoubleRate) {
          size += pb::CodedOutputStream.ComputeInt32Size(26, DoubleRate);
        }
        if (hasCrazy) {
          size += pb::CodedOutputStream.ComputeInt32Size(27, Crazy);
        }
        if (hasDizzy) {
          size += pb::CodedOutputStream.ComputeInt32Size(28, Dizzy);
        }
        if (hasEatMp) {
          size += pb::CodedOutputStream.ComputeInt32Size(29, EatMp);
        }
        if (hasEatHp) {
          size += pb::CodedOutputStream.ComputeInt32Size(30, EatHp);
        }
        if (hasMpreturn) {
          size += pb::CodedOutputStream.ComputeInt32Size(31, Mpreturn);
        }
        if (hasQx) {
          size += pb::CodedOutputStream.ComputeInt32Size(32, Qx);
        }
        if (hasStand) {
          size += pb::CodedOutputStream.ComputeInt32Size(33, Stand);
        }
        if (hasCamouflage) {
          size += pb::CodedOutputStream.ComputeInt32Size(34, Camouflage);
        }
        if (hasSense) {
          size += pb::CodedOutputStream.ComputeInt32Size(35, Sense);
        }
        if (hasIsolation) {
          size += pb::CodedOutputStream.ComputeBoolSize(36, Isolation);
        }
        if (hasImmunity) {
          size += pb::CodedOutputStream.ComputeBoolSize(37, Immunity);
        }
        if (hasPredictmarker) {
          size += pb::CodedOutputStream.ComputeInt32Size(38, Predictmarker);
        }
        if (hasManaburnmarker) {
          size += pb::CodedOutputStream.ComputeInt32Size(39, Manaburnmarker);
        }
        if (hasPoseID) {
          size += pb::CodedOutputStream.ComputeInt32Size(40, PoseID);
        }
        if (hasNomove) {
          size += pb::CodedOutputStream.ComputeInt32Size(41, Nomove);
        }
        if (hasPos) {
          size += pb::CodedOutputStream.ComputeMessageSize(42, Pos);
        }
        size += UnknownFields.SerializedSize;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    public static Charactor ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Charactor ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Charactor ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static Charactor ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static Charactor ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Charactor ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static Charactor ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static Charactor ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static Charactor ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static Charactor ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private Charactor MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(Charactor prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ProtoGen", "2.4.1.473")]
    public sealed partial class Builder : pb::GeneratedBuilder<Charactor, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(Charactor cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private Charactor result;
      
      private Charactor PrepareBuilder() {
        if (resultIsReadOnly) {
          Charactor original = result;
          result = new Charactor();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override Charactor MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::world.Interface.Charactor.Descriptor; }
      }
      
      public override Charactor DefaultInstanceForType {
        get { return global::world.Interface.Charactor.DefaultInstance; }
      }
      
      public override Charactor BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is Charactor) {
          return MergeFrom((Charactor) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(Charactor other) {
        if (other == global::world.Interface.Charactor.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLeastdc) {
          Leastdc = other.Leastdc;
        }
        if (other.HasMaxdc) {
          Maxdc = other.Maxdc;
        }
        if (other.HasAc) {
          Ac = other.Ac;
        }
        if (other.HasMac) {
          Mac = other.Mac;
        }
        if (other.HasCrit) {
          Crit = other.Crit;
        }
        if (other.HasSkillcrit) {
          Skillcrit = other.Skillcrit;
        }
        if (other.HasHitchance) {
          Hitchance = other.Hitchance;
        }
        if (other.HasHedge) {
          Hedge = other.Hedge;
        }
        if (other.HasHpreg) {
          Hpreg = other.Hpreg;
        }
        if (other.HasMpreg) {
          Mpreg = other.Mpreg;
        }
        if (other.HasAttspeed) {
          Attspeed = other.Attspeed;
        }
        if (other.HasMovespeed) {
          Movespeed = other.Movespeed;
        }
        if (other.HasMaxhp) {
          Maxhp = other.Maxhp;
        }
        if (other.HasMaxmp) {
          Maxmp = other.Maxmp;
        }
        if (other.HasHP) {
          HP = other.HP;
        }
        if (other.HasMP) {
          MP = other.MP;
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.HasSilent) {
          Silent = other.Silent;
        }
        if (other.HasChaotic) {
          Chaotic = other.Chaotic;
        }
        if (other.HasRunspeed) {
          Runspeed = other.Runspeed;
        }
        if (other.HasLevel) {
          Level = other.Level;
        }
        if (other.HasSkilleff) {
          Skilleff = other.Skilleff;
        }
        if (other.HasAttdistance) {
          Attdistance = other.Attdistance;
        }
        if (other.HasDmgweek) {
          Dmgweek = other.Dmgweek;
        }
        if (other.HasDmgreturn) {
          Dmgreturn = other.Dmgreturn;
        }
        if (other.HasDoubleRate) {
          DoubleRate = other.DoubleRate;
        }
        if (other.HasCrazy) {
          Crazy = other.Crazy;
        }
        if (other.HasDizzy) {
          Dizzy = other.Dizzy;
        }
        if (other.HasEatMp) {
          EatMp = other.EatMp;
        }
        if (other.HasEatHp) {
          EatHp = other.EatHp;
        }
        if (other.HasMpreturn) {
          Mpreturn = other.Mpreturn;
        }
        if (other.HasQx) {
          Qx = other.Qx;
        }
        if (other.HasStand) {
          Stand = other.Stand;
        }
        if (other.HasCamouflage) {
          Camouflage = other.Camouflage;
        }
        if (other.HasSense) {
          Sense = other.Sense;
        }
        if (other.HasIsolation) {
          Isolation = other.Isolation;
        }
        if (other.HasImmunity) {
          Immunity = other.Immunity;
        }
        if (other.HasPredictmarker) {
          Predictmarker = other.Predictmarker;
        }
        if (other.HasManaburnmarker) {
          Manaburnmarker = other.Manaburnmarker;
        }
        if (other.HasPoseID) {
          PoseID = other.PoseID;
        }
        if (other.HasNomove) {
          Nomove = other.Nomove;
        }
        if (other.HasPos) {
          MergePos(other.Pos);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_charactorFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _charactorFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLeastdc = input.ReadInt32(ref result.leastdc_);
              break;
            }
            case 16: {
              result.hasMaxdc = input.ReadInt32(ref result.maxdc_);
              break;
            }
            case 24: {
              result.hasAc = input.ReadInt32(ref result.ac_);
              break;
            }
            case 32: {
              result.hasMac = input.ReadInt32(ref result.mac_);
              break;
            }
            case 40: {
              result.hasCrit = input.ReadInt32(ref result.crit_);
              break;
            }
            case 48: {
              result.hasSkillcrit = input.ReadInt32(ref result.skillcrit_);
              break;
            }
            case 56: {
              result.hasHitchance = input.ReadInt32(ref result.hitchance_);
              break;
            }
            case 64: {
              result.hasHedge = input.ReadInt32(ref result.hedge_);
              break;
            }
            case 72: {
              result.hasHpreg = input.ReadInt32(ref result.hpreg_);
              break;
            }
            case 80: {
              result.hasMpreg = input.ReadInt32(ref result.mpreg_);
              break;
            }
            case 93: {
              result.hasAttspeed = input.ReadFloat(ref result.attspeed_);
              break;
            }
            case 101: {
              result.hasMovespeed = input.ReadFloat(ref result.movespeed_);
              break;
            }
            case 104: {
              result.hasMaxhp = input.ReadInt32(ref result.maxhp_);
              break;
            }
            case 112: {
              result.hasMaxmp = input.ReadInt32(ref result.maxmp_);
              break;
            }
            case 120: {
              result.hasHP = input.ReadInt32(ref result.hP_);
              break;
            }
            case 128: {
              result.hasMP = input.ReadInt32(ref result.mP_);
              break;
            }
            case 136: {
              object unknown;
              if(input.ReadEnum(ref result.state_, out unknown)) {
                result.hasState = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(17, (ulong)(int)unknown);
              }
              break;
            }
            case 144: {
              result.hasSilent = input.ReadBool(ref result.silent_);
              break;
            }
            case 152: {
              result.hasChaotic = input.ReadBool(ref result.chaotic_);
              break;
            }
            case 165: {
              result.hasRunspeed = input.ReadFloat(ref result.runspeed_);
              break;
            }
            case 168: {
              result.hasLevel = input.ReadInt32(ref result.level_);
              break;
            }
            case 176: {
              result.hasSkilleff = input.ReadInt32(ref result.skilleff_);
              break;
            }
            case 184: {
              result.hasAttdistance = input.ReadInt32(ref result.attdistance_);
              break;
            }
            case 192: {
              result.hasDmgweek = input.ReadInt32(ref result.dmgweek_);
              break;
            }
            case 200: {
              result.hasDmgreturn = input.ReadInt32(ref result.dmgreturn_);
              break;
            }
            case 208: {
              result.hasDoubleRate = input.ReadInt32(ref result.doubleRate_);
              break;
            }
            case 216: {
              result.hasCrazy = input.ReadInt32(ref result.crazy_);
              break;
            }
            case 224: {
              result.hasDizzy = input.ReadInt32(ref result.dizzy_);
              break;
            }
            case 232: {
              result.hasEatMp = input.ReadInt32(ref result.eatMp_);
              break;
            }
            case 240: {
              result.hasEatHp = input.ReadInt32(ref result.eatHp_);
              break;
            }
            case 248: {
              result.hasMpreturn = input.ReadInt32(ref result.mpreturn_);
              break;
            }
            case 256: {
              result.hasQx = input.ReadInt32(ref result.qx_);
              break;
            }
            case 264: {
              result.hasStand = input.ReadInt32(ref result.stand_);
              break;
            }
            case 272: {
              result.hasCamouflage = input.ReadInt32(ref result.camouflage_);
              break;
            }
            case 280: {
              result.hasSense = input.ReadInt32(ref result.sense_);
              break;
            }
            case 288: {
              result.hasIsolation = input.ReadBool(ref result.isolation_);
              break;
            }
            case 296: {
              result.hasImmunity = input.ReadBool(ref result.immunity_);
              break;
            }
            case 304: {
              result.hasPredictmarker = input.ReadInt32(ref result.predictmarker_);
              break;
            }
            case 312: {
              result.hasManaburnmarker = input.ReadInt32(ref result.manaburnmarker_);
              break;
            }
            case 320: {
              result.hasPoseID = input.ReadInt32(ref result.poseID_);
              break;
            }
            case 328: {
              result.hasNomove = input.ReadInt32(ref result.nomove_);
              break;
            }
            case 338: {
              global::core.MoveAble.Builder subBuilder = global::core.MoveAble.CreateBuilder();
              if (result.hasPos) {
                subBuilder.MergeFrom(Pos);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              Pos = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasLeastdc {
        get { return result.hasLeastdc; }
      }
      public int Leastdc {
        get { return result.Leastdc; }
        set { SetLeastdc(value); }
      }
      public Builder SetLeastdc(int value) {
        PrepareBuilder();
        result.hasLeastdc = true;
        result.leastdc_ = value;
        return this;
      }
      public Builder ClearLeastdc() {
        PrepareBuilder();
        result.hasLeastdc = false;
        result.leastdc_ = 0;
        return this;
      }
      
      public bool HasMaxdc {
        get { return result.hasMaxdc; }
      }
      public int Maxdc {
        get { return result.Maxdc; }
        set { SetMaxdc(value); }
      }
      public Builder SetMaxdc(int value) {
        PrepareBuilder();
        result.hasMaxdc = true;
        result.maxdc_ = value;
        return this;
      }
      public Builder ClearMaxdc() {
        PrepareBuilder();
        result.hasMaxdc = false;
        result.maxdc_ = 0;
        return this;
      }
      
      public bool HasAc {
        get { return result.hasAc; }
      }
      public int Ac {
        get { return result.Ac; }
        set { SetAc(value); }
      }
      public Builder SetAc(int value) {
        PrepareBuilder();
        result.hasAc = true;
        result.ac_ = value;
        return this;
      }
      public Builder ClearAc() {
        PrepareBuilder();
        result.hasAc = false;
        result.ac_ = 0;
        return this;
      }
      
      public bool HasMac {
        get { return result.hasMac; }
      }
      public int Mac {
        get { return result.Mac; }
        set { SetMac(value); }
      }
      public Builder SetMac(int value) {
        PrepareBuilder();
        result.hasMac = true;
        result.mac_ = value;
        return this;
      }
      public Builder ClearMac() {
        PrepareBuilder();
        result.hasMac = false;
        result.mac_ = 0;
        return this;
      }
      
      public bool HasCrit {
        get { return result.hasCrit; }
      }
      public int Crit {
        get { return result.Crit; }
        set { SetCrit(value); }
      }
      public Builder SetCrit(int value) {
        PrepareBuilder();
        result.hasCrit = true;
        result.crit_ = value;
        return this;
      }
      public Builder ClearCrit() {
        PrepareBuilder();
        result.hasCrit = false;
        result.crit_ = 0;
        return this;
      }
      
      public bool HasSkillcrit {
        get { return result.hasSkillcrit; }
      }
      public int Skillcrit {
        get { return result.Skillcrit; }
        set { SetSkillcrit(value); }
      }
      public Builder SetSkillcrit(int value) {
        PrepareBuilder();
        result.hasSkillcrit = true;
        result.skillcrit_ = value;
        return this;
      }
      public Builder ClearSkillcrit() {
        PrepareBuilder();
        result.hasSkillcrit = false;
        result.skillcrit_ = 0;
        return this;
      }
      
      public bool HasHitchance {
        get { return result.hasHitchance; }
      }
      public int Hitchance {
        get { return result.Hitchance; }
        set { SetHitchance(value); }
      }
      public Builder SetHitchance(int value) {
        PrepareBuilder();
        result.hasHitchance = true;
        result.hitchance_ = value;
        return this;
      }
      public Builder ClearHitchance() {
        PrepareBuilder();
        result.hasHitchance = false;
        result.hitchance_ = 0;
        return this;
      }
      
      public bool HasHedge {
        get { return result.hasHedge; }
      }
      public int Hedge {
        get { return result.Hedge; }
        set { SetHedge(value); }
      }
      public Builder SetHedge(int value) {
        PrepareBuilder();
        result.hasHedge = true;
        result.hedge_ = value;
        return this;
      }
      public Builder ClearHedge() {
        PrepareBuilder();
        result.hasHedge = false;
        result.hedge_ = 0;
        return this;
      }
      
      public bool HasHpreg {
        get { return result.hasHpreg; }
      }
      public int Hpreg {
        get { return result.Hpreg; }
        set { SetHpreg(value); }
      }
      public Builder SetHpreg(int value) {
        PrepareBuilder();
        result.hasHpreg = true;
        result.hpreg_ = value;
        return this;
      }
      public Builder ClearHpreg() {
        PrepareBuilder();
        result.hasHpreg = false;
        result.hpreg_ = 0;
        return this;
      }
      
      public bool HasMpreg {
        get { return result.hasMpreg; }
      }
      public int Mpreg {
        get { return result.Mpreg; }
        set { SetMpreg(value); }
      }
      public Builder SetMpreg(int value) {
        PrepareBuilder();
        result.hasMpreg = true;
        result.mpreg_ = value;
        return this;
      }
      public Builder ClearMpreg() {
        PrepareBuilder();
        result.hasMpreg = false;
        result.mpreg_ = 0;
        return this;
      }
      
      public bool HasAttspeed {
        get { return result.hasAttspeed; }
      }
      public float Attspeed {
        get { return result.Attspeed; }
        set { SetAttspeed(value); }
      }
      public Builder SetAttspeed(float value) {
        PrepareBuilder();
        result.hasAttspeed = true;
        result.attspeed_ = value;
        return this;
      }
      public Builder ClearAttspeed() {
        PrepareBuilder();
        result.hasAttspeed = false;
        result.attspeed_ = 0F;
        return this;
      }
      
      public bool HasMovespeed {
        get { return result.hasMovespeed; }
      }
      public float Movespeed {
        get { return result.Movespeed; }
        set { SetMovespeed(value); }
      }
      public Builder SetMovespeed(float value) {
        PrepareBuilder();
        result.hasMovespeed = true;
        result.movespeed_ = value;
        return this;
      }
      public Builder ClearMovespeed() {
        PrepareBuilder();
        result.hasMovespeed = false;
        result.movespeed_ = 0F;
        return this;
      }
      
      public bool HasMaxhp {
        get { return result.hasMaxhp; }
      }
      public int Maxhp {
        get { return result.Maxhp; }
        set { SetMaxhp(value); }
      }
      public Builder SetMaxhp(int value) {
        PrepareBuilder();
        result.hasMaxhp = true;
        result.maxhp_ = value;
        return this;
      }
      public Builder ClearMaxhp() {
        PrepareBuilder();
        result.hasMaxhp = false;
        result.maxhp_ = 0;
        return this;
      }
      
      public bool HasMaxmp {
        get { return result.hasMaxmp; }
      }
      public int Maxmp {
        get { return result.Maxmp; }
        set { SetMaxmp(value); }
      }
      public Builder SetMaxmp(int value) {
        PrepareBuilder();
        result.hasMaxmp = true;
        result.maxmp_ = value;
        return this;
      }
      public Builder ClearMaxmp() {
        PrepareBuilder();
        result.hasMaxmp = false;
        result.maxmp_ = 0;
        return this;
      }
      
      public bool HasHP {
        get { return result.hasHP; }
      }
      public int HP {
        get { return result.HP; }
        set { SetHP(value); }
      }
      public Builder SetHP(int value) {
        PrepareBuilder();
        result.hasHP = true;
        result.hP_ = value;
        return this;
      }
      public Builder ClearHP() {
        PrepareBuilder();
        result.hasHP = false;
        result.hP_ = 0;
        return this;
      }
      
      public bool HasMP {
        get { return result.hasMP; }
      }
      public int MP {
        get { return result.MP; }
        set { SetMP(value); }
      }
      public Builder SetMP(int value) {
        PrepareBuilder();
        result.hasMP = true;
        result.mP_ = value;
        return this;
      }
      public Builder ClearMP() {
        PrepareBuilder();
        result.hasMP = false;
        result.mP_ = 0;
        return this;
      }
      
      public bool HasState {
       get { return result.hasState; }
      }
      public global::world.Interface.Charactor.Types.State State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(global::world.Interface.Charactor.Types.State value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = global::world.Interface.Charactor.Types.State.STAND;
        return this;
      }
      
      public bool HasSilent {
        get { return result.hasSilent; }
      }
      public bool Silent {
        get { return result.Silent; }
        set { SetSilent(value); }
      }
      public Builder SetSilent(bool value) {
        PrepareBuilder();
        result.hasSilent = true;
        result.silent_ = value;
        return this;
      }
      public Builder ClearSilent() {
        PrepareBuilder();
        result.hasSilent = false;
        result.silent_ = false;
        return this;
      }
      
      public bool HasChaotic {
        get { return result.hasChaotic; }
      }
      public bool Chaotic {
        get { return result.Chaotic; }
        set { SetChaotic(value); }
      }
      public Builder SetChaotic(bool value) {
        PrepareBuilder();
        result.hasChaotic = true;
        result.chaotic_ = value;
        return this;
      }
      public Builder ClearChaotic() {
        PrepareBuilder();
        result.hasChaotic = false;
        result.chaotic_ = false;
        return this;
      }
      
      public bool HasRunspeed {
        get { return result.hasRunspeed; }
      }
      public float Runspeed {
        get { return result.Runspeed; }
        set { SetRunspeed(value); }
      }
      public Builder SetRunspeed(float value) {
        PrepareBuilder();
        result.hasRunspeed = true;
        result.runspeed_ = value;
        return this;
      }
      public Builder ClearRunspeed() {
        PrepareBuilder();
        result.hasRunspeed = false;
        result.runspeed_ = 0F;
        return this;
      }
      
      public bool HasLevel {
        get { return result.hasLevel; }
      }
      public int Level {
        get { return result.Level; }
        set { SetLevel(value); }
      }
      public Builder SetLevel(int value) {
        PrepareBuilder();
        result.hasLevel = true;
        result.level_ = value;
        return this;
      }
      public Builder ClearLevel() {
        PrepareBuilder();
        result.hasLevel = false;
        result.level_ = 0;
        return this;
      }
      
      public bool HasSkilleff {
        get { return result.hasSkilleff; }
      }
      public int Skilleff {
        get { return result.Skilleff; }
        set { SetSkilleff(value); }
      }
      public Builder SetSkilleff(int value) {
        PrepareBuilder();
        result.hasSkilleff = true;
        result.skilleff_ = value;
        return this;
      }
      public Builder ClearSkilleff() {
        PrepareBuilder();
        result.hasSkilleff = false;
        result.skilleff_ = 0;
        return this;
      }
      
      public bool HasAttdistance {
        get { return result.hasAttdistance; }
      }
      public int Attdistance {
        get { return result.Attdistance; }
        set { SetAttdistance(value); }
      }
      public Builder SetAttdistance(int value) {
        PrepareBuilder();
        result.hasAttdistance = true;
        result.attdistance_ = value;
        return this;
      }
      public Builder ClearAttdistance() {
        PrepareBuilder();
        result.hasAttdistance = false;
        result.attdistance_ = 0;
        return this;
      }
      
      public bool HasDmgweek {
        get { return result.hasDmgweek; }
      }
      public int Dmgweek {
        get { return result.Dmgweek; }
        set { SetDmgweek(value); }
      }
      public Builder SetDmgweek(int value) {
        PrepareBuilder();
        result.hasDmgweek = true;
        result.dmgweek_ = value;
        return this;
      }
      public Builder ClearDmgweek() {
        PrepareBuilder();
        result.hasDmgweek = false;
        result.dmgweek_ = 0;
        return this;
      }
      
      public bool HasDmgreturn {
        get { return result.hasDmgreturn; }
      }
      public int Dmgreturn {
        get { return result.Dmgreturn; }
        set { SetDmgreturn(value); }
      }
      public Builder SetDmgreturn(int value) {
        PrepareBuilder();
        result.hasDmgreturn = true;
        result.dmgreturn_ = value;
        return this;
      }
      public Builder ClearDmgreturn() {
        PrepareBuilder();
        result.hasDmgreturn = false;
        result.dmgreturn_ = 0;
        return this;
      }
      
      public bool HasDoubleRate {
        get { return result.hasDoubleRate; }
      }
      public int DoubleRate {
        get { return result.DoubleRate; }
        set { SetDoubleRate(value); }
      }
      public Builder SetDoubleRate(int value) {
        PrepareBuilder();
        result.hasDoubleRate = true;
        result.doubleRate_ = value;
        return this;
      }
      public Builder ClearDoubleRate() {
        PrepareBuilder();
        result.hasDoubleRate = false;
        result.doubleRate_ = 0;
        return this;
      }
      
      public bool HasCrazy {
        get { return result.hasCrazy; }
      }
      public int Crazy {
        get { return result.Crazy; }
        set { SetCrazy(value); }
      }
      public Builder SetCrazy(int value) {
        PrepareBuilder();
        result.hasCrazy = true;
        result.crazy_ = value;
        return this;
      }
      public Builder ClearCrazy() {
        PrepareBuilder();
        result.hasCrazy = false;
        result.crazy_ = 0;
        return this;
      }
      
      public bool HasDizzy {
        get { return result.hasDizzy; }
      }
      public int Dizzy {
        get { return result.Dizzy; }
        set { SetDizzy(value); }
      }
      public Builder SetDizzy(int value) {
        PrepareBuilder();
        result.hasDizzy = true;
        result.dizzy_ = value;
        return this;
      }
      public Builder ClearDizzy() {
        PrepareBuilder();
        result.hasDizzy = false;
        result.dizzy_ = 0;
        return this;
      }
      
      public bool HasEatMp {
        get { return result.hasEatMp; }
      }
      public int EatMp {
        get { return result.EatMp; }
        set { SetEatMp(value); }
      }
      public Builder SetEatMp(int value) {
        PrepareBuilder();
        result.hasEatMp = true;
        result.eatMp_ = value;
        return this;
      }
      public Builder ClearEatMp() {
        PrepareBuilder();
        result.hasEatMp = false;
        result.eatMp_ = 0;
        return this;
      }
      
      public bool HasEatHp {
        get { return result.hasEatHp; }
      }
      public int EatHp {
        get { return result.EatHp; }
        set { SetEatHp(value); }
      }
      public Builder SetEatHp(int value) {
        PrepareBuilder();
        result.hasEatHp = true;
        result.eatHp_ = value;
        return this;
      }
      public Builder ClearEatHp() {
        PrepareBuilder();
        result.hasEatHp = false;
        result.eatHp_ = 0;
        return this;
      }
      
      public bool HasMpreturn {
        get { return result.hasMpreturn; }
      }
      public int Mpreturn {
        get { return result.Mpreturn; }
        set { SetMpreturn(value); }
      }
      public Builder SetMpreturn(int value) {
        PrepareBuilder();
        result.hasMpreturn = true;
        result.mpreturn_ = value;
        return this;
      }
      public Builder ClearMpreturn() {
        PrepareBuilder();
        result.hasMpreturn = false;
        result.mpreturn_ = 0;
        return this;
      }
      
      public bool HasQx {
        get { return result.hasQx; }
      }
      public int Qx {
        get { return result.Qx; }
        set { SetQx(value); }
      }
      public Builder SetQx(int value) {
        PrepareBuilder();
        result.hasQx = true;
        result.qx_ = value;
        return this;
      }
      public Builder ClearQx() {
        PrepareBuilder();
        result.hasQx = false;
        result.qx_ = 0;
        return this;
      }
      
      public bool HasStand {
        get { return result.hasStand; }
      }
      public int Stand {
        get { return result.Stand; }
        set { SetStand(value); }
      }
      public Builder SetStand(int value) {
        PrepareBuilder();
        result.hasStand = true;
        result.stand_ = value;
        return this;
      }
      public Builder ClearStand() {
        PrepareBuilder();
        result.hasStand = false;
        result.stand_ = 0;
        return this;
      }
      
      public bool HasCamouflage {
        get { return result.hasCamouflage; }
      }
      public int Camouflage {
        get { return result.Camouflage; }
        set { SetCamouflage(value); }
      }
      public Builder SetCamouflage(int value) {
        PrepareBuilder();
        result.hasCamouflage = true;
        result.camouflage_ = value;
        return this;
      }
      public Builder ClearCamouflage() {
        PrepareBuilder();
        result.hasCamouflage = false;
        result.camouflage_ = 0;
        return this;
      }
      
      public bool HasSense {
        get { return result.hasSense; }
      }
      public int Sense {
        get { return result.Sense; }
        set { SetSense(value); }
      }
      public Builder SetSense(int value) {
        PrepareBuilder();
        result.hasSense = true;
        result.sense_ = value;
        return this;
      }
      public Builder ClearSense() {
        PrepareBuilder();
        result.hasSense = false;
        result.sense_ = 0;
        return this;
      }
      
      public bool HasIsolation {
        get { return result.hasIsolation; }
      }
      public bool Isolation {
        get { return result.Isolation; }
        set { SetIsolation(value); }
      }
      public Builder SetIsolation(bool value) {
        PrepareBuilder();
        result.hasIsolation = true;
        result.isolation_ = value;
        return this;
      }
      public Builder ClearIsolation() {
        PrepareBuilder();
        result.hasIsolation = false;
        result.isolation_ = false;
        return this;
      }
      
      public bool HasImmunity {
        get { return result.hasImmunity; }
      }
      public bool Immunity {
        get { return result.Immunity; }
        set { SetImmunity(value); }
      }
      public Builder SetImmunity(bool value) {
        PrepareBuilder();
        result.hasImmunity = true;
        result.immunity_ = value;
        return this;
      }
      public Builder ClearImmunity() {
        PrepareBuilder();
        result.hasImmunity = false;
        result.immunity_ = false;
        return this;
      }
      
      public bool HasPredictmarker {
        get { return result.hasPredictmarker; }
      }
      public int Predictmarker {
        get { return result.Predictmarker; }
        set { SetPredictmarker(value); }
      }
      public Builder SetPredictmarker(int value) {
        PrepareBuilder();
        result.hasPredictmarker = true;
        result.predictmarker_ = value;
        return this;
      }
      public Builder ClearPredictmarker() {
        PrepareBuilder();
        result.hasPredictmarker = false;
        result.predictmarker_ = 0;
        return this;
      }
      
      public bool HasManaburnmarker {
        get { return result.hasManaburnmarker; }
      }
      public int Manaburnmarker {
        get { return result.Manaburnmarker; }
        set { SetManaburnmarker(value); }
      }
      public Builder SetManaburnmarker(int value) {
        PrepareBuilder();
        result.hasManaburnmarker = true;
        result.manaburnmarker_ = value;
        return this;
      }
      public Builder ClearManaburnmarker() {
        PrepareBuilder();
        result.hasManaburnmarker = false;
        result.manaburnmarker_ = 0;
        return this;
      }
      
      public bool HasPoseID {
        get { return result.hasPoseID; }
      }
      public int PoseID {
        get { return result.PoseID; }
        set { SetPoseID(value); }
      }
      public Builder SetPoseID(int value) {
        PrepareBuilder();
        result.hasPoseID = true;
        result.poseID_ = value;
        return this;
      }
      public Builder ClearPoseID() {
        PrepareBuilder();
        result.hasPoseID = false;
        result.poseID_ = 0;
        return this;
      }
      
      public bool HasNomove {
        get { return result.hasNomove; }
      }
      public int Nomove {
        get { return result.Nomove; }
        set { SetNomove(value); }
      }
      public Builder SetNomove(int value) {
        PrepareBuilder();
        result.hasNomove = true;
        result.nomove_ = value;
        return this;
      }
      public Builder ClearNomove() {
        PrepareBuilder();
        result.hasNomove = false;
        result.nomove_ = 0;
        return this;
      }
      
      public bool HasPos {
       get { return result.hasPos; }
      }
      public global::core.MoveAble Pos {
        get { return result.Pos; }
        set { SetPos(value); }
      }
      public Builder SetPos(global::core.MoveAble value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = value;
        return this;
      }
      public Builder SetPos(global::core.MoveAble.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPos = true;
        result.pos_ = builderForValue.Build();
        return this;
      }
      public Builder MergePos(global::core.MoveAble value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPos &&
            result.pos_ != global::core.MoveAble.DefaultInstance) {
            result.pos_ = global::core.MoveAble.CreateBuilder(result.pos_).MergeFrom(value).BuildPartial();
        } else {
          result.pos_ = value;
        }
        result.hasPos = true;
        return this;
      }
      public Builder ClearPos() {
        PrepareBuilder();
        result.hasPos = false;
        result.pos_ = null;
        return this;
      }
    }
    static Charactor() {
      object.ReferenceEquals(global::world.Interface.WorldInterface.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
