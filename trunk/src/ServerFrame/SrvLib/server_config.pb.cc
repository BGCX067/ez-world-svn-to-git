// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace server_config {

namespace {

const ::google::protobuf::Descriptor* Path_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Path_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocketIO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocketIO_reflection_ = NULL;
const ::google::protobuf::Descriptor* Logic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Logic_ManagerLogic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logic_ManagerLogic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Logic_ManagerLogic_Styler_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logic_ManagerLogic_Styler_reflection_ = NULL;
const ::google::protobuf::Descriptor* Logic_GameLogic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logic_GameLogic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Logic_DbLogic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logic_DbLogic_reflection_ = NULL;
const ::google::protobuf::Descriptor* Logic_GameProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Logic_GameProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Logic_type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Server_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_5fconfig_2eproto() {
  protobuf_AddDesc_server_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server_config.proto");
  GOOGLE_CHECK(file != NULL);
  Path_descriptor_ = file->message_type(0);
  static const int Path_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, log_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, data_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, update_pak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, efficiency_file_),
  };
  Path_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Path_descriptor_,
      Path::default_instance_,
      Path_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Path, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Path));
  SocketIO_descriptor_ = file->message_type(1);
  static const int SocketIO_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, max_socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, recv_buf_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, send_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, send_buf_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, packet_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, packet_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, packet_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, discard_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, pend_limit_),
  };
  SocketIO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocketIO_descriptor_,
      SocketIO::default_instance_,
      SocketIO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocketIO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocketIO));
  Logic_descriptor_ = file->message_type(2);
  static const int Logic_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic, logic_dll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic, manager_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic, beat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic, listen_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic, manager_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic, proto_),
  };
  Logic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Logic_descriptor_,
      Logic::default_instance_,
      Logic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Logic));
  Logic_ManagerLogic_descriptor_ = Logic_descriptor_->nested_type(0);
  static const int Logic_ManagerLogic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_ManagerLogic, stylers_),
  };
  Logic_ManagerLogic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Logic_ManagerLogic_descriptor_,
      Logic_ManagerLogic::default_instance_,
      Logic_ManagerLogic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_ManagerLogic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_ManagerLogic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Logic_ManagerLogic));
  Logic_ManagerLogic_Styler_descriptor_ = Logic_ManagerLogic_descriptor_->nested_type(0);
  static const int Logic_ManagerLogic_Styler_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_ManagerLogic_Styler, unique_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_ManagerLogic_Styler, depends_),
  };
  Logic_ManagerLogic_Styler_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Logic_ManagerLogic_Styler_descriptor_,
      Logic_ManagerLogic_Styler::default_instance_,
      Logic_ManagerLogic_Styler_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_ManagerLogic_Styler, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_ManagerLogic_Styler, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Logic_ManagerLogic_Styler));
  Logic_GameLogic_descriptor_ = Logic_descriptor_->nested_type(1);
  static const int Logic_GameLogic_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_GameLogic, map_split_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_GameLogic, map_vis_zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_GameLogic, no_mob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_GameLogic, no_role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_GameLogic, newbie_line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_GameLogic, allow_debug_break_),
  };
  Logic_GameLogic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Logic_GameLogic_descriptor_,
      Logic_GameLogic::default_instance_,
      Logic_GameLogic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_GameLogic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_GameLogic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Logic_GameLogic));
  Logic_DbLogic_descriptor_ = Logic_descriptor_->nested_type(2);
  static const int Logic_DbLogic_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_DbLogic, minconn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_DbLogic, maxconn_),
  };
  Logic_DbLogic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Logic_DbLogic_descriptor_,
      Logic_DbLogic::default_instance_,
      Logic_DbLogic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_DbLogic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_DbLogic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Logic_DbLogic));
  Logic_GameProto_descriptor_ = Logic_descriptor_->nested_type(3);
  static const int Logic_GameProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_GameProto, desc_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_GameProto, data_file_),
  };
  Logic_GameProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Logic_GameProto_descriptor_,
      Logic_GameProto::default_instance_,
      Logic_GameProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_GameProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Logic_GameProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Logic_GameProto));
  Logic_type_descriptor_ = Logic_descriptor_->enum_type(0);
  Server_descriptor_ = file->message_type(3);
  static const int Server_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, socket_io_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, logic_),
  };
  Server_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Server_descriptor_,
      Server::default_instance_,
      Server_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Server));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Path_descriptor_, &Path::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocketIO_descriptor_, &SocketIO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Logic_descriptor_, &Logic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Logic_ManagerLogic_descriptor_, &Logic_ManagerLogic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Logic_ManagerLogic_Styler_descriptor_, &Logic_ManagerLogic_Styler::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Logic_GameLogic_descriptor_, &Logic_GameLogic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Logic_DbLogic_descriptor_, &Logic_DbLogic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Logic_GameProto_descriptor_, &Logic_GameProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Server_descriptor_, &Server::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_5fconfig_2eproto() {
  delete Path::default_instance_;
  delete Path_reflection_;
  delete SocketIO::default_instance_;
  delete SocketIO_reflection_;
  delete Logic::default_instance_;
  delete Logic_reflection_;
  delete Logic_ManagerLogic::default_instance_;
  delete Logic_ManagerLogic_reflection_;
  delete Logic_ManagerLogic_Styler::default_instance_;
  delete Logic_ManagerLogic_Styler_reflection_;
  delete Logic_GameLogic::default_instance_;
  delete Logic_GameLogic_reflection_;
  delete Logic_DbLogic::default_instance_;
  delete Logic_DbLogic_reflection_;
  delete Logic_GameProto::default_instance_;
  delete Logic_GameProto_reflection_;
  delete Server::default_instance_;
  delete Server_reflection_;
}

void protobuf_AddDesc_server_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023server_config.proto\022\rserver_config\"X\n\004"
    "Path\022\020\n\010log_file\030\001 \002(\t\022\021\n\tdata_path\030\002 \002("
    "\t\022\022\n\nupdate_pak\030\003 \002(\t\022\027\n\017efficiency_file"
    "\030\004 \002(\t\"\313\001\n\010SocketIO\022\022\n\nmax_socket\030\001 \002(\r\022"
    "\024\n\014recv_buf_len\030\002 \002(\r\022\021\n\tsend_pool\030\003 \002(\r"
    "\022\024\n\014send_buf_len\030\004 \002(\r\022\024\n\014packet_begin\030\005"
    " \002(\t\022\022\n\npacket_end\030\006 \002(\t\022\023\n\013packet_flag\030"
    "\007 \002(\010\022\031\n\021discard_threshold\030\010 \002(\r\022\022\n\npend"
    "_limit\030\t \002(\r\"\224\006\n\005Logic\022\021\n\tlogic_dll\030\001 \002("
    "\t\022\023\n\013server_name\030\002 \002(\t\022\022\n\nmanager_IP\030\003 \002"
    "(\t\022.\n\013server_type\030\004 \002(\0162\031.server_config."
    "Logic.type\022\014\n\004beat\030\005 \002(\005\022\021\n\tlisten_IP\030\006 "
    "\002(\t\0222\n\007manager\030\007 \001(\0132!.server_config.Log"
    "ic.ManagerLogic\022,\n\004game\030\010 \001(\0132\036.server_c"
    "onfig.Logic.GameLogic\022(\n\002db\030\t \001(\0132\034.serv"
    "er_config.Logic.DbLogic\022-\n\005proto\030\n \001(\0132\036"
    ".server_config.Logic.GameProto\032\217\001\n\014Manag"
    "erLogic\0229\n\007stylers\030\001 \003(\0132(.server_config"
    ".Logic.ManagerLogic.Styler\032D\n\006Styler\022\016\n\006"
    "unique\030\001 \002(\010\022*\n\007depends\030\002 \003(\0162\031.server_c"
    "onfig.Logic.type\032\212\001\n\tGameLogic\022\026\n\016map_sp"
    "lit_size\030\001 \002(\005\022\024\n\014map_vis_zone\030\002 \002(\005\022\016\n\006"
    "no_mob\030\003 \002(\010\022\017\n\007no_role\030\004 \002(\010\022\023\n\013newbie_"
    "line\030\005 \002(\005\022\031\n\021allow_debug_break\030\006 \002(\010\032+\n"
    "\007DbLogic\022\017\n\007MinConn\030\001 \002(\r\022\017\n\007MaxConn\030\002 \002"
    "(\r\0321\n\tGameProto\022\021\n\tdesc_file\030\001 \002(\t\022\021\n\tda"
    "ta_file\030\002 \002(\t\"D\n\004type\022\013\n\007Manager\020\000\022\010\n\004Ga"
    "te\020\001\022\t\n\005Login\020\002\022\010\n\004Game\020\003\022\010\n\004Calc\020\004\022\006\n\002A"
    "I\020\005\"|\n\006Server\022*\n\tsocket_io\030\001 \003(\0132\027.serve"
    "r_config.SocketIO\022!\n\004path\030\002 \002(\0132\023.server"
    "_config.Path\022#\n\005logic\030\003 \002(\0132\024.server_con"
    "fig.Logic", 1249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server_config.proto", &protobuf_RegisterTypes);
  Path::default_instance_ = new Path();
  SocketIO::default_instance_ = new SocketIO();
  Logic::default_instance_ = new Logic();
  Logic_ManagerLogic::default_instance_ = new Logic_ManagerLogic();
  Logic_ManagerLogic_Styler::default_instance_ = new Logic_ManagerLogic_Styler();
  Logic_GameLogic::default_instance_ = new Logic_GameLogic();
  Logic_DbLogic::default_instance_ = new Logic_DbLogic();
  Logic_GameProto::default_instance_ = new Logic_GameProto();
  Server::default_instance_ = new Server();
  Path::default_instance_->InitAsDefaultInstance();
  SocketIO::default_instance_->InitAsDefaultInstance();
  Logic::default_instance_->InitAsDefaultInstance();
  Logic_ManagerLogic::default_instance_->InitAsDefaultInstance();
  Logic_ManagerLogic_Styler::default_instance_->InitAsDefaultInstance();
  Logic_GameLogic::default_instance_->InitAsDefaultInstance();
  Logic_DbLogic::default_instance_->InitAsDefaultInstance();
  Logic_GameProto::default_instance_->InitAsDefaultInstance();
  Server::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_5fconfig_2eproto {
  StaticDescriptorInitializer_server_5fconfig_2eproto() {
    protobuf_AddDesc_server_5fconfig_2eproto();
  }
} static_descriptor_initializer_server_5fconfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Path::kLogFileFieldNumber;
const int Path::kDataPathFieldNumber;
const int Path::kUpdatePakFieldNumber;
const int Path::kEfficiencyFileFieldNumber;
#endif  // !_MSC_VER

Path::Path()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Path::InitAsDefaultInstance() {
}

Path::Path(const Path& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Path::SharedCtor() {
  _cached_size_ = 0;
  log_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  update_pak_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  efficiency_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Path::~Path() {
  SharedDtor();
}

void Path::SharedDtor() {
  if (log_file_ != &::google::protobuf::internal::kEmptyString) {
    delete log_file_;
  }
  if (data_path_ != &::google::protobuf::internal::kEmptyString) {
    delete data_path_;
  }
  if (update_pak_ != &::google::protobuf::internal::kEmptyString) {
    delete update_pak_;
  }
  if (efficiency_file_ != &::google::protobuf::internal::kEmptyString) {
    delete efficiency_file_;
  }
  if (this != default_instance_) {
  }
}

void Path::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Path_descriptor_;
}

const Path& Path::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconfig_2eproto();  return *default_instance_;
}

Path* Path::default_instance_ = NULL;

Path* Path::New() const {
  return new Path;
}

void Path::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_log_file()) {
      if (log_file_ != &::google::protobuf::internal::kEmptyString) {
        log_file_->clear();
      }
    }
    if (has_data_path()) {
      if (data_path_ != &::google::protobuf::internal::kEmptyString) {
        data_path_->clear();
      }
    }
    if (has_update_pak()) {
      if (update_pak_ != &::google::protobuf::internal::kEmptyString) {
        update_pak_->clear();
      }
    }
    if (has_efficiency_file()) {
      if (efficiency_file_ != &::google::protobuf::internal::kEmptyString) {
        efficiency_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string log_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_file().data(), this->log_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_path;
        break;
      }
      
      // required string data_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_path().data(), this->data_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_update_pak;
        break;
      }
      
      // required string update_pak = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_pak:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_pak()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update_pak().data(), this->update_pak().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_efficiency_file;
        break;
      }
      
      // required string efficiency_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_efficiency_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_efficiency_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->efficiency_file().data(), this->efficiency_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string log_file = 1;
  if (has_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_file().data(), this->log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->log_file(), output);
  }
  
  // required string data_path = 2;
  if (has_data_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_path().data(), this->data_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data_path(), output);
  }
  
  // required string update_pak = 3;
  if (has_update_pak()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_pak().data(), this->update_pak().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->update_pak(), output);
  }
  
  // required string efficiency_file = 4;
  if (has_efficiency_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->efficiency_file().data(), this->efficiency_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->efficiency_file(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Path::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string log_file = 1;
  if (has_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_file().data(), this->log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->log_file(), target);
  }
  
  // required string data_path = 2;
  if (has_data_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_path().data(), this->data_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_path(), target);
  }
  
  // required string update_pak = 3;
  if (has_update_pak()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_pak().data(), this->update_pak().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->update_pak(), target);
  }
  
  // required string efficiency_file = 4;
  if (has_efficiency_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->efficiency_file().data(), this->efficiency_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->efficiency_file(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Path::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string log_file = 1;
    if (has_log_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_file());
    }
    
    // required string data_path = 2;
    if (has_data_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_path());
    }
    
    // required string update_pak = 3;
    if (has_update_pak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_pak());
    }
    
    // required string efficiency_file = 4;
    if (has_efficiency_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->efficiency_file());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Path* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Path*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_log_file()) {
      set_log_file(from.log_file());
    }
    if (from.has_data_path()) {
      set_data_path(from.data_path());
    }
    if (from.has_update_pak()) {
      set_update_pak(from.update_pak());
    }
    if (from.has_efficiency_file()) {
      set_efficiency_file(from.efficiency_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Path::Swap(Path* other) {
  if (other != this) {
    std::swap(log_file_, other->log_file_);
    std::swap(data_path_, other->data_path_);
    std::swap(update_pak_, other->update_pak_);
    std::swap(efficiency_file_, other->efficiency_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Path_descriptor_;
  metadata.reflection = Path_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocketIO::kMaxSocketFieldNumber;
const int SocketIO::kRecvBufLenFieldNumber;
const int SocketIO::kSendPoolFieldNumber;
const int SocketIO::kSendBufLenFieldNumber;
const int SocketIO::kPacketBeginFieldNumber;
const int SocketIO::kPacketEndFieldNumber;
const int SocketIO::kPacketFlagFieldNumber;
const int SocketIO::kDiscardThresholdFieldNumber;
const int SocketIO::kPendLimitFieldNumber;
#endif  // !_MSC_VER

SocketIO::SocketIO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SocketIO::InitAsDefaultInstance() {
}

SocketIO::SocketIO(const SocketIO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SocketIO::SharedCtor() {
  _cached_size_ = 0;
  max_socket_ = 0u;
  recv_buf_len_ = 0u;
  send_pool_ = 0u;
  send_buf_len_ = 0u;
  packet_begin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  packet_end_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  packet_flag_ = false;
  discard_threshold_ = 0u;
  pend_limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocketIO::~SocketIO() {
  SharedDtor();
}

void SocketIO::SharedDtor() {
  if (packet_begin_ != &::google::protobuf::internal::kEmptyString) {
    delete packet_begin_;
  }
  if (packet_end_ != &::google::protobuf::internal::kEmptyString) {
    delete packet_end_;
  }
  if (this != default_instance_) {
  }
}

void SocketIO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocketIO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocketIO_descriptor_;
}

const SocketIO& SocketIO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconfig_2eproto();  return *default_instance_;
}

SocketIO* SocketIO::default_instance_ = NULL;

SocketIO* SocketIO::New() const {
  return new SocketIO;
}

void SocketIO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_socket_ = 0u;
    recv_buf_len_ = 0u;
    send_pool_ = 0u;
    send_buf_len_ = 0u;
    if (has_packet_begin()) {
      if (packet_begin_ != &::google::protobuf::internal::kEmptyString) {
        packet_begin_->clear();
      }
    }
    if (has_packet_end()) {
      if (packet_end_ != &::google::protobuf::internal::kEmptyString) {
        packet_end_->clear();
      }
    }
    packet_flag_ = false;
    discard_threshold_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pend_limit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocketIO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 max_socket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_socket_)));
          set_has_max_socket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recv_buf_len;
        break;
      }
      
      // required uint32 recv_buf_len = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_buf_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recv_buf_len_)));
          set_has_recv_buf_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_send_pool;
        break;
      }
      
      // required uint32 send_pool = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_pool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_pool_)));
          set_has_send_pool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_send_buf_len;
        break;
      }
      
      // required uint32 send_buf_len = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_buf_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_buf_len_)));
          set_has_send_buf_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_packet_begin;
        break;
      }
      
      // required string packet_begin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet_begin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packet_begin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->packet_begin().data(), this->packet_begin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_packet_end;
        break;
      }
      
      // required string packet_end = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packet_end()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->packet_end().data(), this->packet_end().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_packet_flag;
        break;
      }
      
      // required bool packet_flag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_packet_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &packet_flag_)));
          set_has_packet_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_discard_threshold;
        break;
      }
      
      // required uint32 discard_threshold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discard_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discard_threshold_)));
          set_has_discard_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pend_limit;
        break;
      }
      
      // required uint32 pend_limit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pend_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pend_limit_)));
          set_has_pend_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SocketIO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 max_socket = 1;
  if (has_max_socket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->max_socket(), output);
  }
  
  // required uint32 recv_buf_len = 2;
  if (has_recv_buf_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->recv_buf_len(), output);
  }
  
  // required uint32 send_pool = 3;
  if (has_send_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->send_pool(), output);
  }
  
  // required uint32 send_buf_len = 4;
  if (has_send_buf_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->send_buf_len(), output);
  }
  
  // required string packet_begin = 5;
  if (has_packet_begin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packet_begin().data(), this->packet_begin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->packet_begin(), output);
  }
  
  // required string packet_end = 6;
  if (has_packet_end()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packet_end().data(), this->packet_end().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->packet_end(), output);
  }
  
  // required bool packet_flag = 7;
  if (has_packet_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->packet_flag(), output);
  }
  
  // required uint32 discard_threshold = 8;
  if (has_discard_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->discard_threshold(), output);
  }
  
  // required uint32 pend_limit = 9;
  if (has_pend_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pend_limit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SocketIO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 max_socket = 1;
  if (has_max_socket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->max_socket(), target);
  }
  
  // required uint32 recv_buf_len = 2;
  if (has_recv_buf_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->recv_buf_len(), target);
  }
  
  // required uint32 send_pool = 3;
  if (has_send_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->send_pool(), target);
  }
  
  // required uint32 send_buf_len = 4;
  if (has_send_buf_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->send_buf_len(), target);
  }
  
  // required string packet_begin = 5;
  if (has_packet_begin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packet_begin().data(), this->packet_begin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->packet_begin(), target);
  }
  
  // required string packet_end = 6;
  if (has_packet_end()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->packet_end().data(), this->packet_end().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->packet_end(), target);
  }
  
  // required bool packet_flag = 7;
  if (has_packet_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->packet_flag(), target);
  }
  
  // required uint32 discard_threshold = 8;
  if (has_discard_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->discard_threshold(), target);
  }
  
  // required uint32 pend_limit = 9;
  if (has_pend_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pend_limit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SocketIO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 max_socket = 1;
    if (has_max_socket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_socket());
    }
    
    // required uint32 recv_buf_len = 2;
    if (has_recv_buf_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recv_buf_len());
    }
    
    // required uint32 send_pool = 3;
    if (has_send_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_pool());
    }
    
    // required uint32 send_buf_len = 4;
    if (has_send_buf_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_buf_len());
    }
    
    // required string packet_begin = 5;
    if (has_packet_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packet_begin());
    }
    
    // required string packet_end = 6;
    if (has_packet_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packet_end());
    }
    
    // required bool packet_flag = 7;
    if (has_packet_flag()) {
      total_size += 1 + 1;
    }
    
    // required uint32 discard_threshold = 8;
    if (has_discard_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discard_threshold());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 pend_limit = 9;
    if (has_pend_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pend_limit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocketIO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocketIO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocketIO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocketIO::MergeFrom(const SocketIO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_socket()) {
      set_max_socket(from.max_socket());
    }
    if (from.has_recv_buf_len()) {
      set_recv_buf_len(from.recv_buf_len());
    }
    if (from.has_send_pool()) {
      set_send_pool(from.send_pool());
    }
    if (from.has_send_buf_len()) {
      set_send_buf_len(from.send_buf_len());
    }
    if (from.has_packet_begin()) {
      set_packet_begin(from.packet_begin());
    }
    if (from.has_packet_end()) {
      set_packet_end(from.packet_end());
    }
    if (from.has_packet_flag()) {
      set_packet_flag(from.packet_flag());
    }
    if (from.has_discard_threshold()) {
      set_discard_threshold(from.discard_threshold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pend_limit()) {
      set_pend_limit(from.pend_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocketIO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocketIO::CopyFrom(const SocketIO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketIO::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void SocketIO::Swap(SocketIO* other) {
  if (other != this) {
    std::swap(max_socket_, other->max_socket_);
    std::swap(recv_buf_len_, other->recv_buf_len_);
    std::swap(send_pool_, other->send_pool_);
    std::swap(send_buf_len_, other->send_buf_len_);
    std::swap(packet_begin_, other->packet_begin_);
    std::swap(packet_end_, other->packet_end_);
    std::swap(packet_flag_, other->packet_flag_);
    std::swap(discard_threshold_, other->discard_threshold_);
    std::swap(pend_limit_, other->pend_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocketIO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocketIO_descriptor_;
  metadata.reflection = SocketIO_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Logic_type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logic_type_descriptor_;
}
bool Logic_type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Logic_type Logic::Manager;
const Logic_type Logic::Gate;
const Logic_type Logic::Login;
const Logic_type Logic::Game;
const Logic_type Logic::Calc;
const Logic_type Logic::AI;
const Logic_type Logic::type_MIN;
const Logic_type Logic::type_MAX;
const int Logic::type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Logic_ManagerLogic_Styler::kUniqueFieldNumber;
const int Logic_ManagerLogic_Styler::kDependsFieldNumber;
#endif  // !_MSC_VER

Logic_ManagerLogic_Styler::Logic_ManagerLogic_Styler()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Logic_ManagerLogic_Styler::InitAsDefaultInstance() {
}

Logic_ManagerLogic_Styler::Logic_ManagerLogic_Styler(const Logic_ManagerLogic_Styler& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Logic_ManagerLogic_Styler::SharedCtor() {
  _cached_size_ = 0;
  unique_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Logic_ManagerLogic_Styler::~Logic_ManagerLogic_Styler() {
  SharedDtor();
}

void Logic_ManagerLogic_Styler::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Logic_ManagerLogic_Styler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logic_ManagerLogic_Styler::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logic_ManagerLogic_Styler_descriptor_;
}

const Logic_ManagerLogic_Styler& Logic_ManagerLogic_Styler::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconfig_2eproto();  return *default_instance_;
}

Logic_ManagerLogic_Styler* Logic_ManagerLogic_Styler::default_instance_ = NULL;

Logic_ManagerLogic_Styler* Logic_ManagerLogic_Styler::New() const {
  return new Logic_ManagerLogic_Styler;
}

void Logic_ManagerLogic_Styler::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unique_ = false;
  }
  depends_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Logic_ManagerLogic_Styler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool unique = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unique_)));
          set_has_unique();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_depends;
        break;
      }
      
      // repeated .server_config.Logic.type depends = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depends:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_config::Logic_type_IsValid(value)) {
            add_depends(static_cast< ::server_config::Logic_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::server_config::Logic_type_IsValid,
                 this->mutable_depends())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_depends;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Logic_ManagerLogic_Styler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool unique = 1;
  if (has_unique()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->unique(), output);
  }
  
  // repeated .server_config.Logic.type depends = 2;
  for (int i = 0; i < this->depends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->depends(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Logic_ManagerLogic_Styler::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool unique = 1;
  if (has_unique()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->unique(), target);
  }
  
  // repeated .server_config.Logic.type depends = 2;
  for (int i = 0; i < this->depends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->depends(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Logic_ManagerLogic_Styler::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool unique = 1;
    if (has_unique()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .server_config.Logic.type depends = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->depends_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->depends(i));
    }
    total_size += 1 * this->depends_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logic_ManagerLogic_Styler::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Logic_ManagerLogic_Styler* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Logic_ManagerLogic_Styler*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Logic_ManagerLogic_Styler::MergeFrom(const Logic_ManagerLogic_Styler& from) {
  GOOGLE_CHECK_NE(&from, this);
  depends_.MergeFrom(from.depends_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unique()) {
      set_unique(from.unique());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Logic_ManagerLogic_Styler::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logic_ManagerLogic_Styler::CopyFrom(const Logic_ManagerLogic_Styler& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logic_ManagerLogic_Styler::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Logic_ManagerLogic_Styler::Swap(Logic_ManagerLogic_Styler* other) {
  if (other != this) {
    std::swap(unique_, other->unique_);
    depends_.Swap(&other->depends_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Logic_ManagerLogic_Styler::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logic_ManagerLogic_Styler_descriptor_;
  metadata.reflection = Logic_ManagerLogic_Styler_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Logic_ManagerLogic::kStylersFieldNumber;
#endif  // !_MSC_VER

Logic_ManagerLogic::Logic_ManagerLogic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Logic_ManagerLogic::InitAsDefaultInstance() {
}

Logic_ManagerLogic::Logic_ManagerLogic(const Logic_ManagerLogic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Logic_ManagerLogic::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Logic_ManagerLogic::~Logic_ManagerLogic() {
  SharedDtor();
}

void Logic_ManagerLogic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Logic_ManagerLogic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logic_ManagerLogic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logic_ManagerLogic_descriptor_;
}

const Logic_ManagerLogic& Logic_ManagerLogic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconfig_2eproto();  return *default_instance_;
}

Logic_ManagerLogic* Logic_ManagerLogic::default_instance_ = NULL;

Logic_ManagerLogic* Logic_ManagerLogic::New() const {
  return new Logic_ManagerLogic;
}

void Logic_ManagerLogic::Clear() {
  stylers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Logic_ManagerLogic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server_config.Logic.ManagerLogic.Styler stylers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stylers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stylers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stylers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Logic_ManagerLogic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .server_config.Logic.ManagerLogic.Styler stylers = 1;
  for (int i = 0; i < this->stylers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stylers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Logic_ManagerLogic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .server_config.Logic.ManagerLogic.Styler stylers = 1;
  for (int i = 0; i < this->stylers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stylers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Logic_ManagerLogic::ByteSize() const {
  int total_size = 0;
  
  // repeated .server_config.Logic.ManagerLogic.Styler stylers = 1;
  total_size += 1 * this->stylers_size();
  for (int i = 0; i < this->stylers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stylers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logic_ManagerLogic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Logic_ManagerLogic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Logic_ManagerLogic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Logic_ManagerLogic::MergeFrom(const Logic_ManagerLogic& from) {
  GOOGLE_CHECK_NE(&from, this);
  stylers_.MergeFrom(from.stylers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Logic_ManagerLogic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logic_ManagerLogic::CopyFrom(const Logic_ManagerLogic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logic_ManagerLogic::IsInitialized() const {
  
  for (int i = 0; i < stylers_size(); i++) {
    if (!this->stylers(i).IsInitialized()) return false;
  }
  return true;
}

void Logic_ManagerLogic::Swap(Logic_ManagerLogic* other) {
  if (other != this) {
    stylers_.Swap(&other->stylers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Logic_ManagerLogic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logic_ManagerLogic_descriptor_;
  metadata.reflection = Logic_ManagerLogic_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Logic_GameLogic::kMapSplitSizeFieldNumber;
const int Logic_GameLogic::kMapVisZoneFieldNumber;
const int Logic_GameLogic::kNoMobFieldNumber;
const int Logic_GameLogic::kNoRoleFieldNumber;
const int Logic_GameLogic::kNewbieLineFieldNumber;
const int Logic_GameLogic::kAllowDebugBreakFieldNumber;
#endif  // !_MSC_VER

Logic_GameLogic::Logic_GameLogic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Logic_GameLogic::InitAsDefaultInstance() {
}

Logic_GameLogic::Logic_GameLogic(const Logic_GameLogic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Logic_GameLogic::SharedCtor() {
  _cached_size_ = 0;
  map_split_size_ = 0;
  map_vis_zone_ = 0;
  no_mob_ = false;
  no_role_ = false;
  newbie_line_ = 0;
  allow_debug_break_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Logic_GameLogic::~Logic_GameLogic() {
  SharedDtor();
}

void Logic_GameLogic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Logic_GameLogic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logic_GameLogic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logic_GameLogic_descriptor_;
}

const Logic_GameLogic& Logic_GameLogic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconfig_2eproto();  return *default_instance_;
}

Logic_GameLogic* Logic_GameLogic::default_instance_ = NULL;

Logic_GameLogic* Logic_GameLogic::New() const {
  return new Logic_GameLogic;
}

void Logic_GameLogic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_split_size_ = 0;
    map_vis_zone_ = 0;
    no_mob_ = false;
    no_role_ = false;
    newbie_line_ = 0;
    allow_debug_break_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Logic_GameLogic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 map_split_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_split_size_)));
          set_has_map_split_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_map_vis_zone;
        break;
      }
      
      // required int32 map_vis_zone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_vis_zone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_vis_zone_)));
          set_has_map_vis_zone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_no_mob;
        break;
      }
      
      // required bool no_mob = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_mob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_mob_)));
          set_has_no_mob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_no_role;
        break;
      }
      
      // required bool no_role = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_no_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_role_)));
          set_has_no_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_newbie_line;
        break;
      }
      
      // required int32 newbie_line = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newbie_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &newbie_line_)));
          set_has_newbie_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_allow_debug_break;
        break;
      }
      
      // required bool allow_debug_break = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_debug_break:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_debug_break_)));
          set_has_allow_debug_break();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Logic_GameLogic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 map_split_size = 1;
  if (has_map_split_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->map_split_size(), output);
  }
  
  // required int32 map_vis_zone = 2;
  if (has_map_vis_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->map_vis_zone(), output);
  }
  
  // required bool no_mob = 3;
  if (has_no_mob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->no_mob(), output);
  }
  
  // required bool no_role = 4;
  if (has_no_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->no_role(), output);
  }
  
  // required int32 newbie_line = 5;
  if (has_newbie_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->newbie_line(), output);
  }
  
  // required bool allow_debug_break = 6;
  if (has_allow_debug_break()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->allow_debug_break(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Logic_GameLogic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 map_split_size = 1;
  if (has_map_split_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->map_split_size(), target);
  }
  
  // required int32 map_vis_zone = 2;
  if (has_map_vis_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->map_vis_zone(), target);
  }
  
  // required bool no_mob = 3;
  if (has_no_mob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->no_mob(), target);
  }
  
  // required bool no_role = 4;
  if (has_no_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->no_role(), target);
  }
  
  // required int32 newbie_line = 5;
  if (has_newbie_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->newbie_line(), target);
  }
  
  // required bool allow_debug_break = 6;
  if (has_allow_debug_break()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->allow_debug_break(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Logic_GameLogic::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 map_split_size = 1;
    if (has_map_split_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_split_size());
    }
    
    // required int32 map_vis_zone = 2;
    if (has_map_vis_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_vis_zone());
    }
    
    // required bool no_mob = 3;
    if (has_no_mob()) {
      total_size += 1 + 1;
    }
    
    // required bool no_role = 4;
    if (has_no_role()) {
      total_size += 1 + 1;
    }
    
    // required int32 newbie_line = 5;
    if (has_newbie_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->newbie_line());
    }
    
    // required bool allow_debug_break = 6;
    if (has_allow_debug_break()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logic_GameLogic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Logic_GameLogic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Logic_GameLogic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Logic_GameLogic::MergeFrom(const Logic_GameLogic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_split_size()) {
      set_map_split_size(from.map_split_size());
    }
    if (from.has_map_vis_zone()) {
      set_map_vis_zone(from.map_vis_zone());
    }
    if (from.has_no_mob()) {
      set_no_mob(from.no_mob());
    }
    if (from.has_no_role()) {
      set_no_role(from.no_role());
    }
    if (from.has_newbie_line()) {
      set_newbie_line(from.newbie_line());
    }
    if (from.has_allow_debug_break()) {
      set_allow_debug_break(from.allow_debug_break());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Logic_GameLogic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logic_GameLogic::CopyFrom(const Logic_GameLogic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logic_GameLogic::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void Logic_GameLogic::Swap(Logic_GameLogic* other) {
  if (other != this) {
    std::swap(map_split_size_, other->map_split_size_);
    std::swap(map_vis_zone_, other->map_vis_zone_);
    std::swap(no_mob_, other->no_mob_);
    std::swap(no_role_, other->no_role_);
    std::swap(newbie_line_, other->newbie_line_);
    std::swap(allow_debug_break_, other->allow_debug_break_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Logic_GameLogic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logic_GameLogic_descriptor_;
  metadata.reflection = Logic_GameLogic_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Logic_DbLogic::kMinConnFieldNumber;
const int Logic_DbLogic::kMaxConnFieldNumber;
#endif  // !_MSC_VER

Logic_DbLogic::Logic_DbLogic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Logic_DbLogic::InitAsDefaultInstance() {
}

Logic_DbLogic::Logic_DbLogic(const Logic_DbLogic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Logic_DbLogic::SharedCtor() {
  _cached_size_ = 0;
  minconn_ = 0u;
  maxconn_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Logic_DbLogic::~Logic_DbLogic() {
  SharedDtor();
}

void Logic_DbLogic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Logic_DbLogic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logic_DbLogic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logic_DbLogic_descriptor_;
}

const Logic_DbLogic& Logic_DbLogic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconfig_2eproto();  return *default_instance_;
}

Logic_DbLogic* Logic_DbLogic::default_instance_ = NULL;

Logic_DbLogic* Logic_DbLogic::New() const {
  return new Logic_DbLogic;
}

void Logic_DbLogic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    minconn_ = 0u;
    maxconn_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Logic_DbLogic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MinConn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minconn_)));
          set_has_minconn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MaxConn;
        break;
      }
      
      // required uint32 MaxConn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxConn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxconn_)));
          set_has_maxconn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Logic_DbLogic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MinConn = 1;
  if (has_minconn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->minconn(), output);
  }
  
  // required uint32 MaxConn = 2;
  if (has_maxconn()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxconn(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Logic_DbLogic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 MinConn = 1;
  if (has_minconn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->minconn(), target);
  }
  
  // required uint32 MaxConn = 2;
  if (has_maxconn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxconn(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Logic_DbLogic::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MinConn = 1;
    if (has_minconn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minconn());
    }
    
    // required uint32 MaxConn = 2;
    if (has_maxconn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxconn());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logic_DbLogic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Logic_DbLogic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Logic_DbLogic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Logic_DbLogic::MergeFrom(const Logic_DbLogic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_minconn()) {
      set_minconn(from.minconn());
    }
    if (from.has_maxconn()) {
      set_maxconn(from.maxconn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Logic_DbLogic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logic_DbLogic::CopyFrom(const Logic_DbLogic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logic_DbLogic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Logic_DbLogic::Swap(Logic_DbLogic* other) {
  if (other != this) {
    std::swap(minconn_, other->minconn_);
    std::swap(maxconn_, other->maxconn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Logic_DbLogic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logic_DbLogic_descriptor_;
  metadata.reflection = Logic_DbLogic_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Logic_GameProto::kDescFileFieldNumber;
const int Logic_GameProto::kDataFileFieldNumber;
#endif  // !_MSC_VER

Logic_GameProto::Logic_GameProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Logic_GameProto::InitAsDefaultInstance() {
}

Logic_GameProto::Logic_GameProto(const Logic_GameProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Logic_GameProto::SharedCtor() {
  _cached_size_ = 0;
  desc_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Logic_GameProto::~Logic_GameProto() {
  SharedDtor();
}

void Logic_GameProto::SharedDtor() {
  if (desc_file_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_file_;
  }
  if (data_file_ != &::google::protobuf::internal::kEmptyString) {
    delete data_file_;
  }
  if (this != default_instance_) {
  }
}

void Logic_GameProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logic_GameProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logic_GameProto_descriptor_;
}

const Logic_GameProto& Logic_GameProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconfig_2eproto();  return *default_instance_;
}

Logic_GameProto* Logic_GameProto::default_instance_ = NULL;

Logic_GameProto* Logic_GameProto::New() const {
  return new Logic_GameProto;
}

void Logic_GameProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_desc_file()) {
      if (desc_file_ != &::google::protobuf::internal::kEmptyString) {
        desc_file_->clear();
      }
    }
    if (has_data_file()) {
      if (data_file_ != &::google::protobuf::internal::kEmptyString) {
        data_file_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Logic_GameProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string desc_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc_file().data(), this->desc_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data_file;
        break;
      }
      
      // required string data_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_file().data(), this->data_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Logic_GameProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string desc_file = 1;
  if (has_desc_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_file().data(), this->desc_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->desc_file(), output);
  }
  
  // required string data_file = 2;
  if (has_data_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_file().data(), this->data_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data_file(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Logic_GameProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string desc_file = 1;
  if (has_desc_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc_file().data(), this->desc_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->desc_file(), target);
  }
  
  // required string data_file = 2;
  if (has_data_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_file().data(), this->data_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_file(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Logic_GameProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string desc_file = 1;
    if (has_desc_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc_file());
    }
    
    // required string data_file = 2;
    if (has_data_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_file());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logic_GameProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Logic_GameProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Logic_GameProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Logic_GameProto::MergeFrom(const Logic_GameProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desc_file()) {
      set_desc_file(from.desc_file());
    }
    if (from.has_data_file()) {
      set_data_file(from.data_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Logic_GameProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logic_GameProto::CopyFrom(const Logic_GameProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logic_GameProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Logic_GameProto::Swap(Logic_GameProto* other) {
  if (other != this) {
    std::swap(desc_file_, other->desc_file_);
    std::swap(data_file_, other->data_file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Logic_GameProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logic_GameProto_descriptor_;
  metadata.reflection = Logic_GameProto_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Logic::kLogicDllFieldNumber;
const int Logic::kServerNameFieldNumber;
const int Logic::kManagerIPFieldNumber;
const int Logic::kServerTypeFieldNumber;
const int Logic::kBeatFieldNumber;
const int Logic::kListenIPFieldNumber;
const int Logic::kManagerFieldNumber;
const int Logic::kGameFieldNumber;
const int Logic::kDbFieldNumber;
const int Logic::kProtoFieldNumber;
#endif  // !_MSC_VER

Logic::Logic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Logic::InitAsDefaultInstance() {
  manager_ = const_cast< ::server_config::Logic_ManagerLogic*>(&::server_config::Logic_ManagerLogic::default_instance());
  game_ = const_cast< ::server_config::Logic_GameLogic*>(&::server_config::Logic_GameLogic::default_instance());
  db_ = const_cast< ::server_config::Logic_DbLogic*>(&::server_config::Logic_DbLogic::default_instance());
  proto_ = const_cast< ::server_config::Logic_GameProto*>(&::server_config::Logic_GameProto::default_instance());
}

Logic::Logic(const Logic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Logic::SharedCtor() {
  _cached_size_ = 0;
  logic_dll_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manager_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_type_ = 0;
  beat_ = 0;
  listen_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manager_ = NULL;
  game_ = NULL;
  db_ = NULL;
  proto_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Logic::~Logic() {
  SharedDtor();
}

void Logic::SharedDtor() {
  if (logic_dll_ != &::google::protobuf::internal::kEmptyString) {
    delete logic_dll_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (manager_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete manager_ip_;
  }
  if (listen_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete listen_ip_;
  }
  if (this != default_instance_) {
    delete manager_;
    delete game_;
    delete db_;
    delete proto_;
  }
}

void Logic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Logic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Logic_descriptor_;
}

const Logic& Logic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconfig_2eproto();  return *default_instance_;
}

Logic* Logic::default_instance_ = NULL;

Logic* Logic::New() const {
  return new Logic;
}

void Logic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_logic_dll()) {
      if (logic_dll_ != &::google::protobuf::internal::kEmptyString) {
        logic_dll_->clear();
      }
    }
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_manager_ip()) {
      if (manager_ip_ != &::google::protobuf::internal::kEmptyString) {
        manager_ip_->clear();
      }
    }
    server_type_ = 0;
    beat_ = 0;
    if (has_listen_ip()) {
      if (listen_ip_ != &::google::protobuf::internal::kEmptyString) {
        listen_ip_->clear();
      }
    }
    if (has_manager()) {
      if (manager_ != NULL) manager_->::server_config::Logic_ManagerLogic::Clear();
    }
    if (has_game()) {
      if (game_ != NULL) game_->::server_config::Logic_GameLogic::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_db()) {
      if (db_ != NULL) db_->::server_config::Logic_DbLogic::Clear();
    }
    if (has_proto()) {
      if (proto_ != NULL) proto_->::server_config::Logic_GameProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Logic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string logic_dll = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logic_dll()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logic_dll().data(), this->logic_dll().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }
      
      // required string server_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_manager_IP;
        break;
      }
      
      // required string manager_IP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manager_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manager_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manager_ip().data(), this->manager_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_server_type;
        break;
      }
      
      // required .server_config.Logic.type server_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::server_config::Logic_type_IsValid(value)) {
            set_server_type(static_cast< ::server_config::Logic_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_beat;
        break;
      }
      
      // required int32 beat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beat_)));
          set_has_beat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_listen_IP;
        break;
      }
      
      // required string listen_IP = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_listen_IP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_listen_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->listen_ip().data(), this->listen_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_manager;
        break;
      }
      
      // optional .server_config.Logic.ManagerLogic manager = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manager:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manager()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_game;
        break;
      }
      
      // optional .server_config.Logic.GameLogic game = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_db;
        break;
      }
      
      // optional .server_config.Logic.DbLogic db = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_proto;
        break;
      }
      
      // optional .server_config.Logic.GameProto proto = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proto()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Logic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string logic_dll = 1;
  if (has_logic_dll()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logic_dll().data(), this->logic_dll().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->logic_dll(), output);
  }
  
  // required string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_name(), output);
  }
  
  // required string manager_IP = 3;
  if (has_manager_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manager_ip().data(), this->manager_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->manager_ip(), output);
  }
  
  // required .server_config.Logic.type server_type = 4;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->server_type(), output);
  }
  
  // required int32 beat = 5;
  if (has_beat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->beat(), output);
  }
  
  // required string listen_IP = 6;
  if (has_listen_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listen_ip().data(), this->listen_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->listen_ip(), output);
  }
  
  // optional .server_config.Logic.ManagerLogic manager = 7;
  if (has_manager()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->manager(), output);
  }
  
  // optional .server_config.Logic.GameLogic game = 8;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->game(), output);
  }
  
  // optional .server_config.Logic.DbLogic db = 9;
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->db(), output);
  }
  
  // optional .server_config.Logic.GameProto proto = 10;
  if (has_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->proto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Logic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string logic_dll = 1;
  if (has_logic_dll()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logic_dll().data(), this->logic_dll().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->logic_dll(), target);
  }
  
  // required string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }
  
  // required string manager_IP = 3;
  if (has_manager_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manager_ip().data(), this->manager_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->manager_ip(), target);
  }
  
  // required .server_config.Logic.type server_type = 4;
  if (has_server_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->server_type(), target);
  }
  
  // required int32 beat = 5;
  if (has_beat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->beat(), target);
  }
  
  // required string listen_IP = 6;
  if (has_listen_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->listen_ip().data(), this->listen_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->listen_ip(), target);
  }
  
  // optional .server_config.Logic.ManagerLogic manager = 7;
  if (has_manager()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->manager(), target);
  }
  
  // optional .server_config.Logic.GameLogic game = 8;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->game(), target);
  }
  
  // optional .server_config.Logic.DbLogic db = 9;
  if (has_db()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->db(), target);
  }
  
  // optional .server_config.Logic.GameProto proto = 10;
  if (has_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->proto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Logic::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string logic_dll = 1;
    if (has_logic_dll()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logic_dll());
    }
    
    // required string server_name = 2;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }
    
    // required string manager_IP = 3;
    if (has_manager_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manager_ip());
    }
    
    // required .server_config.Logic.type server_type = 4;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->server_type());
    }
    
    // required int32 beat = 5;
    if (has_beat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beat());
    }
    
    // required string listen_IP = 6;
    if (has_listen_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->listen_ip());
    }
    
    // optional .server_config.Logic.ManagerLogic manager = 7;
    if (has_manager()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manager());
    }
    
    // optional .server_config.Logic.GameLogic game = 8;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .server_config.Logic.DbLogic db = 9;
    if (has_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->db());
    }
    
    // optional .server_config.Logic.GameProto proto = 10;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proto());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Logic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Logic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Logic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Logic::MergeFrom(const Logic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_logic_dll()) {
      set_logic_dll(from.logic_dll());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_manager_ip()) {
      set_manager_ip(from.manager_ip());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_beat()) {
      set_beat(from.beat());
    }
    if (from.has_listen_ip()) {
      set_listen_ip(from.listen_ip());
    }
    if (from.has_manager()) {
      mutable_manager()->::server_config::Logic_ManagerLogic::MergeFrom(from.manager());
    }
    if (from.has_game()) {
      mutable_game()->::server_config::Logic_GameLogic::MergeFrom(from.game());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_db()) {
      mutable_db()->::server_config::Logic_DbLogic::MergeFrom(from.db());
    }
    if (from.has_proto()) {
      mutable_proto()->::server_config::Logic_GameProto::MergeFrom(from.proto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Logic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Logic::CopyFrom(const Logic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Logic::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_manager()) {
    if (!this->manager().IsInitialized()) return false;
  }
  if (has_game()) {
    if (!this->game().IsInitialized()) return false;
  }
  if (has_db()) {
    if (!this->db().IsInitialized()) return false;
  }
  if (has_proto()) {
    if (!this->proto().IsInitialized()) return false;
  }
  return true;
}

void Logic::Swap(Logic* other) {
  if (other != this) {
    std::swap(logic_dll_, other->logic_dll_);
    std::swap(server_name_, other->server_name_);
    std::swap(manager_ip_, other->manager_ip_);
    std::swap(server_type_, other->server_type_);
    std::swap(beat_, other->beat_);
    std::swap(listen_ip_, other->listen_ip_);
    std::swap(manager_, other->manager_);
    std::swap(game_, other->game_);
    std::swap(db_, other->db_);
    std::swap(proto_, other->proto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Logic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Logic_descriptor_;
  metadata.reflection = Logic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Server::kSocketIoFieldNumber;
const int Server::kPathFieldNumber;
const int Server::kLogicFieldNumber;
#endif  // !_MSC_VER

Server::Server()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Server::InitAsDefaultInstance() {
  path_ = const_cast< ::server_config::Path*>(&::server_config::Path::default_instance());
  logic_ = const_cast< ::server_config::Logic*>(&::server_config::Logic::default_instance());
}

Server::Server(const Server& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Server::SharedCtor() {
  _cached_size_ = 0;
  path_ = NULL;
  logic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Server::~Server() {
  SharedDtor();
}

void Server::SharedDtor() {
  if (this != default_instance_) {
    delete path_;
    delete logic_;
  }
}

void Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_descriptor_;
}

const Server& Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_5fconfig_2eproto();  return *default_instance_;
}

Server* Server::default_instance_ = NULL;

Server* Server::New() const {
  return new Server;
}

void Server::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_path()) {
      if (path_ != NULL) path_->::server_config::Path::Clear();
    }
    if (has_logic()) {
      if (logic_ != NULL) logic_->::server_config::Logic::Clear();
    }
  }
  socket_io_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .server_config.SocketIO socket_io = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_socket_io:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_socket_io()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_socket_io;
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // required .server_config.Path path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_logic;
        break;
      }
      
      // required .server_config.Logic logic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .server_config.SocketIO socket_io = 1;
  for (int i = 0; i < this->socket_io_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->socket_io(i), output);
  }
  
  // required .server_config.Path path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path(), output);
  }
  
  // required .server_config.Logic logic = 3;
  if (has_logic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->logic(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Server::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .server_config.SocketIO socket_io = 1;
  for (int i = 0; i < this->socket_io_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->socket_io(i), target);
  }
  
  // required .server_config.Path path = 2;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->path(), target);
  }
  
  // required .server_config.Logic logic = 3;
  if (has_logic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->logic(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Server::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .server_config.Path path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path());
    }
    
    // required .server_config.Logic logic = 3;
    if (has_logic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logic());
    }
    
  }
  // repeated .server_config.SocketIO socket_io = 1;
  total_size += 1 * this->socket_io_size();
  for (int i = 0; i < this->socket_io_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->socket_io(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Server* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Server*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
  GOOGLE_CHECK_NE(&from, this);
  socket_io_.MergeFrom(from.socket_io_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_path()) {
      mutable_path()->::server_config::Path::MergeFrom(from.path());
    }
    if (from.has_logic()) {
      mutable_logic()->::server_config::Logic::MergeFrom(from.logic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Server::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  for (int i = 0; i < socket_io_size(); i++) {
    if (!this->socket_io(i).IsInitialized()) return false;
  }
  if (has_path()) {
    if (!this->path().IsInitialized()) return false;
  }
  if (has_logic()) {
    if (!this->logic().IsInitialized()) return false;
  }
  return true;
}

void Server::Swap(Server* other) {
  if (other != this) {
    socket_io_.Swap(&other->socket_io_);
    std::swap(path_, other->path_);
    std::swap(logic_, other->logic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Server_descriptor_;
  metadata.reflection = Server_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server_config

// @@protoc_insertion_point(global_scope)
