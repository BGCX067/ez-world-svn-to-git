// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_config.proto

#ifndef PROTOBUF_server_5fconfig_2eproto__INCLUDED
#define PROTOBUF_server_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace server_config {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_server_5fconfig_2eproto();
void protobuf_AssignDesc_server_5fconfig_2eproto();
void protobuf_ShutdownFile_server_5fconfig_2eproto();

class Path;
class SocketIO;
class Logic;
class Logic_ManagerLogic;
class Logic_ManagerLogic_Styler;
class Logic_GameLogic;
class Logic_DbLogic;
class Logic_GameProto;
class Server;

enum Logic_type {
  Logic_type_Manager = 0,
  Logic_type_Gate = 1,
  Logic_type_Login = 2,
  Logic_type_Game = 3,
  Logic_type_Calc = 4,
  Logic_type_AI = 5
};
bool Logic_type_IsValid(int value);
const Logic_type Logic_type_type_MIN = Logic_type_Manager;
const Logic_type Logic_type_type_MAX = Logic_type_AI;
const int Logic_type_type_ARRAYSIZE = Logic_type_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Logic_type_descriptor();
inline const ::std::string& Logic_type_Name(Logic_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Logic_type_descriptor(), value);
}
inline bool Logic_type_Parse(
    const ::std::string& name, Logic_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Logic_type>(
    Logic_type_descriptor(), name, value);
}
// ===================================================================

class Path : public ::google::protobuf::Message {
 public:
  Path();
  virtual ~Path();
  
  Path(const Path& from);
  
  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Path& default_instance();
  
  void Swap(Path* other);
  
  // implements Message ----------------------------------------------
  
  Path* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string log_file = 1;
  inline bool has_log_file() const;
  inline void clear_log_file();
  static const int kLogFileFieldNumber = 1;
  inline const ::std::string& log_file() const;
  inline void set_log_file(const ::std::string& value);
  inline void set_log_file(const char* value);
  inline void set_log_file(const char* value, size_t size);
  inline ::std::string* mutable_log_file();
  inline ::std::string* release_log_file();
  
  // required string data_path = 2;
  inline bool has_data_path() const;
  inline void clear_data_path();
  static const int kDataPathFieldNumber = 2;
  inline const ::std::string& data_path() const;
  inline void set_data_path(const ::std::string& value);
  inline void set_data_path(const char* value);
  inline void set_data_path(const char* value, size_t size);
  inline ::std::string* mutable_data_path();
  inline ::std::string* release_data_path();
  
  // required string update_pak = 3;
  inline bool has_update_pak() const;
  inline void clear_update_pak();
  static const int kUpdatePakFieldNumber = 3;
  inline const ::std::string& update_pak() const;
  inline void set_update_pak(const ::std::string& value);
  inline void set_update_pak(const char* value);
  inline void set_update_pak(const char* value, size_t size);
  inline ::std::string* mutable_update_pak();
  inline ::std::string* release_update_pak();
  
  // required string efficiency_file = 4;
  inline bool has_efficiency_file() const;
  inline void clear_efficiency_file();
  static const int kEfficiencyFileFieldNumber = 4;
  inline const ::std::string& efficiency_file() const;
  inline void set_efficiency_file(const ::std::string& value);
  inline void set_efficiency_file(const char* value);
  inline void set_efficiency_file(const char* value, size_t size);
  inline ::std::string* mutable_efficiency_file();
  inline ::std::string* release_efficiency_file();
  
  // @@protoc_insertion_point(class_scope:server_config.Path)
 private:
  inline void set_has_log_file();
  inline void clear_has_log_file();
  inline void set_has_data_path();
  inline void clear_has_data_path();
  inline void set_has_update_pak();
  inline void clear_has_update_pak();
  inline void set_has_efficiency_file();
  inline void clear_has_efficiency_file();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* log_file_;
  ::std::string* data_path_;
  ::std::string* update_pak_;
  ::std::string* efficiency_file_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_server_5fconfig_2eproto();
  friend void protobuf_AssignDesc_server_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_server_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static Path* default_instance_;
};
// -------------------------------------------------------------------

class SocketIO : public ::google::protobuf::Message {
 public:
  SocketIO();
  virtual ~SocketIO();
  
  SocketIO(const SocketIO& from);
  
  inline SocketIO& operator=(const SocketIO& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SocketIO& default_instance();
  
  void Swap(SocketIO* other);
  
  // implements Message ----------------------------------------------
  
  SocketIO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SocketIO& from);
  void MergeFrom(const SocketIO& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 max_socket = 1;
  inline bool has_max_socket() const;
  inline void clear_max_socket();
  static const int kMaxSocketFieldNumber = 1;
  inline ::google::protobuf::uint32 max_socket() const;
  inline void set_max_socket(::google::protobuf::uint32 value);
  
  // required uint32 recv_buf_len = 2;
  inline bool has_recv_buf_len() const;
  inline void clear_recv_buf_len();
  static const int kRecvBufLenFieldNumber = 2;
  inline ::google::protobuf::uint32 recv_buf_len() const;
  inline void set_recv_buf_len(::google::protobuf::uint32 value);
  
  // required uint32 send_pool = 3;
  inline bool has_send_pool() const;
  inline void clear_send_pool();
  static const int kSendPoolFieldNumber = 3;
  inline ::google::protobuf::uint32 send_pool() const;
  inline void set_send_pool(::google::protobuf::uint32 value);
  
  // required uint32 send_buf_len = 4;
  inline bool has_send_buf_len() const;
  inline void clear_send_buf_len();
  static const int kSendBufLenFieldNumber = 4;
  inline ::google::protobuf::uint32 send_buf_len() const;
  inline void set_send_buf_len(::google::protobuf::uint32 value);
  
  // required string packet_begin = 5;
  inline bool has_packet_begin() const;
  inline void clear_packet_begin();
  static const int kPacketBeginFieldNumber = 5;
  inline const ::std::string& packet_begin() const;
  inline void set_packet_begin(const ::std::string& value);
  inline void set_packet_begin(const char* value);
  inline void set_packet_begin(const char* value, size_t size);
  inline ::std::string* mutable_packet_begin();
  inline ::std::string* release_packet_begin();
  
  // required string packet_end = 6;
  inline bool has_packet_end() const;
  inline void clear_packet_end();
  static const int kPacketEndFieldNumber = 6;
  inline const ::std::string& packet_end() const;
  inline void set_packet_end(const ::std::string& value);
  inline void set_packet_end(const char* value);
  inline void set_packet_end(const char* value, size_t size);
  inline ::std::string* mutable_packet_end();
  inline ::std::string* release_packet_end();
  
  // required bool packet_flag = 7;
  inline bool has_packet_flag() const;
  inline void clear_packet_flag();
  static const int kPacketFlagFieldNumber = 7;
  inline bool packet_flag() const;
  inline void set_packet_flag(bool value);
  
  // required uint32 discard_threshold = 8;
  inline bool has_discard_threshold() const;
  inline void clear_discard_threshold();
  static const int kDiscardThresholdFieldNumber = 8;
  inline ::google::protobuf::uint32 discard_threshold() const;
  inline void set_discard_threshold(::google::protobuf::uint32 value);
  
  // required uint32 pend_limit = 9;
  inline bool has_pend_limit() const;
  inline void clear_pend_limit();
  static const int kPendLimitFieldNumber = 9;
  inline ::google::protobuf::uint32 pend_limit() const;
  inline void set_pend_limit(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:server_config.SocketIO)
 private:
  inline void set_has_max_socket();
  inline void clear_has_max_socket();
  inline void set_has_recv_buf_len();
  inline void clear_has_recv_buf_len();
  inline void set_has_send_pool();
  inline void clear_has_send_pool();
  inline void set_has_send_buf_len();
  inline void clear_has_send_buf_len();
  inline void set_has_packet_begin();
  inline void clear_has_packet_begin();
  inline void set_has_packet_end();
  inline void clear_has_packet_end();
  inline void set_has_packet_flag();
  inline void clear_has_packet_flag();
  inline void set_has_discard_threshold();
  inline void clear_has_discard_threshold();
  inline void set_has_pend_limit();
  inline void clear_has_pend_limit();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 max_socket_;
  ::google::protobuf::uint32 recv_buf_len_;
  ::google::protobuf::uint32 send_pool_;
  ::google::protobuf::uint32 send_buf_len_;
  ::std::string* packet_begin_;
  ::std::string* packet_end_;
  bool packet_flag_;
  ::google::protobuf::uint32 discard_threshold_;
  ::google::protobuf::uint32 pend_limit_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_server_5fconfig_2eproto();
  friend void protobuf_AssignDesc_server_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_server_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static SocketIO* default_instance_;
};
// -------------------------------------------------------------------

class Logic_ManagerLogic_Styler : public ::google::protobuf::Message {
 public:
  Logic_ManagerLogic_Styler();
  virtual ~Logic_ManagerLogic_Styler();
  
  Logic_ManagerLogic_Styler(const Logic_ManagerLogic_Styler& from);
  
  inline Logic_ManagerLogic_Styler& operator=(const Logic_ManagerLogic_Styler& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Logic_ManagerLogic_Styler& default_instance();
  
  void Swap(Logic_ManagerLogic_Styler* other);
  
  // implements Message ----------------------------------------------
  
  Logic_ManagerLogic_Styler* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logic_ManagerLogic_Styler& from);
  void MergeFrom(const Logic_ManagerLogic_Styler& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool unique = 1;
  inline bool has_unique() const;
  inline void clear_unique();
  static const int kUniqueFieldNumber = 1;
  inline bool unique() const;
  inline void set_unique(bool value);
  
  // repeated .server_config.Logic.type depends = 2;
  inline int depends_size() const;
  inline void clear_depends();
  static const int kDependsFieldNumber = 2;
  inline ::server_config::Logic_type depends(int index) const;
  inline void set_depends(int index, ::server_config::Logic_type value);
  inline void add_depends(::server_config::Logic_type value);
  inline const ::google::protobuf::RepeatedField<int>& depends() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_depends();
  
  // @@protoc_insertion_point(class_scope:server_config.Logic.ManagerLogic.Styler)
 private:
  inline void set_has_unique();
  inline void clear_has_unique();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedField<int> depends_;
  bool unique_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_server_5fconfig_2eproto();
  friend void protobuf_AssignDesc_server_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_server_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static Logic_ManagerLogic_Styler* default_instance_;
};
// -------------------------------------------------------------------

class Logic_ManagerLogic : public ::google::protobuf::Message {
 public:
  Logic_ManagerLogic();
  virtual ~Logic_ManagerLogic();
  
  Logic_ManagerLogic(const Logic_ManagerLogic& from);
  
  inline Logic_ManagerLogic& operator=(const Logic_ManagerLogic& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Logic_ManagerLogic& default_instance();
  
  void Swap(Logic_ManagerLogic* other);
  
  // implements Message ----------------------------------------------
  
  Logic_ManagerLogic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logic_ManagerLogic& from);
  void MergeFrom(const Logic_ManagerLogic& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Logic_ManagerLogic_Styler Styler;
  
  // accessors -------------------------------------------------------
  
  // repeated .server_config.Logic.ManagerLogic.Styler stylers = 1;
  inline int stylers_size() const;
  inline void clear_stylers();
  static const int kStylersFieldNumber = 1;
  inline const ::server_config::Logic_ManagerLogic_Styler& stylers(int index) const;
  inline ::server_config::Logic_ManagerLogic_Styler* mutable_stylers(int index);
  inline ::server_config::Logic_ManagerLogic_Styler* add_stylers();
  inline const ::google::protobuf::RepeatedPtrField< ::server_config::Logic_ManagerLogic_Styler >&
      stylers() const;
  inline ::google::protobuf::RepeatedPtrField< ::server_config::Logic_ManagerLogic_Styler >*
      mutable_stylers();
  
  // @@protoc_insertion_point(class_scope:server_config.Logic.ManagerLogic)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::server_config::Logic_ManagerLogic_Styler > stylers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_server_5fconfig_2eproto();
  friend void protobuf_AssignDesc_server_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_server_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static Logic_ManagerLogic* default_instance_;
};
// -------------------------------------------------------------------

class Logic_GameLogic : public ::google::protobuf::Message {
 public:
  Logic_GameLogic();
  virtual ~Logic_GameLogic();
  
  Logic_GameLogic(const Logic_GameLogic& from);
  
  inline Logic_GameLogic& operator=(const Logic_GameLogic& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Logic_GameLogic& default_instance();
  
  void Swap(Logic_GameLogic* other);
  
  // implements Message ----------------------------------------------
  
  Logic_GameLogic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logic_GameLogic& from);
  void MergeFrom(const Logic_GameLogic& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 map_split_size = 1;
  inline bool has_map_split_size() const;
  inline void clear_map_split_size();
  static const int kMapSplitSizeFieldNumber = 1;
  inline ::google::protobuf::int32 map_split_size() const;
  inline void set_map_split_size(::google::protobuf::int32 value);
  
  // required int32 map_vis_zone = 2;
  inline bool has_map_vis_zone() const;
  inline void clear_map_vis_zone();
  static const int kMapVisZoneFieldNumber = 2;
  inline ::google::protobuf::int32 map_vis_zone() const;
  inline void set_map_vis_zone(::google::protobuf::int32 value);
  
  // required bool no_mob = 3;
  inline bool has_no_mob() const;
  inline void clear_no_mob();
  static const int kNoMobFieldNumber = 3;
  inline bool no_mob() const;
  inline void set_no_mob(bool value);
  
  // required bool no_role = 4;
  inline bool has_no_role() const;
  inline void clear_no_role();
  static const int kNoRoleFieldNumber = 4;
  inline bool no_role() const;
  inline void set_no_role(bool value);
  
  // required int32 newbie_line = 5;
  inline bool has_newbie_line() const;
  inline void clear_newbie_line();
  static const int kNewbieLineFieldNumber = 5;
  inline ::google::protobuf::int32 newbie_line() const;
  inline void set_newbie_line(::google::protobuf::int32 value);
  
  // required bool allow_debug_break = 6;
  inline bool has_allow_debug_break() const;
  inline void clear_allow_debug_break();
  static const int kAllowDebugBreakFieldNumber = 6;
  inline bool allow_debug_break() const;
  inline void set_allow_debug_break(bool value);
  
  // @@protoc_insertion_point(class_scope:server_config.Logic.GameLogic)
 private:
  inline void set_has_map_split_size();
  inline void clear_has_map_split_size();
  inline void set_has_map_vis_zone();
  inline void clear_has_map_vis_zone();
  inline void set_has_no_mob();
  inline void clear_has_no_mob();
  inline void set_has_no_role();
  inline void clear_has_no_role();
  inline void set_has_newbie_line();
  inline void clear_has_newbie_line();
  inline void set_has_allow_debug_break();
  inline void clear_has_allow_debug_break();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 map_split_size_;
  ::google::protobuf::int32 map_vis_zone_;
  bool no_mob_;
  bool no_role_;
  bool allow_debug_break_;
  ::google::protobuf::int32 newbie_line_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_server_5fconfig_2eproto();
  friend void protobuf_AssignDesc_server_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_server_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static Logic_GameLogic* default_instance_;
};
// -------------------------------------------------------------------

class Logic_DbLogic : public ::google::protobuf::Message {
 public:
  Logic_DbLogic();
  virtual ~Logic_DbLogic();
  
  Logic_DbLogic(const Logic_DbLogic& from);
  
  inline Logic_DbLogic& operator=(const Logic_DbLogic& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Logic_DbLogic& default_instance();
  
  void Swap(Logic_DbLogic* other);
  
  // implements Message ----------------------------------------------
  
  Logic_DbLogic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logic_DbLogic& from);
  void MergeFrom(const Logic_DbLogic& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 MinConn = 1;
  inline bool has_minconn() const;
  inline void clear_minconn();
  static const int kMinConnFieldNumber = 1;
  inline ::google::protobuf::uint32 minconn() const;
  inline void set_minconn(::google::protobuf::uint32 value);
  
  // required uint32 MaxConn = 2;
  inline bool has_maxconn() const;
  inline void clear_maxconn();
  static const int kMaxConnFieldNumber = 2;
  inline ::google::protobuf::uint32 maxconn() const;
  inline void set_maxconn(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:server_config.Logic.DbLogic)
 private:
  inline void set_has_minconn();
  inline void clear_has_minconn();
  inline void set_has_maxconn();
  inline void clear_has_maxconn();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 minconn_;
  ::google::protobuf::uint32 maxconn_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_server_5fconfig_2eproto();
  friend void protobuf_AssignDesc_server_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_server_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static Logic_DbLogic* default_instance_;
};
// -------------------------------------------------------------------

class Logic_GameProto : public ::google::protobuf::Message {
 public:
  Logic_GameProto();
  virtual ~Logic_GameProto();
  
  Logic_GameProto(const Logic_GameProto& from);
  
  inline Logic_GameProto& operator=(const Logic_GameProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Logic_GameProto& default_instance();
  
  void Swap(Logic_GameProto* other);
  
  // implements Message ----------------------------------------------
  
  Logic_GameProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logic_GameProto& from);
  void MergeFrom(const Logic_GameProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string desc_file = 1;
  inline bool has_desc_file() const;
  inline void clear_desc_file();
  static const int kDescFileFieldNumber = 1;
  inline const ::std::string& desc_file() const;
  inline void set_desc_file(const ::std::string& value);
  inline void set_desc_file(const char* value);
  inline void set_desc_file(const char* value, size_t size);
  inline ::std::string* mutable_desc_file();
  inline ::std::string* release_desc_file();
  
  // required string data_file = 2;
  inline bool has_data_file() const;
  inline void clear_data_file();
  static const int kDataFileFieldNumber = 2;
  inline const ::std::string& data_file() const;
  inline void set_data_file(const ::std::string& value);
  inline void set_data_file(const char* value);
  inline void set_data_file(const char* value, size_t size);
  inline ::std::string* mutable_data_file();
  inline ::std::string* release_data_file();
  
  // @@protoc_insertion_point(class_scope:server_config.Logic.GameProto)
 private:
  inline void set_has_desc_file();
  inline void clear_has_desc_file();
  inline void set_has_data_file();
  inline void clear_has_data_file();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* desc_file_;
  ::std::string* data_file_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_server_5fconfig_2eproto();
  friend void protobuf_AssignDesc_server_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_server_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static Logic_GameProto* default_instance_;
};
// -------------------------------------------------------------------

class Logic : public ::google::protobuf::Message {
 public:
  Logic();
  virtual ~Logic();
  
  Logic(const Logic& from);
  
  inline Logic& operator=(const Logic& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Logic& default_instance();
  
  void Swap(Logic* other);
  
  // implements Message ----------------------------------------------
  
  Logic* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Logic& from);
  void MergeFrom(const Logic& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Logic_ManagerLogic ManagerLogic;
  typedef Logic_GameLogic GameLogic;
  typedef Logic_DbLogic DbLogic;
  typedef Logic_GameProto GameProto;
  
  typedef Logic_type type;
  static const type Manager = Logic_type_Manager;
  static const type Gate = Logic_type_Gate;
  static const type Login = Logic_type_Login;
  static const type Game = Logic_type_Game;
  static const type Calc = Logic_type_Calc;
  static const type AI = Logic_type_AI;
  static inline bool type_IsValid(int value) {
    return Logic_type_IsValid(value);
  }
  static const type type_MIN =
    Logic_type_type_MIN;
  static const type type_MAX =
    Logic_type_type_MAX;
  static const int type_ARRAYSIZE =
    Logic_type_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  type_descriptor() {
    return Logic_type_descriptor();
  }
  static inline const ::std::string& type_Name(type value) {
    return Logic_type_Name(value);
  }
  static inline bool type_Parse(const ::std::string& name,
      type* value) {
    return Logic_type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string logic_dll = 1;
  inline bool has_logic_dll() const;
  inline void clear_logic_dll();
  static const int kLogicDllFieldNumber = 1;
  inline const ::std::string& logic_dll() const;
  inline void set_logic_dll(const ::std::string& value);
  inline void set_logic_dll(const char* value);
  inline void set_logic_dll(const char* value, size_t size);
  inline ::std::string* mutable_logic_dll();
  inline ::std::string* release_logic_dll();
  
  // required string server_name = 2;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  
  // required string manager_IP = 3;
  inline bool has_manager_ip() const;
  inline void clear_manager_ip();
  static const int kManagerIPFieldNumber = 3;
  inline const ::std::string& manager_ip() const;
  inline void set_manager_ip(const ::std::string& value);
  inline void set_manager_ip(const char* value);
  inline void set_manager_ip(const char* value, size_t size);
  inline ::std::string* mutable_manager_ip();
  inline ::std::string* release_manager_ip();
  
  // required .server_config.Logic.type server_type = 4;
  inline bool has_server_type() const;
  inline void clear_server_type();
  static const int kServerTypeFieldNumber = 4;
  inline ::server_config::Logic_type server_type() const;
  inline void set_server_type(::server_config::Logic_type value);
  
  // required int32 beat = 5;
  inline bool has_beat() const;
  inline void clear_beat();
  static const int kBeatFieldNumber = 5;
  inline ::google::protobuf::int32 beat() const;
  inline void set_beat(::google::protobuf::int32 value);
  
  // required string listen_IP = 6;
  inline bool has_listen_ip() const;
  inline void clear_listen_ip();
  static const int kListenIPFieldNumber = 6;
  inline const ::std::string& listen_ip() const;
  inline void set_listen_ip(const ::std::string& value);
  inline void set_listen_ip(const char* value);
  inline void set_listen_ip(const char* value, size_t size);
  inline ::std::string* mutable_listen_ip();
  inline ::std::string* release_listen_ip();
  
  // optional .server_config.Logic.ManagerLogic manager = 7;
  inline bool has_manager() const;
  inline void clear_manager();
  static const int kManagerFieldNumber = 7;
  inline const ::server_config::Logic_ManagerLogic& manager() const;
  inline ::server_config::Logic_ManagerLogic* mutable_manager();
  inline ::server_config::Logic_ManagerLogic* release_manager();
  
  // optional .server_config.Logic.GameLogic game = 8;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 8;
  inline const ::server_config::Logic_GameLogic& game() const;
  inline ::server_config::Logic_GameLogic* mutable_game();
  inline ::server_config::Logic_GameLogic* release_game();
  
  // optional .server_config.Logic.DbLogic db = 9;
  inline bool has_db() const;
  inline void clear_db();
  static const int kDbFieldNumber = 9;
  inline const ::server_config::Logic_DbLogic& db() const;
  inline ::server_config::Logic_DbLogic* mutable_db();
  inline ::server_config::Logic_DbLogic* release_db();
  
  // optional .server_config.Logic.GameProto proto = 10;
  inline bool has_proto() const;
  inline void clear_proto();
  static const int kProtoFieldNumber = 10;
  inline const ::server_config::Logic_GameProto& proto() const;
  inline ::server_config::Logic_GameProto* mutable_proto();
  inline ::server_config::Logic_GameProto* release_proto();
  
  // @@protoc_insertion_point(class_scope:server_config.Logic)
 private:
  inline void set_has_logic_dll();
  inline void clear_has_logic_dll();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_manager_ip();
  inline void clear_has_manager_ip();
  inline void set_has_server_type();
  inline void clear_has_server_type();
  inline void set_has_beat();
  inline void clear_has_beat();
  inline void set_has_listen_ip();
  inline void clear_has_listen_ip();
  inline void set_has_manager();
  inline void clear_has_manager();
  inline void set_has_game();
  inline void clear_has_game();
  inline void set_has_db();
  inline void clear_has_db();
  inline void set_has_proto();
  inline void clear_has_proto();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* logic_dll_;
  ::std::string* server_name_;
  ::std::string* manager_ip_;
  int server_type_;
  ::google::protobuf::int32 beat_;
  ::std::string* listen_ip_;
  ::server_config::Logic_ManagerLogic* manager_;
  ::server_config::Logic_GameLogic* game_;
  ::server_config::Logic_DbLogic* db_;
  ::server_config::Logic_GameProto* proto_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_server_5fconfig_2eproto();
  friend void protobuf_AssignDesc_server_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_server_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static Logic* default_instance_;
};
// -------------------------------------------------------------------

class Server : public ::google::protobuf::Message {
 public:
  Server();
  virtual ~Server();
  
  Server(const Server& from);
  
  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Server& default_instance();
  
  void Swap(Server* other);
  
  // implements Message ----------------------------------------------
  
  Server* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Server& from);
  void MergeFrom(const Server& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .server_config.SocketIO socket_io = 1;
  inline int socket_io_size() const;
  inline void clear_socket_io();
  static const int kSocketIoFieldNumber = 1;
  inline const ::server_config::SocketIO& socket_io(int index) const;
  inline ::server_config::SocketIO* mutable_socket_io(int index);
  inline ::server_config::SocketIO* add_socket_io();
  inline const ::google::protobuf::RepeatedPtrField< ::server_config::SocketIO >&
      socket_io() const;
  inline ::google::protobuf::RepeatedPtrField< ::server_config::SocketIO >*
      mutable_socket_io();
  
  // required .server_config.Path path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::server_config::Path& path() const;
  inline ::server_config::Path* mutable_path();
  inline ::server_config::Path* release_path();
  
  // required .server_config.Logic logic = 3;
  inline bool has_logic() const;
  inline void clear_logic();
  static const int kLogicFieldNumber = 3;
  inline const ::server_config::Logic& logic() const;
  inline ::server_config::Logic* mutable_logic();
  inline ::server_config::Logic* release_logic();
  
  // @@protoc_insertion_point(class_scope:server_config.Server)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_logic();
  inline void clear_has_logic();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::server_config::SocketIO > socket_io_;
  ::server_config::Path* path_;
  ::server_config::Logic* logic_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_server_5fconfig_2eproto();
  friend void protobuf_AssignDesc_server_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_server_5fconfig_2eproto();
  
  void InitAsDefaultInstance();
  static Server* default_instance_;
};
// ===================================================================


// ===================================================================

// Path

// required string log_file = 1;
inline bool Path::has_log_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Path::set_has_log_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Path::clear_has_log_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Path::clear_log_file() {
  if (log_file_ != &::google::protobuf::internal::kEmptyString) {
    log_file_->clear();
  }
  clear_has_log_file();
}
inline const ::std::string& Path::log_file() const {
  return *log_file_;
}
inline void Path::set_log_file(const ::std::string& value) {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::kEmptyString) {
    log_file_ = new ::std::string;
  }
  log_file_->assign(value);
}
inline void Path::set_log_file(const char* value) {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::kEmptyString) {
    log_file_ = new ::std::string;
  }
  log_file_->assign(value);
}
inline void Path::set_log_file(const char* value, size_t size) {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::kEmptyString) {
    log_file_ = new ::std::string;
  }
  log_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Path::mutable_log_file() {
  set_has_log_file();
  if (log_file_ == &::google::protobuf::internal::kEmptyString) {
    log_file_ = new ::std::string;
  }
  return log_file_;
}
inline ::std::string* Path::release_log_file() {
  clear_has_log_file();
  if (log_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_file_;
    log_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string data_path = 2;
inline bool Path::has_data_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Path::set_has_data_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Path::clear_has_data_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Path::clear_data_path() {
  if (data_path_ != &::google::protobuf::internal::kEmptyString) {
    data_path_->clear();
  }
  clear_has_data_path();
}
inline const ::std::string& Path::data_path() const {
  return *data_path_;
}
inline void Path::set_data_path(const ::std::string& value) {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::kEmptyString) {
    data_path_ = new ::std::string;
  }
  data_path_->assign(value);
}
inline void Path::set_data_path(const char* value) {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::kEmptyString) {
    data_path_ = new ::std::string;
  }
  data_path_->assign(value);
}
inline void Path::set_data_path(const char* value, size_t size) {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::kEmptyString) {
    data_path_ = new ::std::string;
  }
  data_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Path::mutable_data_path() {
  set_has_data_path();
  if (data_path_ == &::google::protobuf::internal::kEmptyString) {
    data_path_ = new ::std::string;
  }
  return data_path_;
}
inline ::std::string* Path::release_data_path() {
  clear_has_data_path();
  if (data_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_path_;
    data_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string update_pak = 3;
inline bool Path::has_update_pak() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Path::set_has_update_pak() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Path::clear_has_update_pak() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Path::clear_update_pak() {
  if (update_pak_ != &::google::protobuf::internal::kEmptyString) {
    update_pak_->clear();
  }
  clear_has_update_pak();
}
inline const ::std::string& Path::update_pak() const {
  return *update_pak_;
}
inline void Path::set_update_pak(const ::std::string& value) {
  set_has_update_pak();
  if (update_pak_ == &::google::protobuf::internal::kEmptyString) {
    update_pak_ = new ::std::string;
  }
  update_pak_->assign(value);
}
inline void Path::set_update_pak(const char* value) {
  set_has_update_pak();
  if (update_pak_ == &::google::protobuf::internal::kEmptyString) {
    update_pak_ = new ::std::string;
  }
  update_pak_->assign(value);
}
inline void Path::set_update_pak(const char* value, size_t size) {
  set_has_update_pak();
  if (update_pak_ == &::google::protobuf::internal::kEmptyString) {
    update_pak_ = new ::std::string;
  }
  update_pak_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Path::mutable_update_pak() {
  set_has_update_pak();
  if (update_pak_ == &::google::protobuf::internal::kEmptyString) {
    update_pak_ = new ::std::string;
  }
  return update_pak_;
}
inline ::std::string* Path::release_update_pak() {
  clear_has_update_pak();
  if (update_pak_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = update_pak_;
    update_pak_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string efficiency_file = 4;
inline bool Path::has_efficiency_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Path::set_has_efficiency_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Path::clear_has_efficiency_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Path::clear_efficiency_file() {
  if (efficiency_file_ != &::google::protobuf::internal::kEmptyString) {
    efficiency_file_->clear();
  }
  clear_has_efficiency_file();
}
inline const ::std::string& Path::efficiency_file() const {
  return *efficiency_file_;
}
inline void Path::set_efficiency_file(const ::std::string& value) {
  set_has_efficiency_file();
  if (efficiency_file_ == &::google::protobuf::internal::kEmptyString) {
    efficiency_file_ = new ::std::string;
  }
  efficiency_file_->assign(value);
}
inline void Path::set_efficiency_file(const char* value) {
  set_has_efficiency_file();
  if (efficiency_file_ == &::google::protobuf::internal::kEmptyString) {
    efficiency_file_ = new ::std::string;
  }
  efficiency_file_->assign(value);
}
inline void Path::set_efficiency_file(const char* value, size_t size) {
  set_has_efficiency_file();
  if (efficiency_file_ == &::google::protobuf::internal::kEmptyString) {
    efficiency_file_ = new ::std::string;
  }
  efficiency_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Path::mutable_efficiency_file() {
  set_has_efficiency_file();
  if (efficiency_file_ == &::google::protobuf::internal::kEmptyString) {
    efficiency_file_ = new ::std::string;
  }
  return efficiency_file_;
}
inline ::std::string* Path::release_efficiency_file() {
  clear_has_efficiency_file();
  if (efficiency_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = efficiency_file_;
    efficiency_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SocketIO

// required uint32 max_socket = 1;
inline bool SocketIO::has_max_socket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SocketIO::set_has_max_socket() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SocketIO::clear_has_max_socket() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SocketIO::clear_max_socket() {
  max_socket_ = 0u;
  clear_has_max_socket();
}
inline ::google::protobuf::uint32 SocketIO::max_socket() const {
  return max_socket_;
}
inline void SocketIO::set_max_socket(::google::protobuf::uint32 value) {
  set_has_max_socket();
  max_socket_ = value;
}

// required uint32 recv_buf_len = 2;
inline bool SocketIO::has_recv_buf_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SocketIO::set_has_recv_buf_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SocketIO::clear_has_recv_buf_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SocketIO::clear_recv_buf_len() {
  recv_buf_len_ = 0u;
  clear_has_recv_buf_len();
}
inline ::google::protobuf::uint32 SocketIO::recv_buf_len() const {
  return recv_buf_len_;
}
inline void SocketIO::set_recv_buf_len(::google::protobuf::uint32 value) {
  set_has_recv_buf_len();
  recv_buf_len_ = value;
}

// required uint32 send_pool = 3;
inline bool SocketIO::has_send_pool() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SocketIO::set_has_send_pool() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SocketIO::clear_has_send_pool() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SocketIO::clear_send_pool() {
  send_pool_ = 0u;
  clear_has_send_pool();
}
inline ::google::protobuf::uint32 SocketIO::send_pool() const {
  return send_pool_;
}
inline void SocketIO::set_send_pool(::google::protobuf::uint32 value) {
  set_has_send_pool();
  send_pool_ = value;
}

// required uint32 send_buf_len = 4;
inline bool SocketIO::has_send_buf_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SocketIO::set_has_send_buf_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SocketIO::clear_has_send_buf_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SocketIO::clear_send_buf_len() {
  send_buf_len_ = 0u;
  clear_has_send_buf_len();
}
inline ::google::protobuf::uint32 SocketIO::send_buf_len() const {
  return send_buf_len_;
}
inline void SocketIO::set_send_buf_len(::google::protobuf::uint32 value) {
  set_has_send_buf_len();
  send_buf_len_ = value;
}

// required string packet_begin = 5;
inline bool SocketIO::has_packet_begin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SocketIO::set_has_packet_begin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SocketIO::clear_has_packet_begin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SocketIO::clear_packet_begin() {
  if (packet_begin_ != &::google::protobuf::internal::kEmptyString) {
    packet_begin_->clear();
  }
  clear_has_packet_begin();
}
inline const ::std::string& SocketIO::packet_begin() const {
  return *packet_begin_;
}
inline void SocketIO::set_packet_begin(const ::std::string& value) {
  set_has_packet_begin();
  if (packet_begin_ == &::google::protobuf::internal::kEmptyString) {
    packet_begin_ = new ::std::string;
  }
  packet_begin_->assign(value);
}
inline void SocketIO::set_packet_begin(const char* value) {
  set_has_packet_begin();
  if (packet_begin_ == &::google::protobuf::internal::kEmptyString) {
    packet_begin_ = new ::std::string;
  }
  packet_begin_->assign(value);
}
inline void SocketIO::set_packet_begin(const char* value, size_t size) {
  set_has_packet_begin();
  if (packet_begin_ == &::google::protobuf::internal::kEmptyString) {
    packet_begin_ = new ::std::string;
  }
  packet_begin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SocketIO::mutable_packet_begin() {
  set_has_packet_begin();
  if (packet_begin_ == &::google::protobuf::internal::kEmptyString) {
    packet_begin_ = new ::std::string;
  }
  return packet_begin_;
}
inline ::std::string* SocketIO::release_packet_begin() {
  clear_has_packet_begin();
  if (packet_begin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packet_begin_;
    packet_begin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string packet_end = 6;
inline bool SocketIO::has_packet_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SocketIO::set_has_packet_end() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SocketIO::clear_has_packet_end() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SocketIO::clear_packet_end() {
  if (packet_end_ != &::google::protobuf::internal::kEmptyString) {
    packet_end_->clear();
  }
  clear_has_packet_end();
}
inline const ::std::string& SocketIO::packet_end() const {
  return *packet_end_;
}
inline void SocketIO::set_packet_end(const ::std::string& value) {
  set_has_packet_end();
  if (packet_end_ == &::google::protobuf::internal::kEmptyString) {
    packet_end_ = new ::std::string;
  }
  packet_end_->assign(value);
}
inline void SocketIO::set_packet_end(const char* value) {
  set_has_packet_end();
  if (packet_end_ == &::google::protobuf::internal::kEmptyString) {
    packet_end_ = new ::std::string;
  }
  packet_end_->assign(value);
}
inline void SocketIO::set_packet_end(const char* value, size_t size) {
  set_has_packet_end();
  if (packet_end_ == &::google::protobuf::internal::kEmptyString) {
    packet_end_ = new ::std::string;
  }
  packet_end_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SocketIO::mutable_packet_end() {
  set_has_packet_end();
  if (packet_end_ == &::google::protobuf::internal::kEmptyString) {
    packet_end_ = new ::std::string;
  }
  return packet_end_;
}
inline ::std::string* SocketIO::release_packet_end() {
  clear_has_packet_end();
  if (packet_end_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = packet_end_;
    packet_end_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool packet_flag = 7;
inline bool SocketIO::has_packet_flag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SocketIO::set_has_packet_flag() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SocketIO::clear_has_packet_flag() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SocketIO::clear_packet_flag() {
  packet_flag_ = false;
  clear_has_packet_flag();
}
inline bool SocketIO::packet_flag() const {
  return packet_flag_;
}
inline void SocketIO::set_packet_flag(bool value) {
  set_has_packet_flag();
  packet_flag_ = value;
}

// required uint32 discard_threshold = 8;
inline bool SocketIO::has_discard_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SocketIO::set_has_discard_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SocketIO::clear_has_discard_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SocketIO::clear_discard_threshold() {
  discard_threshold_ = 0u;
  clear_has_discard_threshold();
}
inline ::google::protobuf::uint32 SocketIO::discard_threshold() const {
  return discard_threshold_;
}
inline void SocketIO::set_discard_threshold(::google::protobuf::uint32 value) {
  set_has_discard_threshold();
  discard_threshold_ = value;
}

// required uint32 pend_limit = 9;
inline bool SocketIO::has_pend_limit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SocketIO::set_has_pend_limit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SocketIO::clear_has_pend_limit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SocketIO::clear_pend_limit() {
  pend_limit_ = 0u;
  clear_has_pend_limit();
}
inline ::google::protobuf::uint32 SocketIO::pend_limit() const {
  return pend_limit_;
}
inline void SocketIO::set_pend_limit(::google::protobuf::uint32 value) {
  set_has_pend_limit();
  pend_limit_ = value;
}

// -------------------------------------------------------------------

// Logic_ManagerLogic_Styler

// required bool unique = 1;
inline bool Logic_ManagerLogic_Styler::has_unique() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Logic_ManagerLogic_Styler::set_has_unique() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Logic_ManagerLogic_Styler::clear_has_unique() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Logic_ManagerLogic_Styler::clear_unique() {
  unique_ = false;
  clear_has_unique();
}
inline bool Logic_ManagerLogic_Styler::unique() const {
  return unique_;
}
inline void Logic_ManagerLogic_Styler::set_unique(bool value) {
  set_has_unique();
  unique_ = value;
}

// repeated .server_config.Logic.type depends = 2;
inline int Logic_ManagerLogic_Styler::depends_size() const {
  return depends_.size();
}
inline void Logic_ManagerLogic_Styler::clear_depends() {
  depends_.Clear();
}
inline ::server_config::Logic_type Logic_ManagerLogic_Styler::depends(int index) const {
  return static_cast< ::server_config::Logic_type >(depends_.Get(index));
}
inline void Logic_ManagerLogic_Styler::set_depends(int index, ::server_config::Logic_type value) {
  GOOGLE_DCHECK(::server_config::Logic_type_IsValid(value));
  depends_.Set(index, value);
}
inline void Logic_ManagerLogic_Styler::add_depends(::server_config::Logic_type value) {
  GOOGLE_DCHECK(::server_config::Logic_type_IsValid(value));
  depends_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
Logic_ManagerLogic_Styler::depends() const {
  return depends_;
}
inline ::google::protobuf::RepeatedField<int>*
Logic_ManagerLogic_Styler::mutable_depends() {
  return &depends_;
}

// -------------------------------------------------------------------

// Logic_ManagerLogic

// repeated .server_config.Logic.ManagerLogic.Styler stylers = 1;
inline int Logic_ManagerLogic::stylers_size() const {
  return stylers_.size();
}
inline void Logic_ManagerLogic::clear_stylers() {
  stylers_.Clear();
}
inline const ::server_config::Logic_ManagerLogic_Styler& Logic_ManagerLogic::stylers(int index) const {
  return stylers_.Get(index);
}
inline ::server_config::Logic_ManagerLogic_Styler* Logic_ManagerLogic::mutable_stylers(int index) {
  return stylers_.Mutable(index);
}
inline ::server_config::Logic_ManagerLogic_Styler* Logic_ManagerLogic::add_stylers() {
  return stylers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::server_config::Logic_ManagerLogic_Styler >&
Logic_ManagerLogic::stylers() const {
  return stylers_;
}
inline ::google::protobuf::RepeatedPtrField< ::server_config::Logic_ManagerLogic_Styler >*
Logic_ManagerLogic::mutable_stylers() {
  return &stylers_;
}

// -------------------------------------------------------------------

// Logic_GameLogic

// required int32 map_split_size = 1;
inline bool Logic_GameLogic::has_map_split_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Logic_GameLogic::set_has_map_split_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Logic_GameLogic::clear_has_map_split_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Logic_GameLogic::clear_map_split_size() {
  map_split_size_ = 0;
  clear_has_map_split_size();
}
inline ::google::protobuf::int32 Logic_GameLogic::map_split_size() const {
  return map_split_size_;
}
inline void Logic_GameLogic::set_map_split_size(::google::protobuf::int32 value) {
  set_has_map_split_size();
  map_split_size_ = value;
}

// required int32 map_vis_zone = 2;
inline bool Logic_GameLogic::has_map_vis_zone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Logic_GameLogic::set_has_map_vis_zone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Logic_GameLogic::clear_has_map_vis_zone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Logic_GameLogic::clear_map_vis_zone() {
  map_vis_zone_ = 0;
  clear_has_map_vis_zone();
}
inline ::google::protobuf::int32 Logic_GameLogic::map_vis_zone() const {
  return map_vis_zone_;
}
inline void Logic_GameLogic::set_map_vis_zone(::google::protobuf::int32 value) {
  set_has_map_vis_zone();
  map_vis_zone_ = value;
}

// required bool no_mob = 3;
inline bool Logic_GameLogic::has_no_mob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Logic_GameLogic::set_has_no_mob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Logic_GameLogic::clear_has_no_mob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Logic_GameLogic::clear_no_mob() {
  no_mob_ = false;
  clear_has_no_mob();
}
inline bool Logic_GameLogic::no_mob() const {
  return no_mob_;
}
inline void Logic_GameLogic::set_no_mob(bool value) {
  set_has_no_mob();
  no_mob_ = value;
}

// required bool no_role = 4;
inline bool Logic_GameLogic::has_no_role() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Logic_GameLogic::set_has_no_role() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Logic_GameLogic::clear_has_no_role() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Logic_GameLogic::clear_no_role() {
  no_role_ = false;
  clear_has_no_role();
}
inline bool Logic_GameLogic::no_role() const {
  return no_role_;
}
inline void Logic_GameLogic::set_no_role(bool value) {
  set_has_no_role();
  no_role_ = value;
}

// required int32 newbie_line = 5;
inline bool Logic_GameLogic::has_newbie_line() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Logic_GameLogic::set_has_newbie_line() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Logic_GameLogic::clear_has_newbie_line() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Logic_GameLogic::clear_newbie_line() {
  newbie_line_ = 0;
  clear_has_newbie_line();
}
inline ::google::protobuf::int32 Logic_GameLogic::newbie_line() const {
  return newbie_line_;
}
inline void Logic_GameLogic::set_newbie_line(::google::protobuf::int32 value) {
  set_has_newbie_line();
  newbie_line_ = value;
}

// required bool allow_debug_break = 6;
inline bool Logic_GameLogic::has_allow_debug_break() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Logic_GameLogic::set_has_allow_debug_break() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Logic_GameLogic::clear_has_allow_debug_break() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Logic_GameLogic::clear_allow_debug_break() {
  allow_debug_break_ = false;
  clear_has_allow_debug_break();
}
inline bool Logic_GameLogic::allow_debug_break() const {
  return allow_debug_break_;
}
inline void Logic_GameLogic::set_allow_debug_break(bool value) {
  set_has_allow_debug_break();
  allow_debug_break_ = value;
}

// -------------------------------------------------------------------

// Logic_DbLogic

// required uint32 MinConn = 1;
inline bool Logic_DbLogic::has_minconn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Logic_DbLogic::set_has_minconn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Logic_DbLogic::clear_has_minconn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Logic_DbLogic::clear_minconn() {
  minconn_ = 0u;
  clear_has_minconn();
}
inline ::google::protobuf::uint32 Logic_DbLogic::minconn() const {
  return minconn_;
}
inline void Logic_DbLogic::set_minconn(::google::protobuf::uint32 value) {
  set_has_minconn();
  minconn_ = value;
}

// required uint32 MaxConn = 2;
inline bool Logic_DbLogic::has_maxconn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Logic_DbLogic::set_has_maxconn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Logic_DbLogic::clear_has_maxconn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Logic_DbLogic::clear_maxconn() {
  maxconn_ = 0u;
  clear_has_maxconn();
}
inline ::google::protobuf::uint32 Logic_DbLogic::maxconn() const {
  return maxconn_;
}
inline void Logic_DbLogic::set_maxconn(::google::protobuf::uint32 value) {
  set_has_maxconn();
  maxconn_ = value;
}

// -------------------------------------------------------------------

// Logic_GameProto

// required string desc_file = 1;
inline bool Logic_GameProto::has_desc_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Logic_GameProto::set_has_desc_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Logic_GameProto::clear_has_desc_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Logic_GameProto::clear_desc_file() {
  if (desc_file_ != &::google::protobuf::internal::kEmptyString) {
    desc_file_->clear();
  }
  clear_has_desc_file();
}
inline const ::std::string& Logic_GameProto::desc_file() const {
  return *desc_file_;
}
inline void Logic_GameProto::set_desc_file(const ::std::string& value) {
  set_has_desc_file();
  if (desc_file_ == &::google::protobuf::internal::kEmptyString) {
    desc_file_ = new ::std::string;
  }
  desc_file_->assign(value);
}
inline void Logic_GameProto::set_desc_file(const char* value) {
  set_has_desc_file();
  if (desc_file_ == &::google::protobuf::internal::kEmptyString) {
    desc_file_ = new ::std::string;
  }
  desc_file_->assign(value);
}
inline void Logic_GameProto::set_desc_file(const char* value, size_t size) {
  set_has_desc_file();
  if (desc_file_ == &::google::protobuf::internal::kEmptyString) {
    desc_file_ = new ::std::string;
  }
  desc_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Logic_GameProto::mutable_desc_file() {
  set_has_desc_file();
  if (desc_file_ == &::google::protobuf::internal::kEmptyString) {
    desc_file_ = new ::std::string;
  }
  return desc_file_;
}
inline ::std::string* Logic_GameProto::release_desc_file() {
  clear_has_desc_file();
  if (desc_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_file_;
    desc_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string data_file = 2;
inline bool Logic_GameProto::has_data_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Logic_GameProto::set_has_data_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Logic_GameProto::clear_has_data_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Logic_GameProto::clear_data_file() {
  if (data_file_ != &::google::protobuf::internal::kEmptyString) {
    data_file_->clear();
  }
  clear_has_data_file();
}
inline const ::std::string& Logic_GameProto::data_file() const {
  return *data_file_;
}
inline void Logic_GameProto::set_data_file(const ::std::string& value) {
  set_has_data_file();
  if (data_file_ == &::google::protobuf::internal::kEmptyString) {
    data_file_ = new ::std::string;
  }
  data_file_->assign(value);
}
inline void Logic_GameProto::set_data_file(const char* value) {
  set_has_data_file();
  if (data_file_ == &::google::protobuf::internal::kEmptyString) {
    data_file_ = new ::std::string;
  }
  data_file_->assign(value);
}
inline void Logic_GameProto::set_data_file(const char* value, size_t size) {
  set_has_data_file();
  if (data_file_ == &::google::protobuf::internal::kEmptyString) {
    data_file_ = new ::std::string;
  }
  data_file_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Logic_GameProto::mutable_data_file() {
  set_has_data_file();
  if (data_file_ == &::google::protobuf::internal::kEmptyString) {
    data_file_ = new ::std::string;
  }
  return data_file_;
}
inline ::std::string* Logic_GameProto::release_data_file() {
  clear_has_data_file();
  if (data_file_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_file_;
    data_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Logic

// required string logic_dll = 1;
inline bool Logic::has_logic_dll() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Logic::set_has_logic_dll() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Logic::clear_has_logic_dll() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Logic::clear_logic_dll() {
  if (logic_dll_ != &::google::protobuf::internal::kEmptyString) {
    logic_dll_->clear();
  }
  clear_has_logic_dll();
}
inline const ::std::string& Logic::logic_dll() const {
  return *logic_dll_;
}
inline void Logic::set_logic_dll(const ::std::string& value) {
  set_has_logic_dll();
  if (logic_dll_ == &::google::protobuf::internal::kEmptyString) {
    logic_dll_ = new ::std::string;
  }
  logic_dll_->assign(value);
}
inline void Logic::set_logic_dll(const char* value) {
  set_has_logic_dll();
  if (logic_dll_ == &::google::protobuf::internal::kEmptyString) {
    logic_dll_ = new ::std::string;
  }
  logic_dll_->assign(value);
}
inline void Logic::set_logic_dll(const char* value, size_t size) {
  set_has_logic_dll();
  if (logic_dll_ == &::google::protobuf::internal::kEmptyString) {
    logic_dll_ = new ::std::string;
  }
  logic_dll_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Logic::mutable_logic_dll() {
  set_has_logic_dll();
  if (logic_dll_ == &::google::protobuf::internal::kEmptyString) {
    logic_dll_ = new ::std::string;
  }
  return logic_dll_;
}
inline ::std::string* Logic::release_logic_dll() {
  clear_has_logic_dll();
  if (logic_dll_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = logic_dll_;
    logic_dll_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string server_name = 2;
inline bool Logic::has_server_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Logic::set_has_server_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Logic::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Logic::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& Logic::server_name() const {
  return *server_name_;
}
inline void Logic::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Logic::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void Logic::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Logic::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* Logic::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string manager_IP = 3;
inline bool Logic::has_manager_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Logic::set_has_manager_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Logic::clear_has_manager_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Logic::clear_manager_ip() {
  if (manager_ip_ != &::google::protobuf::internal::kEmptyString) {
    manager_ip_->clear();
  }
  clear_has_manager_ip();
}
inline const ::std::string& Logic::manager_ip() const {
  return *manager_ip_;
}
inline void Logic::set_manager_ip(const ::std::string& value) {
  set_has_manager_ip();
  if (manager_ip_ == &::google::protobuf::internal::kEmptyString) {
    manager_ip_ = new ::std::string;
  }
  manager_ip_->assign(value);
}
inline void Logic::set_manager_ip(const char* value) {
  set_has_manager_ip();
  if (manager_ip_ == &::google::protobuf::internal::kEmptyString) {
    manager_ip_ = new ::std::string;
  }
  manager_ip_->assign(value);
}
inline void Logic::set_manager_ip(const char* value, size_t size) {
  set_has_manager_ip();
  if (manager_ip_ == &::google::protobuf::internal::kEmptyString) {
    manager_ip_ = new ::std::string;
  }
  manager_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Logic::mutable_manager_ip() {
  set_has_manager_ip();
  if (manager_ip_ == &::google::protobuf::internal::kEmptyString) {
    manager_ip_ = new ::std::string;
  }
  return manager_ip_;
}
inline ::std::string* Logic::release_manager_ip() {
  clear_has_manager_ip();
  if (manager_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = manager_ip_;
    manager_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .server_config.Logic.type server_type = 4;
inline bool Logic::has_server_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Logic::set_has_server_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Logic::clear_has_server_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Logic::clear_server_type() {
  server_type_ = 0;
  clear_has_server_type();
}
inline ::server_config::Logic_type Logic::server_type() const {
  return static_cast< ::server_config::Logic_type >(server_type_);
}
inline void Logic::set_server_type(::server_config::Logic_type value) {
  GOOGLE_DCHECK(::server_config::Logic_type_IsValid(value));
  set_has_server_type();
  server_type_ = value;
}

// required int32 beat = 5;
inline bool Logic::has_beat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Logic::set_has_beat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Logic::clear_has_beat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Logic::clear_beat() {
  beat_ = 0;
  clear_has_beat();
}
inline ::google::protobuf::int32 Logic::beat() const {
  return beat_;
}
inline void Logic::set_beat(::google::protobuf::int32 value) {
  set_has_beat();
  beat_ = value;
}

// required string listen_IP = 6;
inline bool Logic::has_listen_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Logic::set_has_listen_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Logic::clear_has_listen_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Logic::clear_listen_ip() {
  if (listen_ip_ != &::google::protobuf::internal::kEmptyString) {
    listen_ip_->clear();
  }
  clear_has_listen_ip();
}
inline const ::std::string& Logic::listen_ip() const {
  return *listen_ip_;
}
inline void Logic::set_listen_ip(const ::std::string& value) {
  set_has_listen_ip();
  if (listen_ip_ == &::google::protobuf::internal::kEmptyString) {
    listen_ip_ = new ::std::string;
  }
  listen_ip_->assign(value);
}
inline void Logic::set_listen_ip(const char* value) {
  set_has_listen_ip();
  if (listen_ip_ == &::google::protobuf::internal::kEmptyString) {
    listen_ip_ = new ::std::string;
  }
  listen_ip_->assign(value);
}
inline void Logic::set_listen_ip(const char* value, size_t size) {
  set_has_listen_ip();
  if (listen_ip_ == &::google::protobuf::internal::kEmptyString) {
    listen_ip_ = new ::std::string;
  }
  listen_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Logic::mutable_listen_ip() {
  set_has_listen_ip();
  if (listen_ip_ == &::google::protobuf::internal::kEmptyString) {
    listen_ip_ = new ::std::string;
  }
  return listen_ip_;
}
inline ::std::string* Logic::release_listen_ip() {
  clear_has_listen_ip();
  if (listen_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = listen_ip_;
    listen_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .server_config.Logic.ManagerLogic manager = 7;
inline bool Logic::has_manager() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Logic::set_has_manager() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Logic::clear_has_manager() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Logic::clear_manager() {
  if (manager_ != NULL) manager_->::server_config::Logic_ManagerLogic::Clear();
  clear_has_manager();
}
inline const ::server_config::Logic_ManagerLogic& Logic::manager() const {
  return manager_ != NULL ? *manager_ : *default_instance_->manager_;
}
inline ::server_config::Logic_ManagerLogic* Logic::mutable_manager() {
  set_has_manager();
  if (manager_ == NULL) manager_ = new ::server_config::Logic_ManagerLogic;
  return manager_;
}
inline ::server_config::Logic_ManagerLogic* Logic::release_manager() {
  clear_has_manager();
  ::server_config::Logic_ManagerLogic* temp = manager_;
  manager_ = NULL;
  return temp;
}

// optional .server_config.Logic.GameLogic game = 8;
inline bool Logic::has_game() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Logic::set_has_game() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Logic::clear_has_game() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Logic::clear_game() {
  if (game_ != NULL) game_->::server_config::Logic_GameLogic::Clear();
  clear_has_game();
}
inline const ::server_config::Logic_GameLogic& Logic::game() const {
  return game_ != NULL ? *game_ : *default_instance_->game_;
}
inline ::server_config::Logic_GameLogic* Logic::mutable_game() {
  set_has_game();
  if (game_ == NULL) game_ = new ::server_config::Logic_GameLogic;
  return game_;
}
inline ::server_config::Logic_GameLogic* Logic::release_game() {
  clear_has_game();
  ::server_config::Logic_GameLogic* temp = game_;
  game_ = NULL;
  return temp;
}

// optional .server_config.Logic.DbLogic db = 9;
inline bool Logic::has_db() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Logic::set_has_db() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Logic::clear_has_db() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Logic::clear_db() {
  if (db_ != NULL) db_->::server_config::Logic_DbLogic::Clear();
  clear_has_db();
}
inline const ::server_config::Logic_DbLogic& Logic::db() const {
  return db_ != NULL ? *db_ : *default_instance_->db_;
}
inline ::server_config::Logic_DbLogic* Logic::mutable_db() {
  set_has_db();
  if (db_ == NULL) db_ = new ::server_config::Logic_DbLogic;
  return db_;
}
inline ::server_config::Logic_DbLogic* Logic::release_db() {
  clear_has_db();
  ::server_config::Logic_DbLogic* temp = db_;
  db_ = NULL;
  return temp;
}

// optional .server_config.Logic.GameProto proto = 10;
inline bool Logic::has_proto() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Logic::set_has_proto() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Logic::clear_has_proto() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Logic::clear_proto() {
  if (proto_ != NULL) proto_->::server_config::Logic_GameProto::Clear();
  clear_has_proto();
}
inline const ::server_config::Logic_GameProto& Logic::proto() const {
  return proto_ != NULL ? *proto_ : *default_instance_->proto_;
}
inline ::server_config::Logic_GameProto* Logic::mutable_proto() {
  set_has_proto();
  if (proto_ == NULL) proto_ = new ::server_config::Logic_GameProto;
  return proto_;
}
inline ::server_config::Logic_GameProto* Logic::release_proto() {
  clear_has_proto();
  ::server_config::Logic_GameProto* temp = proto_;
  proto_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Server

// repeated .server_config.SocketIO socket_io = 1;
inline int Server::socket_io_size() const {
  return socket_io_.size();
}
inline void Server::clear_socket_io() {
  socket_io_.Clear();
}
inline const ::server_config::SocketIO& Server::socket_io(int index) const {
  return socket_io_.Get(index);
}
inline ::server_config::SocketIO* Server::mutable_socket_io(int index) {
  return socket_io_.Mutable(index);
}
inline ::server_config::SocketIO* Server::add_socket_io() {
  return socket_io_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::server_config::SocketIO >&
Server::socket_io() const {
  return socket_io_;
}
inline ::google::protobuf::RepeatedPtrField< ::server_config::SocketIO >*
Server::mutable_socket_io() {
  return &socket_io_;
}

// required .server_config.Path path = 2;
inline bool Server::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Server::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Server::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Server::clear_path() {
  if (path_ != NULL) path_->::server_config::Path::Clear();
  clear_has_path();
}
inline const ::server_config::Path& Server::path() const {
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
inline ::server_config::Path* Server::mutable_path() {
  set_has_path();
  if (path_ == NULL) path_ = new ::server_config::Path;
  return path_;
}
inline ::server_config::Path* Server::release_path() {
  clear_has_path();
  ::server_config::Path* temp = path_;
  path_ = NULL;
  return temp;
}

// required .server_config.Logic logic = 3;
inline bool Server::has_logic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Server::set_has_logic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Server::clear_has_logic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Server::clear_logic() {
  if (logic_ != NULL) logic_->::server_config::Logic::Clear();
  clear_has_logic();
}
inline const ::server_config::Logic& Server::logic() const {
  return logic_ != NULL ? *logic_ : *default_instance_->logic_;
}
inline ::server_config::Logic* Server::mutable_logic() {
  set_has_logic();
  if (logic_ == NULL) logic_ = new ::server_config::Logic;
  return logic_;
}
inline ::server_config::Logic* Server::release_logic() {
  clear_has_logic();
  ::server_config::Logic* temp = logic_;
  logic_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace server_config

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server_config::Logic_type>() {
  return ::server_config::Logic_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_server_5fconfig_2eproto__INCLUDED
